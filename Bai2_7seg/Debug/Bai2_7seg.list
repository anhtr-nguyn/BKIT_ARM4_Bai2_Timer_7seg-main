
Bai2_7seg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006754  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080068e4  080068e4  000168e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800695c  0800695c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800695c  0800695c  0001695c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006964  08006964  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006964  08006964  00016964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006968  08006968  00016968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800696c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000002c4  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000344  20000344  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c4e2  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c90  00000000  00000000  0003c592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001538  00000000  00000000  00040228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013a8  00000000  00000000  00041760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024619  00000000  00000000  00042b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c24e  00000000  00000000  00067121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d363f  00000000  00000000  0008336f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001569ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b48  00000000  00000000  00156a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080068cc 	.word	0x080068cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080068cc 	.word	0x080068cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800056c:	2201      	movs	r2, #1
 800056e:	2108      	movs	r1, #8
 8000570:	4802      	ldr	r0, [pc, #8]	; (800057c <button_init+0x14>)
 8000572:	f001 ffaf 	bl	80024d4 <HAL_GPIO_WritePin>
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40020c00 	.word	0x40020c00

08000580 <button_Scan>:

void button_Scan(){
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	2108      	movs	r1, #8
 800058a:	482f      	ldr	r0, [pc, #188]	; (8000648 <button_Scan+0xc8>)
 800058c:	f001 ffa2 	bl	80024d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000590:	2201      	movs	r2, #1
 8000592:	2108      	movs	r1, #8
 8000594:	482c      	ldr	r0, [pc, #176]	; (8000648 <button_Scan+0xc8>)
 8000596:	f001 ff9d 	bl	80024d4 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800059a:	230a      	movs	r3, #10
 800059c:	2202      	movs	r2, #2
 800059e:	492b      	ldr	r1, [pc, #172]	; (800064c <button_Scan+0xcc>)
 80005a0:	482b      	ldr	r0, [pc, #172]	; (8000650 <button_Scan+0xd0>)
 80005a2:	f003 fbf2 	bl	8003d8a <HAL_SPI_Receive>
	  int button_index = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80005aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005ae:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	e03f      	b.n	8000636 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db06      	blt.n	80005ca <button_Scan+0x4a>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b03      	cmp	r3, #3
 80005c0:	dc03      	bgt.n	80005ca <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	3304      	adds	r3, #4
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	e018      	b.n	80005fc <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	dd07      	ble.n	80005e0 <button_Scan+0x60>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2b07      	cmp	r3, #7
 80005d4:	dc04      	bgt.n	80005e0 <button_Scan+0x60>
			  button_index = 7 - i;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f1c3 0307 	rsb	r3, r3, #7
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	e00d      	b.n	80005fc <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b07      	cmp	r3, #7
 80005e4:	dd06      	ble.n	80005f4 <button_Scan+0x74>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b0b      	cmp	r3, #11
 80005ea:	dc03      	bgt.n	80005f4 <button_Scan+0x74>
			  button_index = i + 4;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	3304      	adds	r3, #4
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	e003      	b.n	80005fc <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f1c3 0317 	rsb	r3, r3, #23
 80005fa:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <button_Scan+0xcc>)
 80005fe:	881a      	ldrh	r2, [r3, #0]
 8000600:	897b      	ldrh	r3, [r7, #10]
 8000602:	4013      	ands	r3, r2
 8000604:	b29b      	uxth	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d005      	beq.n	8000616 <button_Scan+0x96>
 800060a:	4a12      	ldr	r2, [pc, #72]	; (8000654 <button_Scan+0xd4>)
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2100      	movs	r1, #0
 8000610:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000614:	e009      	b.n	800062a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000616:	4a0f      	ldr	r2, [pc, #60]	; (8000654 <button_Scan+0xd4>)
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800061e:	3301      	adds	r3, #1
 8000620:	b299      	uxth	r1, r3
 8000622:	4a0c      	ldr	r2, [pc, #48]	; (8000654 <button_Scan+0xd4>)
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800062a:	897b      	ldrh	r3, [r7, #10]
 800062c:	085b      	lsrs	r3, r3, #1
 800062e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3301      	adds	r3, #1
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2b0f      	cmp	r3, #15
 800063a:	ddbc      	ble.n	80005b6 <button_Scan+0x36>
	  }
}
 800063c:	bf00      	nop
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40020c00 	.word	0x40020c00
 800064c:	2000009c 	.word	0x2000009c
 8000650:	200001e8 	.word	0x200001e8
 8000654:	200000d8 	.word	0x200000d8

08000658 <ds3231_ReadTime>:
void ds3231_Write(uint8_t address, uint8_t value){
	uint8_t temp = DEC2BCD(value);
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
}

void ds3231_ReadTime(){
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 800065e:	230a      	movs	r3, #10
 8000660:	9302      	str	r3, [sp, #8]
 8000662:	2307      	movs	r3, #7
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	4b25      	ldr	r3, [pc, #148]	; (80006fc <ds3231_ReadTime+0xa4>)
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2301      	movs	r3, #1
 800066c:	2200      	movs	r2, #0
 800066e:	21d0      	movs	r1, #208	; 0xd0
 8000670:	4823      	ldr	r0, [pc, #140]	; (8000700 <ds3231_ReadTime+0xa8>)
 8000672:	f002 f8a7 	bl	80027c4 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8000676:	4b21      	ldr	r3, [pc, #132]	; (80006fc <ds3231_ReadTime+0xa4>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fb10 	bl	8001ca0 <BCD2DEC>
 8000680:	4603      	mov	r3, r0
 8000682:	461a      	mov	r2, r3
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <ds3231_ReadTime+0xac>)
 8000686:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <ds3231_ReadTime+0xa4>)
 800068a:	785b      	ldrb	r3, [r3, #1]
 800068c:	4618      	mov	r0, r3
 800068e:	f001 fb07 	bl	8001ca0 <BCD2DEC>
 8000692:	4603      	mov	r3, r0
 8000694:	461a      	mov	r2, r3
 8000696:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <ds3231_ReadTime+0xb0>)
 8000698:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 800069a:	4b18      	ldr	r3, [pc, #96]	; (80006fc <ds3231_ReadTime+0xa4>)
 800069c:	789b      	ldrb	r3, [r3, #2]
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fafe 	bl	8001ca0 <BCD2DEC>
 80006a4:	4603      	mov	r3, r0
 80006a6:	461a      	mov	r2, r3
 80006a8:	4b18      	ldr	r3, [pc, #96]	; (800070c <ds3231_ReadTime+0xb4>)
 80006aa:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <ds3231_ReadTime+0xa4>)
 80006ae:	78db      	ldrb	r3, [r3, #3]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 faf5 	bl	8001ca0 <BCD2DEC>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <ds3231_ReadTime+0xb8>)
 80006bc:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <ds3231_ReadTime+0xa4>)
 80006c0:	791b      	ldrb	r3, [r3, #4]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 faec 	bl	8001ca0 <BCD2DEC>
 80006c8:	4603      	mov	r3, r0
 80006ca:	461a      	mov	r2, r3
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <ds3231_ReadTime+0xbc>)
 80006ce:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <ds3231_ReadTime+0xa4>)
 80006d2:	795b      	ldrb	r3, [r3, #5]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 fae3 	bl	8001ca0 <BCD2DEC>
 80006da:	4603      	mov	r3, r0
 80006dc:	461a      	mov	r2, r3
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <ds3231_ReadTime+0xc0>)
 80006e0:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <ds3231_ReadTime+0xa4>)
 80006e4:	799b      	ldrb	r3, [r3, #6]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 fada 	bl	8001ca0 <BCD2DEC>
 80006ec:	4603      	mov	r3, r0
 80006ee:	461a      	mov	r2, r3
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <ds3231_ReadTime+0xc4>)
 80006f2:	701a      	strb	r2, [r3, #0]
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000100 	.word	0x20000100
 8000700:	20000158 	.word	0x20000158
 8000704:	200000f8 	.word	0x200000f8
 8000708:	200000fa 	.word	0x200000fa
 800070c:	200000fd 	.word	0x200000fd
 8000710:	200000fc 	.word	0x200000fc
 8000714:	200000fb 	.word	0x200000fb
 8000718:	200000fe 	.word	0x200000fe
 800071c:	200000f9 	.word	0x200000f9

08000720 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08e      	sub	sp, #56	; 0x38
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
 8000736:	615a      	str	r2, [r3, #20]
 8000738:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800073a:	463b      	mov	r3, r7
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
 8000748:	615a      	str	r2, [r3, #20]
 800074a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800074c:	4b2f      	ldr	r3, [pc, #188]	; (800080c <MX_FSMC_Init+0xec>)
 800074e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000752:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000754:	4b2d      	ldr	r3, [pc, #180]	; (800080c <MX_FSMC_Init+0xec>)
 8000756:	4a2e      	ldr	r2, [pc, #184]	; (8000810 <MX_FSMC_Init+0xf0>)
 8000758:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800075a:	4b2c      	ldr	r3, [pc, #176]	; (800080c <MX_FSMC_Init+0xec>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000760:	4b2a      	ldr	r3, [pc, #168]	; (800080c <MX_FSMC_Init+0xec>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000766:	4b29      	ldr	r3, [pc, #164]	; (800080c <MX_FSMC_Init+0xec>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800076c:	4b27      	ldr	r3, [pc, #156]	; (800080c <MX_FSMC_Init+0xec>)
 800076e:	2210      	movs	r2, #16
 8000770:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000772:	4b26      	ldr	r3, [pc, #152]	; (800080c <MX_FSMC_Init+0xec>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000778:	4b24      	ldr	r3, [pc, #144]	; (800080c <MX_FSMC_Init+0xec>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800077e:	4b23      	ldr	r3, [pc, #140]	; (800080c <MX_FSMC_Init+0xec>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000784:	4b21      	ldr	r3, [pc, #132]	; (800080c <MX_FSMC_Init+0xec>)
 8000786:	2200      	movs	r2, #0
 8000788:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800078a:	4b20      	ldr	r3, [pc, #128]	; (800080c <MX_FSMC_Init+0xec>)
 800078c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000790:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000792:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_FSMC_Init+0xec>)
 8000794:	2200      	movs	r2, #0
 8000796:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_FSMC_Init+0xec>)
 800079a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800079e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80007a0:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_FSMC_Init+0xec>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_FSMC_Init+0xec>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_FSMC_Init+0xec>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80007b2:	230f      	movs	r3, #15
 80007b4:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80007b6:	230f      	movs	r3, #15
 80007b8:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80007ba:	233c      	movs	r3, #60	; 0x3c
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80007c2:	2310      	movs	r3, #16
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80007c6:	2311      	movs	r3, #17
 80007c8:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80007ca:	2300      	movs	r3, #0
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80007ce:	2308      	movs	r3, #8
 80007d0:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80007d2:	230f      	movs	r3, #15
 80007d4:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80007d6:	2309      	movs	r3, #9
 80007d8:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80007de:	2310      	movs	r3, #16
 80007e0:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80007e2:	2311      	movs	r3, #17
 80007e4:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80007ea:	463a      	mov	r2, r7
 80007ec:	f107 031c 	add.w	r3, r7, #28
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <MX_FSMC_Init+0xec>)
 80007f4:	f003 feac 	bl	8004550 <HAL_SRAM_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80007fe:	f000 fe67 	bl	80014d0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000802:	bf00      	nop
 8000804:	3738      	adds	r7, #56	; 0x38
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000108 	.word	0x20000108
 8000810:	a0000104 	.word	0xa0000104

08000814 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <HAL_FSMC_MspInit+0x88>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d131      	bne.n	8000894 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000830:	4b1a      	ldr	r3, [pc, #104]	; (800089c <HAL_FSMC_MspInit+0x88>)
 8000832:	2201      	movs	r2, #1
 8000834:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <HAL_FSMC_MspInit+0x8c>)
 800083c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800083e:	4a18      	ldr	r2, [pc, #96]	; (80008a0 <HAL_FSMC_MspInit+0x8c>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6393      	str	r3, [r2, #56]	; 0x38
 8000846:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <HAL_FSMC_MspInit+0x8c>)
 8000848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000852:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000856:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000864:	230c      	movs	r3, #12
 8000866:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	4619      	mov	r1, r3
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <HAL_FSMC_MspInit+0x90>)
 800086e:	f001 fc95 	bl	800219c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000872:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000876:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000884:	230c      	movs	r3, #12
 8000886:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	4619      	mov	r1, r3
 800088c:	4806      	ldr	r0, [pc, #24]	; (80008a8 <HAL_FSMC_MspInit+0x94>)
 800088e:	f001 fc85 	bl	800219c <HAL_GPIO_Init>
 8000892:	e000      	b.n	8000896 <HAL_FSMC_MspInit+0x82>
    return;
 8000894:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000896:	3718      	adds	r7, #24
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000a0 	.word	0x200000a0
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40021000 	.word	0x40021000
 80008a8:	40020c00 	.word	0x40020c00

080008ac <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80008b4:	f7ff ffae 	bl	8000814 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08c      	sub	sp, #48	; 0x30
 80008c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
 80008da:	4b6f      	ldr	r3, [pc, #444]	; (8000a98 <MX_GPIO_Init+0x1d8>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a6e      	ldr	r2, [pc, #440]	; (8000a98 <MX_GPIO_Init+0x1d8>)
 80008e0:	f043 0310 	orr.w	r3, r3, #16
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b6c      	ldr	r3, [pc, #432]	; (8000a98 <MX_GPIO_Init+0x1d8>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0310 	and.w	r3, r3, #16
 80008ee:	61bb      	str	r3, [r7, #24]
 80008f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	4b68      	ldr	r3, [pc, #416]	; (8000a98 <MX_GPIO_Init+0x1d8>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a67      	ldr	r2, [pc, #412]	; (8000a98 <MX_GPIO_Init+0x1d8>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b65      	ldr	r3, [pc, #404]	; (8000a98 <MX_GPIO_Init+0x1d8>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	4b61      	ldr	r3, [pc, #388]	; (8000a98 <MX_GPIO_Init+0x1d8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a60      	ldr	r2, [pc, #384]	; (8000a98 <MX_GPIO_Init+0x1d8>)
 8000918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b5e      	ldr	r3, [pc, #376]	; (8000a98 <MX_GPIO_Init+0x1d8>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b5a      	ldr	r3, [pc, #360]	; (8000a98 <MX_GPIO_Init+0x1d8>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a59      	ldr	r2, [pc, #356]	; (8000a98 <MX_GPIO_Init+0x1d8>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b57      	ldr	r3, [pc, #348]	; (8000a98 <MX_GPIO_Init+0x1d8>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	4b53      	ldr	r3, [pc, #332]	; (8000a98 <MX_GPIO_Init+0x1d8>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a52      	ldr	r2, [pc, #328]	; (8000a98 <MX_GPIO_Init+0x1d8>)
 8000950:	f043 0308 	orr.w	r3, r3, #8
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b50      	ldr	r3, [pc, #320]	; (8000a98 <MX_GPIO_Init+0x1d8>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0308 	and.w	r3, r3, #8
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b4c      	ldr	r3, [pc, #304]	; (8000a98 <MX_GPIO_Init+0x1d8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a4b      	ldr	r2, [pc, #300]	; (8000a98 <MX_GPIO_Init+0x1d8>)
 800096c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b49      	ldr	r3, [pc, #292]	; (8000a98 <MX_GPIO_Init+0x1d8>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b45      	ldr	r3, [pc, #276]	; (8000a98 <MX_GPIO_Init+0x1d8>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a44      	ldr	r2, [pc, #272]	; (8000a98 <MX_GPIO_Init+0x1d8>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b42      	ldr	r3, [pc, #264]	; (8000a98 <MX_GPIO_Init+0x1d8>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2170      	movs	r1, #112	; 0x70
 800099e:	483f      	ldr	r0, [pc, #252]	; (8000a9c <MX_GPIO_Init+0x1dc>)
 80009a0:	f001 fd98 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009aa:	483d      	ldr	r0, [pc, #244]	; (8000aa0 <MX_GPIO_Init+0x1e0>)
 80009ac:	f001 fd92 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2140      	movs	r1, #64	; 0x40
 80009b4:	483b      	ldr	r0, [pc, #236]	; (8000aa4 <MX_GPIO_Init+0x1e4>)
 80009b6:	f001 fd8d 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c0:	4839      	ldr	r0, [pc, #228]	; (8000aa8 <MX_GPIO_Init+0x1e8>)
 80009c2:	f001 fd87 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2108      	movs	r1, #8
 80009ca:	4838      	ldr	r0, [pc, #224]	; (8000aac <MX_GPIO_Init+0x1ec>)
 80009cc:	f001 fd82 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80009d0:	2370      	movs	r3, #112	; 0x70
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	482d      	ldr	r0, [pc, #180]	; (8000a9c <MX_GPIO_Init+0x1dc>)
 80009e8:	f001 fbd8 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80009ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4826      	ldr	r0, [pc, #152]	; (8000aa0 <MX_GPIO_Init+0x1e0>)
 8000a06:	f001 fbc9 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000a0a:	23c0      	movs	r3, #192	; 0xc0
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4822      	ldr	r0, [pc, #136]	; (8000aa8 <MX_GPIO_Init+0x1e8>)
 8000a1e:	f001 fbbd 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000a22:	2330      	movs	r3, #48	; 0x30
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	481a      	ldr	r0, [pc, #104]	; (8000aa0 <MX_GPIO_Init+0x1e0>)
 8000a36:	f001 fbb1 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000a3a:	2340      	movs	r3, #64	; 0x40
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4814      	ldr	r0, [pc, #80]	; (8000aa4 <MX_GPIO_Init+0x1e4>)
 8000a52:	f001 fba3 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000a56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480e      	ldr	r0, [pc, #56]	; (8000aa8 <MX_GPIO_Init+0x1e8>)
 8000a70:	f001 fb94 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000a74:	2308      	movs	r3, #8
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4808      	ldr	r0, [pc, #32]	; (8000aac <MX_GPIO_Init+0x1ec>)
 8000a8c:	f001 fb86 	bl	800219c <HAL_GPIO_Init>

}
 8000a90:	bf00      	nop
 8000a92:	3730      	adds	r7, #48	; 0x30
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	40021800 	.word	0x40021800
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	40020c00 	.word	0x40020c00

08000ab0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ab6:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <MX_I2C1_Init+0x54>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000abc:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <MX_I2C1_Init+0x58>)
 8000abe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ace:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ad2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000aee:	f001 fd25 	bl	800253c <HAL_I2C_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000af8:	f000 fcea 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000158 	.word	0x20000158
 8000b04:	40005400 	.word	0x40005400
 8000b08:	000186a0 	.word	0x000186a0

08000b0c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <HAL_I2C_MspInit+0x84>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d12b      	bne.n	8000b86 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <HAL_I2C_MspInit+0x88>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <HAL_I2C_MspInit+0x88>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_I2C_MspInit+0x88>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b4a:	23c0      	movs	r3, #192	; 0xc0
 8000b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b4e:	2312      	movs	r3, #18
 8000b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b56:	2303      	movs	r3, #3
 8000b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	480c      	ldr	r0, [pc, #48]	; (8000b98 <HAL_I2C_MspInit+0x8c>)
 8000b66:	f001 fb19 	bl	800219c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <HAL_I2C_MspInit+0x88>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <HAL_I2C_MspInit+0x88>)
 8000b74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_I2C_MspInit+0x88>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40005400 	.word	0x40005400
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020400 	.word	0x40020400

08000b9c <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000ba6:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <LCD_WR_REG+0x1c>)
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	8013      	strh	r3, [r2, #0]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	600ffffe 	.word	0x600ffffe

08000bbc <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000bc6:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <LCD_WR_DATA+0x1c>)
 8000bc8:	88fb      	ldrh	r3, [r7, #6]
 8000bca:	8053      	strh	r3, [r2, #2]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	600ffffe 	.word	0x600ffffe

08000bdc <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <LCD_RD_DATA+0x20>)
 8000be4:	885b      	ldrh	r3, [r3, #2]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	b29b      	uxth	r3, r3
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	600ffffe 	.word	0x600ffffe

08000c00 <mypow>:
		}
	}
}

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	460a      	mov	r2, r1
 8000c0a:	71fb      	strb	r3, [r7, #7]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000c10:	2301      	movs	r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000c14:	e004      	b.n	8000c20 <mypow+0x20>
 8000c16:	79fa      	ldrb	r2, [r7, #7]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	fb02 f303 	mul.w	r3, r2, r3
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	79bb      	ldrb	r3, [r7, #6]
 8000c22:	1e5a      	subs	r2, r3, #1
 8000c24:	71ba      	strb	r2, [r7, #6]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1f5      	bne.n	8000c16 <mypow+0x16>
	return result;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	091b      	lsrs	r3, r3, #4
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	f003 0303 	and.w	r3, r3, #3
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d007      	beq.n	8000c62 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <lcd_SetDir+0x44>)
 8000c54:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c58:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <lcd_SetDir+0x44>)
 8000c5c:	22f0      	movs	r2, #240	; 0xf0
 8000c5e:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8000c60:	e006      	b.n	8000c70 <lcd_SetDir+0x38>
		lcddev.width=240;
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <lcd_SetDir+0x44>)
 8000c64:	22f0      	movs	r2, #240	; 0xf0
 8000c66:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <lcd_SetDir+0x44>)
 8000c6a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c6e:	805a      	strh	r2, [r3, #2]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	200001ac 	.word	0x200001ac

08000c80 <lcd_init>:


void lcd_init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c8a:	48aa      	ldr	r0, [pc, #680]	; (8000f34 <lcd_init+0x2b4>)
 8000c8c:	f001 fc22 	bl	80024d4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000c90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c94:	f001 f8ba 	bl	8001e0c <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c9e:	48a5      	ldr	r0, [pc, #660]	; (8000f34 <lcd_init+0x2b4>)
 8000ca0:	f001 fc18 	bl	80024d4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000ca4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ca8:	f001 f8b0 	bl	8001e0c <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff ffc3 	bl	8000c38 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8000cb2:	20d3      	movs	r0, #211	; 0xd3
 8000cb4:	f7ff ff72 	bl	8000b9c <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8000cb8:	f7ff ff90 	bl	8000bdc <LCD_RD_DATA>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b9d      	ldr	r3, [pc, #628]	; (8000f38 <lcd_init+0x2b8>)
 8000cc2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000cc4:	f7ff ff8a 	bl	8000bdc <LCD_RD_DATA>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	461a      	mov	r2, r3
 8000ccc:	4b9a      	ldr	r3, [pc, #616]	; (8000f38 <lcd_init+0x2b8>)
 8000cce:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000cd0:	f7ff ff84 	bl	8000bdc <LCD_RD_DATA>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4b97      	ldr	r3, [pc, #604]	; (8000f38 <lcd_init+0x2b8>)
 8000cda:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8000cdc:	4b96      	ldr	r3, [pc, #600]	; (8000f38 <lcd_init+0x2b8>)
 8000cde:	889b      	ldrh	r3, [r3, #4]
 8000ce0:	021b      	lsls	r3, r3, #8
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	4b94      	ldr	r3, [pc, #592]	; (8000f38 <lcd_init+0x2b8>)
 8000ce6:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8000ce8:	f7ff ff78 	bl	8000bdc <LCD_RD_DATA>
 8000cec:	4603      	mov	r3, r0
 8000cee:	461a      	mov	r2, r3
 8000cf0:	4b91      	ldr	r3, [pc, #580]	; (8000f38 <lcd_init+0x2b8>)
 8000cf2:	889b      	ldrh	r3, [r3, #4]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	4b8f      	ldr	r3, [pc, #572]	; (8000f38 <lcd_init+0x2b8>)
 8000cfa:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000cfc:	20cf      	movs	r0, #207	; 0xcf
 8000cfe:	f7ff ff4d 	bl	8000b9c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff ff5a 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000d08:	20c1      	movs	r0, #193	; 0xc1
 8000d0a:	f7ff ff57 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000d0e:	2030      	movs	r0, #48	; 0x30
 8000d10:	f7ff ff54 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000d14:	20ed      	movs	r0, #237	; 0xed
 8000d16:	f7ff ff41 	bl	8000b9c <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000d1a:	2064      	movs	r0, #100	; 0x64
 8000d1c:	f7ff ff4e 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f7ff ff4b 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000d26:	2012      	movs	r0, #18
 8000d28:	f7ff ff48 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000d2c:	2081      	movs	r0, #129	; 0x81
 8000d2e:	f7ff ff45 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000d32:	20e8      	movs	r0, #232	; 0xe8
 8000d34:	f7ff ff32 	bl	8000b9c <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000d38:	2085      	movs	r0, #133	; 0x85
 8000d3a:	f7ff ff3f 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000d3e:	2010      	movs	r0, #16
 8000d40:	f7ff ff3c 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000d44:	207a      	movs	r0, #122	; 0x7a
 8000d46:	f7ff ff39 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000d4a:	20cb      	movs	r0, #203	; 0xcb
 8000d4c:	f7ff ff26 	bl	8000b9c <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000d50:	2039      	movs	r0, #57	; 0x39
 8000d52:	f7ff ff33 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000d56:	202c      	movs	r0, #44	; 0x2c
 8000d58:	f7ff ff30 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f7ff ff2d 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000d62:	2034      	movs	r0, #52	; 0x34
 8000d64:	f7ff ff2a 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000d68:	2002      	movs	r0, #2
 8000d6a:	f7ff ff27 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8000d6e:	20f7      	movs	r0, #247	; 0xf7
 8000d70:	f7ff ff14 	bl	8000b9c <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8000d74:	2020      	movs	r0, #32
 8000d76:	f7ff ff21 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8000d7a:	20ea      	movs	r0, #234	; 0xea
 8000d7c:	f7ff ff0e 	bl	8000b9c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000d80:	2000      	movs	r0, #0
 8000d82:	f7ff ff1b 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000d86:	2000      	movs	r0, #0
 8000d88:	f7ff ff18 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8000d8c:	20c0      	movs	r0, #192	; 0xc0
 8000d8e:	f7ff ff05 	bl	8000b9c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8000d92:	201b      	movs	r0, #27
 8000d94:	f7ff ff12 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8000d98:	20c1      	movs	r0, #193	; 0xc1
 8000d9a:	f7ff feff 	bl	8000b9c <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f7ff ff0c 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8000da4:	20c5      	movs	r0, #197	; 0xc5
 8000da6:	f7ff fef9 	bl	8000b9c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8000daa:	2030      	movs	r0, #48	; 0x30
 8000dac:	f7ff ff06 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8000db0:	2030      	movs	r0, #48	; 0x30
 8000db2:	f7ff ff03 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8000db6:	20c7      	movs	r0, #199	; 0xc7
 8000db8:	f7ff fef0 	bl	8000b9c <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8000dbc:	20b7      	movs	r0, #183	; 0xb7
 8000dbe:	f7ff fefd 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8000dc2:	2036      	movs	r0, #54	; 0x36
 8000dc4:	f7ff feea 	bl	8000b9c <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8000dc8:	2008      	movs	r0, #8
 8000dca:	f7ff fef7 	bl	8000bbc <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8000dce:	203a      	movs	r0, #58	; 0x3a
 8000dd0:	f7ff fee4 	bl	8000b9c <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8000dd4:	2055      	movs	r0, #85	; 0x55
 8000dd6:	f7ff fef1 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8000dda:	20b1      	movs	r0, #177	; 0xb1
 8000ddc:	f7ff fede 	bl	8000b9c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000de0:	2000      	movs	r0, #0
 8000de2:	f7ff feeb 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8000de6:	201a      	movs	r0, #26
 8000de8:	f7ff fee8 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8000dec:	20b6      	movs	r0, #182	; 0xb6
 8000dee:	f7ff fed5 	bl	8000b9c <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8000df2:	200a      	movs	r0, #10
 8000df4:	f7ff fee2 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8000df8:	20a2      	movs	r0, #162	; 0xa2
 8000dfa:	f7ff fedf 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8000dfe:	20f2      	movs	r0, #242	; 0xf2
 8000e00:	f7ff fecc 	bl	8000b9c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000e04:	2000      	movs	r0, #0
 8000e06:	f7ff fed9 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8000e0a:	2026      	movs	r0, #38	; 0x26
 8000e0c:	f7ff fec6 	bl	8000b9c <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8000e10:	2001      	movs	r0, #1
 8000e12:	f7ff fed3 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8000e16:	20e0      	movs	r0, #224	; 0xe0
 8000e18:	f7ff fec0 	bl	8000b9c <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8000e1c:	200f      	movs	r0, #15
 8000e1e:	f7ff fecd 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8000e22:	202a      	movs	r0, #42	; 0x2a
 8000e24:	f7ff feca 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8000e28:	2028      	movs	r0, #40	; 0x28
 8000e2a:	f7ff fec7 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000e2e:	2008      	movs	r0, #8
 8000e30:	f7ff fec4 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8000e34:	200e      	movs	r0, #14
 8000e36:	f7ff fec1 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000e3a:	2008      	movs	r0, #8
 8000e3c:	f7ff febe 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8000e40:	2054      	movs	r0, #84	; 0x54
 8000e42:	f7ff febb 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8000e46:	20a9      	movs	r0, #169	; 0xa9
 8000e48:	f7ff feb8 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8000e4c:	2043      	movs	r0, #67	; 0x43
 8000e4e:	f7ff feb5 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8000e52:	200a      	movs	r0, #10
 8000e54:	f7ff feb2 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000e58:	200f      	movs	r0, #15
 8000e5a:	f7ff feaf 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f7ff feac 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000e64:	2000      	movs	r0, #0
 8000e66:	f7ff fea9 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f7ff fea6 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000e70:	2000      	movs	r0, #0
 8000e72:	f7ff fea3 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8000e76:	20e1      	movs	r0, #225	; 0xe1
 8000e78:	f7ff fe90 	bl	8000b9c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f7ff fe9d 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8000e82:	2015      	movs	r0, #21
 8000e84:	f7ff fe9a 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8000e88:	2017      	movs	r0, #23
 8000e8a:	f7ff fe97 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8000e8e:	2007      	movs	r0, #7
 8000e90:	f7ff fe94 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8000e94:	2011      	movs	r0, #17
 8000e96:	f7ff fe91 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8000e9a:	2006      	movs	r0, #6
 8000e9c:	f7ff fe8e 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8000ea0:	202b      	movs	r0, #43	; 0x2b
 8000ea2:	f7ff fe8b 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8000ea6:	2056      	movs	r0, #86	; 0x56
 8000ea8:	f7ff fe88 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8000eac:	203c      	movs	r0, #60	; 0x3c
 8000eae:	f7ff fe85 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8000eb2:	2005      	movs	r0, #5
 8000eb4:	f7ff fe82 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000eb8:	2010      	movs	r0, #16
 8000eba:	f7ff fe7f 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000ebe:	200f      	movs	r0, #15
 8000ec0:	f7ff fe7c 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000ec4:	203f      	movs	r0, #63	; 0x3f
 8000ec6:	f7ff fe79 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000eca:	203f      	movs	r0, #63	; 0x3f
 8000ecc:	f7ff fe76 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000ed0:	200f      	movs	r0, #15
 8000ed2:	f7ff fe73 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8000ed6:	202b      	movs	r0, #43	; 0x2b
 8000ed8:	f7ff fe60 	bl	8000b9c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000edc:	2000      	movs	r0, #0
 8000ede:	f7ff fe6d 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f7ff fe6a 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f7ff fe67 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8000eee:	203f      	movs	r0, #63	; 0x3f
 8000ef0:	f7ff fe64 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8000ef4:	202a      	movs	r0, #42	; 0x2a
 8000ef6:	f7ff fe51 	bl	8000b9c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f7ff fe5e 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000f00:	2000      	movs	r0, #0
 8000f02:	f7ff fe5b 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff fe58 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8000f0c:	20ef      	movs	r0, #239	; 0xef
 8000f0e:	f7ff fe55 	bl	8000bbc <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8000f12:	2011      	movs	r0, #17
 8000f14:	f7ff fe42 	bl	8000b9c <LCD_WR_REG>
	HAL_Delay(120);
 8000f18:	2078      	movs	r0, #120	; 0x78
 8000f1a:	f000 ff77 	bl	8001e0c <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8000f1e:	2029      	movs	r0, #41	; 0x29
 8000f20:	f7ff fe3c 	bl	8000b9c <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8000f24:	2201      	movs	r2, #1
 8000f26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f2a:	4804      	ldr	r0, [pc, #16]	; (8000f3c <lcd_init+0x2bc>)
 8000f2c:	f001 fad2 	bl	80024d4 <HAL_GPIO_WritePin>
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40020800 	.word	0x40020800
 8000f38:	200001ac 	.word	0x200001ac
 8000f3c:	40020000 	.word	0x40020000

08000f40 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2140      	movs	r1, #64	; 0x40
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <led7_init+0x14>)
 8000f4a:	f001 fac3 	bl	80024d4 <HAL_GPIO_WritePin>
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40021800 	.word	0x40021800

08000f58 <led7_Scan>:

void led7_Scan(){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff; // reset first 4 bit
 8000f5c:	4b3f      	ldr	r3, [pc, #252]	; (800105c <led7_Scan+0x104>)
 8000f5e:	881b      	ldrh	r3, [r3, #0]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	4b3d      	ldr	r3, [pc, #244]	; (800105c <led7_Scan+0x104>)
 8000f66:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8000f68:	4b3d      	ldr	r3, [pc, #244]	; (8001060 <led7_Scan+0x108>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a3d      	ldr	r2, [pc, #244]	; (8001064 <led7_Scan+0x10c>)
 8000f6e:	5cd3      	ldrb	r3, [r2, r3]
 8000f70:	021b      	lsls	r3, r3, #8
 8000f72:	b21a      	sxth	r2, r3
 8000f74:	4b39      	ldr	r3, [pc, #228]	; (800105c <led7_Scan+0x104>)
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	4b36      	ldr	r3, [pc, #216]	; (800105c <led7_Scan+0x104>)
 8000f82:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8000f84:	4b36      	ldr	r3, [pc, #216]	; (8001060 <led7_Scan+0x108>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d847      	bhi.n	800101c <led7_Scan+0xc4>
 8000f8c:	a201      	add	r2, pc, #4	; (adr r2, 8000f94 <led7_Scan+0x3c>)
 8000f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f92:	bf00      	nop
 8000f94:	08000fa5 	.word	0x08000fa5
 8000f98:	08000fc3 	.word	0x08000fc3
 8000f9c:	08000fe1 	.word	0x08000fe1
 8000fa0:	08000fff 	.word	0x08000fff
	case 0:
		spi_buffer |= 0x00b0;
 8000fa4:	4b2d      	ldr	r3, [pc, #180]	; (800105c <led7_Scan+0x104>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	4b2b      	ldr	r3, [pc, #172]	; (800105c <led7_Scan+0x104>)
 8000fb0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8000fb2:	4b2a      	ldr	r3, [pc, #168]	; (800105c <led7_Scan+0x104>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	4b27      	ldr	r3, [pc, #156]	; (800105c <led7_Scan+0x104>)
 8000fbe:	801a      	strh	r2, [r3, #0]
		break;
 8000fc0:	e02d      	b.n	800101e <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8000fc2:	4b26      	ldr	r3, [pc, #152]	; (800105c <led7_Scan+0x104>)
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	4b23      	ldr	r3, [pc, #140]	; (800105c <led7_Scan+0x104>)
 8000fce:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8000fd0:	4b22      	ldr	r3, [pc, #136]	; (800105c <led7_Scan+0x104>)
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	f023 0320 	bic.w	r3, r3, #32
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	4b20      	ldr	r3, [pc, #128]	; (800105c <led7_Scan+0x104>)
 8000fdc:	801a      	strh	r2, [r3, #0]
		break;
 8000fde:	e01e      	b.n	800101e <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8000fe0:	4b1e      	ldr	r3, [pc, #120]	; (800105c <led7_Scan+0x104>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	4b1c      	ldr	r3, [pc, #112]	; (800105c <led7_Scan+0x104>)
 8000fec:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8000fee:	4b1b      	ldr	r3, [pc, #108]	; (800105c <led7_Scan+0x104>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	f023 0310 	bic.w	r3, r3, #16
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <led7_Scan+0x104>)
 8000ffa:	801a      	strh	r2, [r3, #0]
		break;
 8000ffc:	e00f      	b.n	800101e <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <led7_Scan+0x104>)
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001006:	b29a      	uxth	r2, r3
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <led7_Scan+0x104>)
 800100a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <led7_Scan+0x104>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001014:	b29a      	uxth	r2, r3
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <led7_Scan+0x104>)
 8001018:	801a      	strh	r2, [r3, #0]
		break;
 800101a:	e000      	b.n	800101e <led7_Scan+0xc6>
	default:
		break;
 800101c:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <led7_Scan+0x108>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	425a      	negs	r2, r3
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	f002 0203 	and.w	r2, r2, #3
 800102e:	bf58      	it	pl
 8001030:	4253      	negpl	r3, r2
 8001032:	4a0b      	ldr	r2, [pc, #44]	; (8001060 <led7_Scan+0x108>)
 8001034:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2140      	movs	r1, #64	; 0x40
 800103a:	480b      	ldr	r0, [pc, #44]	; (8001068 <led7_Scan+0x110>)
 800103c:	f001 fa4a 	bl	80024d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001040:	2301      	movs	r3, #1
 8001042:	2202      	movs	r2, #2
 8001044:	4905      	ldr	r1, [pc, #20]	; (800105c <led7_Scan+0x104>)
 8001046:	4809      	ldr	r0, [pc, #36]	; (800106c <led7_Scan+0x114>)
 8001048:	f002 fd63 	bl	8003b12 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800104c:	2201      	movs	r2, #1
 800104e:	2140      	movs	r1, #64	; 0x40
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <led7_Scan+0x110>)
 8001052:	f001 fa3f 	bl	80024d4 <HAL_GPIO_WritePin>
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000000e 	.word	0x2000000e
 8001060:	200000a4 	.word	0x200000a4
 8001064:	20000000 	.word	0x20000000
 8001068:	40021800 	.word	0x40021800
 800106c:	200001e8 	.word	0x200001e8

08001070 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	4613      	mov	r3, r2
 800107c:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2b00      	cmp	r3, #0
 8001082:	db0e      	blt.n	80010a2 <led7_SetDigit+0x32>
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2b09      	cmp	r3, #9
 8001088:	dc0b      	bgt.n	80010a2 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 800108a:	4a09      	ldr	r2, [pc, #36]	; (80010b0 <led7_SetDigit+0x40>)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	781a      	ldrb	r2, [r3, #0]
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	b2d9      	uxtb	r1, r3
 8001098:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <led7_SetDigit+0x44>)
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	4413      	add	r3, r2
 800109e:	460a      	mov	r2, r1
 80010a0:	701a      	strb	r2, [r3, #0]
	}
}
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000004 	.word	0x20000004
 80010b4:	20000000 	.word	0x20000000

080010b8 <led7_SetColon>:

void led7_SetColon(uint8_t status){
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d107      	bne.n	80010d8 <led7_SetColon+0x20>
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <led7_SetColon+0x3c>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	f023 0308 	bic.w	r3, r3, #8
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <led7_SetColon+0x3c>)
 80010d4:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 80010d6:	e006      	b.n	80010e6 <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <led7_SetColon+0x3c>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	f043 0308 	orr.w	r3, r3, #8
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <led7_SetColon+0x3c>)
 80010e4:	801a      	strh	r2, [r3, #0]
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	2000000e 	.word	0x2000000e

080010f8 <led_On>:

void led7_toggleColon(){
	spi_buffer ^= (1 << 3);
}
void led_On(uint8_t index){
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	if(index >= 6 && index <=8){
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b05      	cmp	r3, #5
 8001106:	d910      	bls.n	800112a <led_On+0x32>
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	2b08      	cmp	r3, #8
 800110c:	d80d      	bhi.n	800112a <led_On+0x32>
		spi_buffer |= 1 << (index-6);
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	3b06      	subs	r3, #6
 8001112:	2201      	movs	r2, #1
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b07      	ldr	r3, [pc, #28]	; (8001138 <led_On+0x40>)
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b21b      	sxth	r3, r3
 8001124:	b29a      	uxth	r2, r3
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <led_On+0x40>)
 8001128:	801a      	strh	r2, [r3, #0]
	}
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	2000000e 	.word	0x2000000e

0800113c <led_Off>:

void led_Off(uint8_t index){
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
	if(index >= 6 && index <=8){
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b05      	cmp	r3, #5
 800114a:	d912      	bls.n	8001172 <led_Off+0x36>
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2b08      	cmp	r3, #8
 8001150:	d80f      	bhi.n	8001172 <led_Off+0x36>
		spi_buffer &= ~(1 << (index-6));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	3b06      	subs	r3, #6
 8001156:	2201      	movs	r2, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	b21b      	sxth	r3, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <led_Off+0x44>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	b21b      	sxth	r3, r3
 8001168:	4013      	ands	r3, r2
 800116a:	b21b      	sxth	r3, r3
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <led_Off+0x44>)
 8001170:	801a      	strh	r2, [r3, #0]
	}
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	2000000e 	.word	0x2000000e

08001184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b08b      	sub	sp, #44	; 0x2c
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118a:	f000 fdcd 	bl	8001d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800118e:	f000 f8c7 	bl	8001320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001192:	f7ff fb95 	bl	80008c0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001196:	f000 fbfb 	bl	8001990 <MX_TIM2_Init>
  MX_SPI1_Init();
 800119a:	f000 facd 	bl	8001738 <MX_SPI1_Init>
  MX_FSMC_Init();
 800119e:	f7ff fabf 	bl	8000720 <MX_FSMC_Init>
  MX_I2C1_Init();
 80011a2:	f7ff fc85 	bl	8000ab0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80011a6:	f000 fd01 	bl	8001bac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80011aa:	f000 f923 	bl	80013f4 <system_init>

  int state_y0_led = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  int state_y1_led = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	623b      	str	r3, [r7, #32]
  int state_colon = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  int nums_7seg[4] = {0, 1, 2, 3};
 80011ba:	4b52      	ldr	r3, [pc, #328]	; (8001304 <main+0x180>)
 80011bc:	1d3c      	adds	r4, r7, #4
 80011be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int shift_position = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (flag_timer2){
 80011c8:	4b4f      	ldr	r3, [pc, #316]	; (8001308 <main+0x184>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d01a      	beq.n	8001206 <main+0x82>
		  setTimer2(1000);
 80011d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d4:	f000 f98c 	bl	80014f0 <setTimer2>
		  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80011d8:	2110      	movs	r1, #16
 80011da:	484c      	ldr	r0, [pc, #304]	; (800130c <main+0x188>)
 80011dc:	f001 f993 	bl	8002506 <HAL_GPIO_TogglePin>
 		  led7_SetColon(state_colon);
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff67 	bl	80010b8 <led7_SetColon>
 		  if (state_colon ==  1){
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d105      	bne.n	80011fc <main+0x78>
 			  state_colon = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
 			  led_Off(6);
 80011f4:	2006      	movs	r0, #6
 80011f6:	f7ff ffa1 	bl	800113c <led_Off>
 80011fa:	e004      	b.n	8001206 <main+0x82>
 		  }
 		  else {
 			  state_colon = 1;
 80011fc:	2301      	movs	r3, #1
 80011fe:	61fb      	str	r3, [r7, #28]
 			  led_On(6);
 8001200:	2006      	movs	r0, #6
 8001202:	f7ff ff79 	bl	80010f8 <led_On>
 		  }
	  }
	  if (flag_timer3){
 8001206:	4b42      	ldr	r3, [pc, #264]	; (8001310 <main+0x18c>)
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d01c      	beq.n	8001248 <main+0xc4>
		  if (state_y0_led == 0 ){
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	2b00      	cmp	r3, #0
 8001212:	d10b      	bne.n	800122c <main+0xa8>
			  setTimer3(2000);
 8001214:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001218:	f000 f986 	bl	8001528 <setTimer3>
			  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 1);
 800121c:	2201      	movs	r2, #1
 800121e:	2120      	movs	r1, #32
 8001220:	483a      	ldr	r0, [pc, #232]	; (800130c <main+0x188>)
 8001222:	f001 f957 	bl	80024d4 <HAL_GPIO_WritePin>
			  state_y0_led = 1;
 8001226:	2301      	movs	r3, #1
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
 800122a:	e00d      	b.n	8001248 <main+0xc4>
		  }
		  else if ( state_y0_led == 1){
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	2b01      	cmp	r3, #1
 8001230:	d10a      	bne.n	8001248 <main+0xc4>
			  setTimer3(4000);
 8001232:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001236:	f000 f977 	bl	8001528 <setTimer3>
			  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2120      	movs	r1, #32
 800123e:	4833      	ldr	r0, [pc, #204]	; (800130c <main+0x188>)
 8001240:	f001 f948 	bl	80024d4 <HAL_GPIO_WritePin>
			  state_y0_led = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
		  }
	  }
	  if (flag_timer4){
 8001248:	4b32      	ldr	r3, [pc, #200]	; (8001314 <main+0x190>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d01c      	beq.n	800128a <main+0x106>
		  if (state_y1_led == 0){
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10b      	bne.n	800126e <main+0xea>
			  setTimer4(5000);
 8001256:	f241 3088 	movw	r0, #5000	; 0x1388
 800125a:	f000 f981 	bl	8001560 <setTimer4>
			  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 1);
 800125e:	2201      	movs	r2, #1
 8001260:	2140      	movs	r1, #64	; 0x40
 8001262:	482a      	ldr	r0, [pc, #168]	; (800130c <main+0x188>)
 8001264:	f001 f936 	bl	80024d4 <HAL_GPIO_WritePin>
			  state_y1_led = 1;
 8001268:	2301      	movs	r3, #1
 800126a:	623b      	str	r3, [r7, #32]
 800126c:	e00d      	b.n	800128a <main+0x106>
		  }
		  else if (state_y1_led == 1){
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d10a      	bne.n	800128a <main+0x106>
			  setTimer4(1000);
 8001274:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001278:	f000 f972 	bl	8001560 <setTimer4>
			  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2140      	movs	r1, #64	; 0x40
 8001280:	4822      	ldr	r0, [pc, #136]	; (800130c <main+0x188>)
 8001282:	f001 f927 	bl	80024d4 <HAL_GPIO_WritePin>
			  state_y1_led = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
		  }
	  }
	  if (flag_timer_second){
 800128a:	4b23      	ldr	r3, [pc, #140]	; (8001318 <main+0x194>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d02d      	beq.n	80012ee <main+0x16a>
	 		  setTimerSecond(1000);
 8001292:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001296:	f000 f99b 	bl	80015d0 <setTimerSecond>
	 		  for (int i = 0; i < 4; i++){
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	e017      	b.n	80012d0 <main+0x14c>
	 			  led7_SetDigit(nums_7seg[(shift_position + i) % 4], i, 0);
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	4413      	add	r3, r2
 80012a6:	425a      	negs	r2, r3
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	f002 0203 	and.w	r2, r2, #3
 80012b0:	bf58      	it	pl
 80012b2:	4253      	negpl	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012ba:	4413      	add	r3, r2
 80012bc:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80012c0:	2200      	movs	r2, #0
 80012c2:	6979      	ldr	r1, [r7, #20]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fed3 	bl	8001070 <led7_SetDigit>
	 		  for (int i = 0; i < 4; i++){
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	3301      	adds	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	dde4      	ble.n	80012a0 <main+0x11c>
	 		  }
	 		  shift_position = (shift_position + 1) % 4;
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	3301      	adds	r3, #1
 80012da:	425a      	negs	r2, r3
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	f002 0203 	and.w	r2, r2, #3
 80012e4:	bf58      	it	pl
 80012e6:	4253      	negpl	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
	 		 test_Uart();
 80012ea:	f000 f8b3 	bl	8001454 <test_Uart>
	 	  }

	  if (flag_timer7seg){
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <main+0x198>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f43f af68 	beq.w	80011c8 <main+0x44>
		  setTimer7seg(SCAN_TIME);
 80012f8:	200a      	movs	r0, #10
 80012fa:	f000 f94d 	bl	8001598 <setTimer7seg>
		  ds3231_ReadTime();
 80012fe:	f7ff f9ab 	bl	8000658 <ds3231_ReadTime>
	  if (flag_timer2){
 8001302:	e761      	b.n	80011c8 <main+0x44>
 8001304:	080068e4 	.word	0x080068e4
 8001308:	200000a8 	.word	0x200000a8
 800130c:	40021000 	.word	0x40021000
 8001310:	200000ae 	.word	0x200000ae
 8001314:	200000b4 	.word	0x200000b4
 8001318:	200000c0 	.word	0x200000c0
 800131c:	200000ba 	.word	0x200000ba

08001320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b094      	sub	sp, #80	; 0x50
 8001324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001326:	f107 0320 	add.w	r3, r7, #32
 800132a:	2230      	movs	r2, #48	; 0x30
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f004 fe96 	bl	8006060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001334:	f107 030c 	add.w	r3, r7, #12
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	4b28      	ldr	r3, [pc, #160]	; (80013ec <SystemClock_Config+0xcc>)
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	4a27      	ldr	r2, [pc, #156]	; (80013ec <SystemClock_Config+0xcc>)
 800134e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001352:	6413      	str	r3, [r2, #64]	; 0x40
 8001354:	4b25      	ldr	r3, [pc, #148]	; (80013ec <SystemClock_Config+0xcc>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001360:	2300      	movs	r3, #0
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <SystemClock_Config+0xd0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a21      	ldr	r2, [pc, #132]	; (80013f0 <SystemClock_Config+0xd0>)
 800136a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <SystemClock_Config+0xd0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800137c:	2302      	movs	r3, #2
 800137e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001380:	2301      	movs	r3, #1
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001384:	2310      	movs	r3, #16
 8001386:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001388:	2302      	movs	r3, #2
 800138a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800138c:	2300      	movs	r3, #0
 800138e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001390:	2308      	movs	r3, #8
 8001392:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001394:	23a8      	movs	r3, #168	; 0xa8
 8001396:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001398:	2302      	movs	r3, #2
 800139a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800139c:	2304      	movs	r3, #4
 800139e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a0:	f107 0320 	add.w	r3, r7, #32
 80013a4:	4618      	mov	r0, r3
 80013a6:	f001 feb7 	bl	8003118 <HAL_RCC_OscConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013b0:	f000 f88e 	bl	80014d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b4:	230f      	movs	r3, #15
 80013b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b8:	2302      	movs	r3, #2
 80013ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80013c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	2105      	movs	r1, #5
 80013d2:	4618      	mov	r0, r3
 80013d4:	f002 f918 	bl	8003608 <HAL_RCC_ClockConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013de:	f000 f877 	bl	80014d0 <Error_Handler>
  }
}
 80013e2:	bf00      	nop
 80013e4:	3750      	adds	r7, #80	; 0x50
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40007000 	.word	0x40007000

080013f4 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2120      	movs	r1, #32
 80013fc:	4814      	ldr	r0, [pc, #80]	; (8001450 <system_init+0x5c>)
 80013fe:	f001 f869 	bl	80024d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2140      	movs	r1, #64	; 0x40
 8001406:	4812      	ldr	r0, [pc, #72]	; (8001450 <system_init+0x5c>)
 8001408:	f001 f864 	bl	80024d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 800140c:	2200      	movs	r2, #0
 800140e:	2110      	movs	r1, #16
 8001410:	480f      	ldr	r0, [pc, #60]	; (8001450 <system_init+0x5c>)
 8001412:	f001 f85f 	bl	80024d4 <HAL_GPIO_WritePin>
	  timer_init();
 8001416:	f000 f861 	bl	80014dc <timer_init>
	  led7_init();
 800141a:	f7ff fd91 	bl	8000f40 <led7_init>
	  button_init();
 800141e:	f7ff f8a3 	bl	8000568 <button_init>
	  lcd_init();
 8001422:	f7ff fc2d 	bl	8000c80 <lcd_init>
	  uart_init_rs232();
 8001426:	f000 fb25 	bl	8001a74 <uart_init_rs232>
	  setTimer2(10);
 800142a:	200a      	movs	r0, #10
 800142c:	f000 f860 	bl	80014f0 <setTimer2>
	  setTimer3(10);
 8001430:	200a      	movs	r0, #10
 8001432:	f000 f879 	bl	8001528 <setTimer3>
	  setTimer4(10);
 8001436:	200a      	movs	r0, #10
 8001438:	f000 f892 	bl	8001560 <setTimer4>
	  setTimer7seg(10);
 800143c:	200a      	movs	r0, #10
 800143e:	f000 f8ab 	bl	8001598 <setTimer7seg>
	  setTimerSecond(10);
 8001442:	200a      	movs	r0, #10
 8001444:	f000 f8c4 	bl	80015d0 <setTimerSecond>
	  settime_7seg();
 8001448:	f000 f82a 	bl	80014a0 <settime_7seg>
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40021000 	.word	0x40021000

08001454 <test_Uart>:
			led7_SetDigit(i%10, 3, 0);
		}
	}
}

void test_Uart(){
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
		uart_Rs232SendNum(ds3231_hours);
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <test_Uart+0x38>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f000 fb31 	bl	8001ac4 <uart_Rs232SendNum>
		uart_Rs232SendString(":");
 8001462:	480b      	ldr	r0, [pc, #44]	; (8001490 <test_Uart+0x3c>)
 8001464:	f000 fb14 	bl	8001a90 <uart_Rs232SendString>
		uart_Rs232SendNum(ds3231_min);
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <test_Uart+0x40>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f000 fb29 	bl	8001ac4 <uart_Rs232SendNum>
		uart_Rs232SendString(":");
 8001472:	4807      	ldr	r0, [pc, #28]	; (8001490 <test_Uart+0x3c>)
 8001474:	f000 fb0c 	bl	8001a90 <uart_Rs232SendString>
		uart_Rs232SendNum(ds3231_sec);
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <test_Uart+0x44>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f000 fb21 	bl	8001ac4 <uart_Rs232SendNum>
		uart_Rs232SendString("\n");
 8001482:	4806      	ldr	r0, [pc, #24]	; (800149c <test_Uart+0x48>)
 8001484:	f000 fb04 	bl	8001a90 <uart_Rs232SendString>
//		uart_Rs232SendString("0");
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200000fd 	.word	0x200000fd
 8001490:	080068f4 	.word	0x080068f4
 8001494:	200000fa 	.word	0x200000fa
 8001498:	200000f8 	.word	0x200000f8
 800149c:	080068f8 	.word	0x080068f8

080014a0 <settime_7seg>:
	led7_SetDigit(1, 1, 0);
	led7_SetDigit(2, 2, 0);
	led7_SetDigit(3, 3, 0);
}

void settime_7seg(){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	led7_SetDigit(0, 0, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2100      	movs	r1, #0
 80014a8:	2000      	movs	r0, #0
 80014aa:	f7ff fde1 	bl	8001070 <led7_SetDigit>
	led7_SetDigit(0, 1, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2101      	movs	r1, #1
 80014b2:	2000      	movs	r0, #0
 80014b4:	f7ff fddc 	bl	8001070 <led7_SetDigit>
	led7_SetDigit(0, 2, 0);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2102      	movs	r1, #2
 80014bc:	2000      	movs	r0, #0
 80014be:	f7ff fdd7 	bl	8001070 <led7_SetDigit>
	led7_SetDigit(0, 3, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2103      	movs	r1, #3
 80014c6:	2000      	movs	r0, #0
 80014c8:	f7ff fdd2 	bl	8001070 <led7_SetDigit>
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d4:	b672      	cpsid	i
}
 80014d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <Error_Handler+0x8>
	...

080014dc <timer_init>:

uint16_t flag_timer_second = 0;
uint16_t timer_second_counter = 0;
uint16_t timer_second_MUL = 0;

void timer_init(){
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <timer_init+0x10>)
 80014e2:	f003 f8c9 	bl	8004678 <HAL_TIM_Base_Start_IT>
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000240 	.word	0x20000240

080014f0 <setTimer2>:

void setTimer2(uint16_t duration){
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80014fa:	4a08      	ldr	r2, [pc, #32]	; (800151c <setTimer2+0x2c>)
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <setTimer2+0x2c>)
 8001502:	881a      	ldrh	r2, [r3, #0]
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <setTimer2+0x30>)
 8001506:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <setTimer2+0x34>)
 800150a:	2200      	movs	r2, #0
 800150c:	801a      	strh	r2, [r3, #0]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	200000ac 	.word	0x200000ac
 8001520:	200000aa 	.word	0x200000aa
 8001524:	200000a8 	.word	0x200000a8

08001528 <setTimer3>:

void setTimer3(uint16_t duration){
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_2;
 8001532:	4a08      	ldr	r2, [pc, #32]	; (8001554 <setTimer3+0x2c>)
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <setTimer3+0x2c>)
 800153a:	881a      	ldrh	r2, [r3, #0]
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <setTimer3+0x30>)
 800153e:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <setTimer3+0x34>)
 8001542:	2200      	movs	r2, #0
 8001544:	801a      	strh	r2, [r3, #0]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	200000b2 	.word	0x200000b2
 8001558:	200000b0 	.word	0x200000b0
 800155c:	200000ae 	.word	0x200000ae

08001560 <setTimer4>:

void setTimer4(uint16_t duration){
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	80fb      	strh	r3, [r7, #6]
	timer4_MUL = duration/TIMER_CYCLE_2;
 800156a:	4a08      	ldr	r2, [pc, #32]	; (800158c <setTimer4+0x2c>)
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	8013      	strh	r3, [r2, #0]
	timer4_counter = timer4_MUL;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <setTimer4+0x2c>)
 8001572:	881a      	ldrh	r2, [r3, #0]
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <setTimer4+0x30>)
 8001576:	801a      	strh	r2, [r3, #0]
	flag_timer4 = 0;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <setTimer4+0x34>)
 800157a:	2200      	movs	r2, #0
 800157c:	801a      	strh	r2, [r3, #0]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	200000b8 	.word	0x200000b8
 8001590:	200000b6 	.word	0x200000b6
 8001594:	200000b4 	.word	0x200000b4

08001598 <setTimer7seg>:

void setTimer7seg(uint16_t duration){
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	80fb      	strh	r3, [r7, #6]
	timer7seg_MUL = duration/TIMER_CYCLE_2;
 80015a2:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <setTimer7seg+0x2c>)
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	8013      	strh	r3, [r2, #0]
	timer7seg_counter = timer7seg_MUL;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <setTimer7seg+0x2c>)
 80015aa:	881a      	ldrh	r2, [r3, #0]
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <setTimer7seg+0x30>)
 80015ae:	801a      	strh	r2, [r3, #0]
	flag_timer7seg = 0;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <setTimer7seg+0x34>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	801a      	strh	r2, [r3, #0]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	200000be 	.word	0x200000be
 80015c8:	200000bc 	.word	0x200000bc
 80015cc:	200000ba 	.word	0x200000ba

080015d0 <setTimerSecond>:

void setTimerSecond(uint16_t duration){
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]
	timer_second_MUL = duration/TIMER_CYCLE_2;
 80015da:	4a08      	ldr	r2, [pc, #32]	; (80015fc <setTimerSecond+0x2c>)
 80015dc:	88fb      	ldrh	r3, [r7, #6]
 80015de:	8013      	strh	r3, [r2, #0]
	timer_second_counter = timer_second_MUL;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <setTimerSecond+0x2c>)
 80015e2:	881a      	ldrh	r2, [r3, #0]
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <setTimerSecond+0x30>)
 80015e6:	801a      	strh	r2, [r3, #0]
	flag_timer_second = 0;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <setTimerSecond+0x34>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	801a      	strh	r2, [r3, #0]
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	200000c4 	.word	0x200000c4
 8001600:	200000c2 	.word	0x200000c2
 8001604:	200000c0 	.word	0x200000c0

08001608 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001618:	d16c      	bne.n	80016f4 <HAL_TIM_PeriodElapsedCallback+0xec>
		if(timer2_counter > 0){
 800161a:	4b38      	ldr	r3, [pc, #224]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d010      	beq.n	8001644 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8001622:	4b36      	ldr	r3, [pc, #216]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	3b01      	subs	r3, #1
 8001628:	b29a      	uxth	r2, r3
 800162a:	4b34      	ldr	r3, [pc, #208]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800162c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800162e:	4b33      	ldr	r3, [pc, #204]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d106      	bne.n	8001644 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8001636:	4b32      	ldr	r3, [pc, #200]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001638:	2201      	movs	r2, #1
 800163a:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 800163c:	4b31      	ldr	r3, [pc, #196]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800163e:	881a      	ldrh	r2, [r3, #0]
 8001640:	4b2e      	ldr	r3, [pc, #184]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001642:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer3_counter > 0){
 8001644:	4b30      	ldr	r3, [pc, #192]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d010      	beq.n	800166e <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 800164c:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	3b01      	subs	r3, #1
 8001652:	b29a      	uxth	r2, r3
 8001654:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001656:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0) {
 8001658:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d106      	bne.n	800166e <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 8001660:	4b2a      	ldr	r3, [pc, #168]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001662:	2201      	movs	r2, #1
 8001664:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 8001666:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001668:	881a      	ldrh	r2, [r3, #0]
 800166a:	4b27      	ldr	r3, [pc, #156]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800166c:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer4_counter > 0){
 800166e:	4b29      	ldr	r3, [pc, #164]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d010      	beq.n	8001698 <HAL_TIM_PeriodElapsedCallback+0x90>
			timer4_counter--;
 8001676:	4b27      	ldr	r3, [pc, #156]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	3b01      	subs	r3, #1
 800167c:	b29a      	uxth	r2, r3
 800167e:	4b25      	ldr	r3, [pc, #148]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001680:	801a      	strh	r2, [r3, #0]
			if(timer4_counter == 0) {
 8001682:	4b24      	ldr	r3, [pc, #144]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d106      	bne.n	8001698 <HAL_TIM_PeriodElapsedCallback+0x90>
				flag_timer4 = 1;
 800168a:	4b23      	ldr	r3, [pc, #140]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800168c:	2201      	movs	r2, #1
 800168e:	801a      	strh	r2, [r3, #0]
				timer4_counter = timer4_MUL;
 8001690:	4b22      	ldr	r3, [pc, #136]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001692:	881a      	ldrh	r2, [r3, #0]
 8001694:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001696:	801a      	strh	r2, [r3, #0]
			}
		}

		if(timer7seg_counter > 0){
 8001698:	4b21      	ldr	r3, [pc, #132]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d010      	beq.n	80016c2 <HAL_TIM_PeriodElapsedCallback+0xba>
			timer7seg_counter--;
 80016a0:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80016aa:	801a      	strh	r2, [r3, #0]
			if(timer7seg_counter == 0){
 80016ac:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d106      	bne.n	80016c2 <HAL_TIM_PeriodElapsedCallback+0xba>
				flag_timer7seg = 1;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	801a      	strh	r2, [r3, #0]
				timer7seg_counter = timer7seg_MUL;
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80016bc:	881a      	ldrh	r2, [r3, #0]
 80016be:	4b18      	ldr	r3, [pc, #96]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80016c0:	801a      	strh	r2, [r3, #0]
			}
		}

		if (timer_second_counter > 0){
 80016c2:	4b1a      	ldr	r3, [pc, #104]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d010      	beq.n	80016ec <HAL_TIM_PeriodElapsedCallback+0xe4>
			timer_second_counter--;
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	4b16      	ldr	r3, [pc, #88]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80016d4:	801a      	strh	r2, [r3, #0]
			if(timer_second_counter == 0){
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d106      	bne.n	80016ec <HAL_TIM_PeriodElapsedCallback+0xe4>
				flag_timer_second = 1;
 80016de:	4b14      	ldr	r3, [pc, #80]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	801a      	strh	r2, [r3, #0]
				timer_second_counter = timer_second_MUL;
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80016e6:	881a      	ldrh	r2, [r3, #0]
 80016e8:	4b10      	ldr	r3, [pc, #64]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80016ea:	801a      	strh	r2, [r3, #0]
			}
		}
	led7_Scan();
 80016ec:	f7ff fc34 	bl	8000f58 <led7_Scan>
	button_Scan();
 80016f0:	f7fe ff46 	bl	8000580 <button_Scan>
	}
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200000aa 	.word	0x200000aa
 8001700:	200000a8 	.word	0x200000a8
 8001704:	200000ac 	.word	0x200000ac
 8001708:	200000b0 	.word	0x200000b0
 800170c:	200000ae 	.word	0x200000ae
 8001710:	200000b2 	.word	0x200000b2
 8001714:	200000b6 	.word	0x200000b6
 8001718:	200000b4 	.word	0x200000b4
 800171c:	200000b8 	.word	0x200000b8
 8001720:	200000bc 	.word	0x200000bc
 8001724:	200000ba 	.word	0x200000ba
 8001728:	200000be 	.word	0x200000be
 800172c:	200000c2 	.word	0x200000c2
 8001730:	200000c0 	.word	0x200000c0
 8001734:	200000c4 	.word	0x200000c4

08001738 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800173c:	4b17      	ldr	r3, [pc, #92]	; (800179c <MX_SPI1_Init+0x64>)
 800173e:	4a18      	ldr	r2, [pc, #96]	; (80017a0 <MX_SPI1_Init+0x68>)
 8001740:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001742:	4b16      	ldr	r3, [pc, #88]	; (800179c <MX_SPI1_Init+0x64>)
 8001744:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001748:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800174a:	4b14      	ldr	r3, [pc, #80]	; (800179c <MX_SPI1_Init+0x64>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <MX_SPI1_Init+0x64>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_SPI1_Init+0x64>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <MX_SPI1_Init+0x64>)
 800175e:	2200      	movs	r2, #0
 8001760:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <MX_SPI1_Init+0x64>)
 8001764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001768:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <MX_SPI1_Init+0x64>)
 800176c:	2200      	movs	r2, #0
 800176e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <MX_SPI1_Init+0x64>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <MX_SPI1_Init+0x64>)
 8001778:	2200      	movs	r2, #0
 800177a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <MX_SPI1_Init+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <MX_SPI1_Init+0x64>)
 8001784:	220a      	movs	r2, #10
 8001786:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001788:	4804      	ldr	r0, [pc, #16]	; (800179c <MX_SPI1_Init+0x64>)
 800178a:	f002 f939 	bl	8003a00 <HAL_SPI_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001794:	f7ff fe9c 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200001e8 	.word	0x200001e8
 80017a0:	40013000 	.word	0x40013000

080017a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a19      	ldr	r2, [pc, #100]	; (8001828 <HAL_SPI_MspInit+0x84>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d12b      	bne.n	800181e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <HAL_SPI_MspInit+0x88>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	4a17      	ldr	r2, [pc, #92]	; (800182c <HAL_SPI_MspInit+0x88>)
 80017d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017d4:	6453      	str	r3, [r2, #68]	; 0x44
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_SPI_MspInit+0x88>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <HAL_SPI_MspInit+0x88>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a10      	ldr	r2, [pc, #64]	; (800182c <HAL_SPI_MspInit+0x88>)
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <HAL_SPI_MspInit+0x88>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80017fe:	2338      	movs	r3, #56	; 0x38
 8001800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800180e:	2305      	movs	r3, #5
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	4805      	ldr	r0, [pc, #20]	; (8001830 <HAL_SPI_MspInit+0x8c>)
 800181a:	f000 fcbf 	bl	800219c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800181e:	bf00      	nop
 8001820:	3728      	adds	r7, #40	; 0x28
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40013000 	.word	0x40013000
 800182c:	40023800 	.word	0x40023800
 8001830:	40020400 	.word	0x40020400

08001834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <HAL_MspInit+0x4c>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	4a0f      	ldr	r2, [pc, #60]	; (8001880 <HAL_MspInit+0x4c>)
 8001844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001848:	6453      	str	r3, [r2, #68]	; 0x44
 800184a:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <HAL_MspInit+0x4c>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <HAL_MspInit+0x4c>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a08      	ldr	r2, [pc, #32]	; (8001880 <HAL_MspInit+0x4c>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_MspInit+0x4c>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800

08001884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <NMI_Handler+0x4>

0800188a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <HardFault_Handler+0x4>

08001890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <MemManage_Handler+0x4>

08001896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189a:	e7fe      	b.n	800189a <BusFault_Handler+0x4>

0800189c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <UsageFault_Handler+0x4>

080018a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d0:	f000 fa7c 	bl	8001dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <TIM2_IRQHandler+0x10>)
 80018de:	f002 ff3b 	bl	8004758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000240 	.word	0x20000240

080018ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <USART1_IRQHandler+0x10>)
 80018f2:	f003 fc03 	bl	80050fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200002ec 	.word	0x200002ec

08001900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001908:	4a14      	ldr	r2, [pc, #80]	; (800195c <_sbrk+0x5c>)
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <_sbrk+0x60>)
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d102      	bne.n	8001922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <_sbrk+0x64>)
 800191e:	4a12      	ldr	r2, [pc, #72]	; (8001968 <_sbrk+0x68>)
 8001920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <_sbrk+0x64>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	429a      	cmp	r2, r3
 800192e:	d207      	bcs.n	8001940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001930:	f004 fb6c 	bl	800600c <__errno>
 8001934:	4603      	mov	r3, r0
 8001936:	220c      	movs	r2, #12
 8001938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800193a:	f04f 33ff 	mov.w	r3, #4294967295
 800193e:	e009      	b.n	8001954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <_sbrk+0x64>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <_sbrk+0x64>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	4a05      	ldr	r2, [pc, #20]	; (8001964 <_sbrk+0x64>)
 8001950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001952:	68fb      	ldr	r3, [r7, #12]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20020000 	.word	0x20020000
 8001960:	00000400 	.word	0x00000400
 8001964:	200000c8 	.word	0x200000c8
 8001968:	20000348 	.word	0x20000348

0800196c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <SystemInit+0x20>)
 8001972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001976:	4a05      	ldr	r2, [pc, #20]	; (800198c <SystemInit+0x20>)
 8001978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800197c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001996:	f107 0308 	add.w	r3, r7, #8
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a4:	463b      	mov	r3, r7
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019ac:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <MX_TIM2_Init+0x94>)
 80019ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <MX_TIM2_Init+0x94>)
 80019b6:	f240 3247 	movw	r2, #839	; 0x347
 80019ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019bc:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <MX_TIM2_Init+0x94>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80019c2:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <MX_TIM2_Init+0x94>)
 80019c4:	2263      	movs	r2, #99	; 0x63
 80019c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c8:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <MX_TIM2_Init+0x94>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <MX_TIM2_Init+0x94>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019d4:	4813      	ldr	r0, [pc, #76]	; (8001a24 <MX_TIM2_Init+0x94>)
 80019d6:	f002 fdff 	bl	80045d8 <HAL_TIM_Base_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80019e0:	f7ff fd76 	bl	80014d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019ea:	f107 0308 	add.w	r3, r7, #8
 80019ee:	4619      	mov	r1, r3
 80019f0:	480c      	ldr	r0, [pc, #48]	; (8001a24 <MX_TIM2_Init+0x94>)
 80019f2:	f002 ffb9 	bl	8004968 <HAL_TIM_ConfigClockSource>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80019fc:	f7ff fd68 	bl	80014d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a00:	2300      	movs	r3, #0
 8001a02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a08:	463b      	mov	r3, r7
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_TIM2_Init+0x94>)
 8001a0e:	f003 f9d5 	bl	8004dbc <HAL_TIMEx_MasterConfigSynchronization>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a18:	f7ff fd5a 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a1c:	bf00      	nop
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000240 	.word	0x20000240

08001a28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a38:	d115      	bne.n	8001a66 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <HAL_TIM_Base_MspInit+0x48>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <HAL_TIM_Base_MspInit+0x48>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_TIM_Base_MspInit+0x48>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2100      	movs	r1, #0
 8001a5a:	201c      	movs	r0, #28
 8001a5c:	f000 fad5 	bl	800200a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a60:	201c      	movs	r0, #28
 8001a62:	f000 faee 	bl	8002042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a66:	bf00      	nop
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800

08001a74 <uart_init_rs232>:
#include "uart.h"

uint8_t receive_buffer1 = 0;
uint8_t msg[100];

void uart_init_rs232(){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4903      	ldr	r1, [pc, #12]	; (8001a88 <uart_init_rs232+0x14>)
 8001a7c:	4803      	ldr	r0, [pc, #12]	; (8001a8c <uart_init_rs232+0x18>)
 8001a7e:	f003 fb0c 	bl	800509a <HAL_UART_Receive_IT>
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200000cc 	.word	0x200000cc
 8001a8c:	200002ec 	.word	0x200002ec

08001a90 <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	4907      	ldr	r1, [pc, #28]	; (8001ab8 <uart_Rs232SendString+0x28>)
 8001a9c:	4807      	ldr	r0, [pc, #28]	; (8001abc <uart_Rs232SendString+0x2c>)
 8001a9e:	f004 fae7 	bl	8006070 <siprintf>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	230a      	movs	r3, #10
 8001aa8:	4904      	ldr	r1, [pc, #16]	; (8001abc <uart_Rs232SendString+0x2c>)
 8001aaa:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <uart_Rs232SendString+0x30>)
 8001aac:	f003 fa63 	bl	8004f76 <HAL_UART_Transmit>
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	080068fc 	.word	0x080068fc
 8001abc:	20000288 	.word	0x20000288
 8001ac0:	200002ec 	.word	0x200002ec

08001ac4 <uart_Rs232SendNum>:

void uart_Rs232SendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart1, bytes, size, 10);
}

void uart_Rs232SendNum(uint32_t num){
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	if(num == 0){
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d103      	bne.n	8001ada <uart_Rs232SendNum+0x16>
		uart_Rs232SendString("0");
 8001ad2:	4824      	ldr	r0, [pc, #144]	; (8001b64 <uart_Rs232SendNum+0xa0>)
 8001ad4:	f7ff ffdc 	bl	8001a90 <uart_Rs232SendString>
		return;
 8001ad8:	e040      	b.n	8001b5c <uart_Rs232SendNum+0x98>
	}
    uint8_t num_flag = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	73fb      	strb	r3, [r7, #15]
    int i;
	if(num < 0) uart_Rs232SendString("-");
    for(i = 10; i > 0; i--)
 8001ade:	230a      	movs	r3, #10
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	e038      	b.n	8001b56 <uart_Rs232SendNum+0x92>
    {
        if((num / mypow(10, i-1)) != 0)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	4619      	mov	r1, r3
 8001aea:	200a      	movs	r0, #10
 8001aec:	f7ff f888 	bl	8000c00 <mypow>
 8001af0:	4603      	mov	r3, r0
 8001af2:	461a      	mov	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d315      	bcc.n	8001b26 <uart_Rs232SendNum+0x62>
        {
            num_flag = 1;
 8001afa:	2301      	movs	r3, #1
 8001afc:	73fb      	strb	r3, [r7, #15]
            sprintf((void*)msg,"%d",num/mypow(10, i-1));
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	4619      	mov	r1, r3
 8001b04:	200a      	movs	r0, #10
 8001b06:	f7ff f87b 	bl	8000c00 <mypow>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b14:	461a      	mov	r2, r3
 8001b16:	4914      	ldr	r1, [pc, #80]	; (8001b68 <uart_Rs232SendNum+0xa4>)
 8001b18:	4814      	ldr	r0, [pc, #80]	; (8001b6c <uart_Rs232SendNum+0xa8>)
 8001b1a:	f004 faa9 	bl	8006070 <siprintf>
            uart_Rs232SendString(msg);
 8001b1e:	4813      	ldr	r0, [pc, #76]	; (8001b6c <uart_Rs232SendNum+0xa8>)
 8001b20:	f7ff ffb6 	bl	8001a90 <uart_Rs232SendString>
 8001b24:	e005      	b.n	8001b32 <uart_Rs232SendNum+0x6e>
        }
        else
        {
            if(num_flag != 0)
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <uart_Rs232SendNum+0x6e>
            	uart_Rs232SendString("0");
 8001b2c:	480d      	ldr	r0, [pc, #52]	; (8001b64 <uart_Rs232SendNum+0xa0>)
 8001b2e:	f7ff ffaf 	bl	8001a90 <uart_Rs232SendString>
        }
        num %= mypow(10, i-1);
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	4619      	mov	r1, r3
 8001b38:	200a      	movs	r0, #10
 8001b3a:	f7ff f861 	bl	8000c00 <mypow>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	461a      	mov	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b48:	fb02 f201 	mul.w	r2, r2, r1
 8001b4c:	1a9b      	subs	r3, r3, r2
 8001b4e:	607b      	str	r3, [r7, #4]
    for(i = 10; i > 0; i--)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	dcc3      	bgt.n	8001ae4 <uart_Rs232SendNum+0x20>
    }
}
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	08006900 	.word	0x08006900
 8001b68:	08006904 	.word	0x08006904
 8001b6c:	20000288 	.word	0x20000288

08001b70 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a08      	ldr	r2, [pc, #32]	; (8001ba0 <HAL_UART_RxCpltCallback+0x30>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d10a      	bne.n	8001b98 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8001b82:	230a      	movs	r3, #10
 8001b84:	2201      	movs	r2, #1
 8001b86:	4907      	ldr	r1, [pc, #28]	; (8001ba4 <HAL_UART_RxCpltCallback+0x34>)
 8001b88:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <HAL_UART_RxCpltCallback+0x38>)
 8001b8a:	f003 f9f4 	bl	8004f76 <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001b8e:	2201      	movs	r2, #1
 8001b90:	4904      	ldr	r1, [pc, #16]	; (8001ba4 <HAL_UART_RxCpltCallback+0x34>)
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <HAL_UART_RxCpltCallback+0x38>)
 8001b94:	f003 fa81 	bl	800509a <HAL_UART_Receive_IT>
	}
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40011000 	.word	0x40011000
 8001ba4:	200000cc 	.word	0x200000cc
 8001ba8:	200002ec 	.word	0x200002ec

08001bac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001bb2:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <MX_USART1_UART_Init+0x50>)
 8001bb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bca:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001bd2:	220c      	movs	r2, #12
 8001bd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001be2:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001be4:	f003 f97a 	bl	8004edc <HAL_UART_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bee:	f7ff fc6f 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200002ec 	.word	0x200002ec
 8001bfc:	40011000 	.word	0x40011000

08001c00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	; 0x28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a1d      	ldr	r2, [pc, #116]	; (8001c94 <HAL_UART_MspInit+0x94>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d134      	bne.n	8001c8c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <HAL_UART_MspInit+0x98>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	4a1b      	ldr	r2, [pc, #108]	; (8001c98 <HAL_UART_MspInit+0x98>)
 8001c2c:	f043 0310 	orr.w	r3, r3, #16
 8001c30:	6453      	str	r3, [r2, #68]	; 0x44
 8001c32:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <HAL_UART_MspInit+0x98>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	f003 0310 	and.w	r3, r3, #16
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <HAL_UART_MspInit+0x98>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a14      	ldr	r2, [pc, #80]	; (8001c98 <HAL_UART_MspInit+0x98>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_UART_MspInit+0x98>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c6c:	2307      	movs	r3, #7
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	4619      	mov	r1, r3
 8001c76:	4809      	ldr	r0, [pc, #36]	; (8001c9c <HAL_UART_MspInit+0x9c>)
 8001c78:	f000 fa90 	bl	800219c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2100      	movs	r1, #0
 8001c80:	2025      	movs	r0, #37	; 0x25
 8001c82:	f000 f9c2 	bl	800200a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c86:	2025      	movs	r0, #37	; 0x25
 8001c88:	f000 f9db 	bl	8002042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	3728      	adds	r7, #40	; 0x28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40011000 	.word	0x40011000
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40020000 	.word	0x40020000

08001ca0 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	0092      	lsls	r2, r2, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	f003 030f 	and.w	r3, r3, #15
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	b2db      	uxtb	r3, r3
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cd8:	480d      	ldr	r0, [pc, #52]	; (8001d10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cda:	490e      	ldr	r1, [pc, #56]	; (8001d14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cdc:	4a0e      	ldr	r2, [pc, #56]	; (8001d18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce0:	e002      	b.n	8001ce8 <LoopCopyDataInit>

08001ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce6:	3304      	adds	r3, #4

08001ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cec:	d3f9      	bcc.n	8001ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cee:	4a0b      	ldr	r2, [pc, #44]	; (8001d1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cf0:	4c0b      	ldr	r4, [pc, #44]	; (8001d20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf4:	e001      	b.n	8001cfa <LoopFillZerobss>

08001cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf8:	3204      	adds	r2, #4

08001cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cfc:	d3fb      	bcc.n	8001cf6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cfe:	f7ff fe35 	bl	800196c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d02:	f004 f989 	bl	8006018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d06:	f7ff fa3d 	bl	8001184 <main>
  bx  lr    
 8001d0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d14:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001d18:	0800696c 	.word	0x0800696c
  ldr r2, =_sbss
 8001d1c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001d20:	20000344 	.word	0x20000344

08001d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d24:	e7fe      	b.n	8001d24 <ADC_IRQHandler>
	...

08001d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d2c:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <HAL_Init+0x40>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0d      	ldr	r2, [pc, #52]	; (8001d68 <HAL_Init+0x40>)
 8001d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_Init+0x40>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <HAL_Init+0x40>)
 8001d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <HAL_Init+0x40>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a07      	ldr	r2, [pc, #28]	; (8001d68 <HAL_Init+0x40>)
 8001d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d50:	2003      	movs	r0, #3
 8001d52:	f000 f94f 	bl	8001ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d56:	200f      	movs	r0, #15
 8001d58:	f000 f808 	bl	8001d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d5c:	f7ff fd6a 	bl	8001834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023c00 	.word	0x40023c00

08001d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d74:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_InitTick+0x54>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_InitTick+0x58>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 f967 	bl	800205e <HAL_SYSTICK_Config>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e00e      	b.n	8001db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b0f      	cmp	r3, #15
 8001d9e:	d80a      	bhi.n	8001db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da0:	2200      	movs	r2, #0
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	f04f 30ff 	mov.w	r0, #4294967295
 8001da8:	f000 f92f 	bl	800200a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dac:	4a06      	ldr	r2, [pc, #24]	; (8001dc8 <HAL_InitTick+0x5c>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	e000      	b.n	8001db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000010 	.word	0x20000010
 8001dc4:	20000018 	.word	0x20000018
 8001dc8:	20000014 	.word	0x20000014

08001dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_IncTick+0x20>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_IncTick+0x24>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <HAL_IncTick+0x24>)
 8001dde:	6013      	str	r3, [r2, #0]
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000018 	.word	0x20000018
 8001df0:	20000330 	.word	0x20000330

08001df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return uwTick;
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <HAL_GetTick+0x14>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000330 	.word	0x20000330

08001e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e14:	f7ff ffee 	bl	8001df4 <HAL_GetTick>
 8001e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e24:	d005      	beq.n	8001e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <HAL_Delay+0x44>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4413      	add	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e32:	bf00      	nop
 8001e34:	f7ff ffde 	bl	8001df4 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d8f7      	bhi.n	8001e34 <HAL_Delay+0x28>
  {
  }
}
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000018 	.word	0x20000018

08001e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e70:	4013      	ands	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e86:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	60d3      	str	r3, [r2, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	f003 0307 	and.w	r3, r3, #7
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	db0b      	blt.n	8001ee2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	f003 021f 	and.w	r2, r3, #31
 8001ed0:	4907      	ldr	r1, [pc, #28]	; (8001ef0 <__NVIC_EnableIRQ+0x38>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	2001      	movs	r0, #1
 8001eda:	fa00 f202 	lsl.w	r2, r0, r2
 8001ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000e100 	.word	0xe000e100

08001ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db0a      	blt.n	8001f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	490c      	ldr	r1, [pc, #48]	; (8001f40 <__NVIC_SetPriority+0x4c>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f1c:	e00a      	b.n	8001f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4908      	ldr	r1, [pc, #32]	; (8001f44 <__NVIC_SetPriority+0x50>)
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	0112      	lsls	r2, r2, #4
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	761a      	strb	r2, [r3, #24]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000e100 	.word	0xe000e100
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f1c3 0307 	rsb	r3, r3, #7
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	bf28      	it	cs
 8001f66:	2304      	movcs	r3, #4
 8001f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d902      	bls.n	8001f78 <NVIC_EncodePriority+0x30>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3b03      	subs	r3, #3
 8001f76:	e000      	b.n	8001f7a <NVIC_EncodePriority+0x32>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43d9      	mvns	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	4313      	orrs	r3, r2
         );
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc0:	d301      	bcc.n	8001fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e00f      	b.n	8001fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <SysTick_Config+0x40>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fce:	210f      	movs	r1, #15
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd4:	f7ff ff8e 	bl	8001ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <SysTick_Config+0x40>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fde:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <SysTick_Config+0x40>)
 8001fe0:	2207      	movs	r2, #7
 8001fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	e000e010 	.word	0xe000e010

08001ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff29 	bl	8001e54 <__NVIC_SetPriorityGrouping>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800200a:	b580      	push	{r7, lr}
 800200c:	b086      	sub	sp, #24
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800201c:	f7ff ff3e 	bl	8001e9c <__NVIC_GetPriorityGrouping>
 8002020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	6978      	ldr	r0, [r7, #20]
 8002028:	f7ff ff8e 	bl	8001f48 <NVIC_EncodePriority>
 800202c:	4602      	mov	r2, r0
 800202e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff5d 	bl	8001ef4 <__NVIC_SetPriority>
}
 800203a:	bf00      	nop
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff31 	bl	8001eb8 <__NVIC_EnableIRQ>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff ffa2 	bl	8001fb0 <SysTick_Config>
 800206c:	4603      	mov	r3, r0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b084      	sub	sp, #16
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002082:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002084:	f7ff feb6 	bl	8001df4 <HAL_GetTick>
 8002088:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d008      	beq.n	80020a8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2280      	movs	r2, #128	; 0x80
 800209a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e052      	b.n	800214e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0216 	bic.w	r2, r2, #22
 80020b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020c6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d103      	bne.n	80020d8 <HAL_DMA_Abort+0x62>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d007      	beq.n	80020e8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0208 	bic.w	r2, r2, #8
 80020e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0201 	bic.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020f8:	e013      	b.n	8002122 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020fa:	f7ff fe7b 	bl	8001df4 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b05      	cmp	r3, #5
 8002106:	d90c      	bls.n	8002122 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2220      	movs	r2, #32
 800210c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2203      	movs	r2, #3
 8002112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e015      	b.n	800214e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1e4      	bne.n	80020fa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	223f      	movs	r2, #63	; 0x3f
 8002136:	409a      	lsls	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d004      	beq.n	8002174 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2280      	movs	r2, #128	; 0x80
 800216e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e00c      	b.n	800218e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2205      	movs	r2, #5
 8002178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0201 	bic.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
 80021b6:	e16b      	b.n	8002490 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021b8:	2201      	movs	r2, #1
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	f040 815a 	bne.w	800248a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d005      	beq.n	80021ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d130      	bne.n	8002250 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	2203      	movs	r2, #3
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002224:	2201      	movs	r2, #1
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 0201 	and.w	r2, r3, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b03      	cmp	r3, #3
 800225a:	d017      	beq.n	800228c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d123      	bne.n	80022e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	08da      	lsrs	r2, r3, #3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3208      	adds	r2, #8
 80022a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	220f      	movs	r2, #15
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	08da      	lsrs	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3208      	adds	r2, #8
 80022da:	69b9      	ldr	r1, [r7, #24]
 80022dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0203 	and.w	r2, r3, #3
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80b4 	beq.w	800248a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	4b60      	ldr	r3, [pc, #384]	; (80024a8 <HAL_GPIO_Init+0x30c>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a5f      	ldr	r2, [pc, #380]	; (80024a8 <HAL_GPIO_Init+0x30c>)
 800232c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b5d      	ldr	r3, [pc, #372]	; (80024a8 <HAL_GPIO_Init+0x30c>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800233e:	4a5b      	ldr	r2, [pc, #364]	; (80024ac <HAL_GPIO_Init+0x310>)
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	089b      	lsrs	r3, r3, #2
 8002344:	3302      	adds	r3, #2
 8002346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	220f      	movs	r2, #15
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a52      	ldr	r2, [pc, #328]	; (80024b0 <HAL_GPIO_Init+0x314>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d02b      	beq.n	80023c2 <HAL_GPIO_Init+0x226>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a51      	ldr	r2, [pc, #324]	; (80024b4 <HAL_GPIO_Init+0x318>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d025      	beq.n	80023be <HAL_GPIO_Init+0x222>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a50      	ldr	r2, [pc, #320]	; (80024b8 <HAL_GPIO_Init+0x31c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d01f      	beq.n	80023ba <HAL_GPIO_Init+0x21e>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a4f      	ldr	r2, [pc, #316]	; (80024bc <HAL_GPIO_Init+0x320>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d019      	beq.n	80023b6 <HAL_GPIO_Init+0x21a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a4e      	ldr	r2, [pc, #312]	; (80024c0 <HAL_GPIO_Init+0x324>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d013      	beq.n	80023b2 <HAL_GPIO_Init+0x216>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a4d      	ldr	r2, [pc, #308]	; (80024c4 <HAL_GPIO_Init+0x328>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d00d      	beq.n	80023ae <HAL_GPIO_Init+0x212>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a4c      	ldr	r2, [pc, #304]	; (80024c8 <HAL_GPIO_Init+0x32c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d007      	beq.n	80023aa <HAL_GPIO_Init+0x20e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a4b      	ldr	r2, [pc, #300]	; (80024cc <HAL_GPIO_Init+0x330>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d101      	bne.n	80023a6 <HAL_GPIO_Init+0x20a>
 80023a2:	2307      	movs	r3, #7
 80023a4:	e00e      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023a6:	2308      	movs	r3, #8
 80023a8:	e00c      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023aa:	2306      	movs	r3, #6
 80023ac:	e00a      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023ae:	2305      	movs	r3, #5
 80023b0:	e008      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023b2:	2304      	movs	r3, #4
 80023b4:	e006      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023b6:	2303      	movs	r3, #3
 80023b8:	e004      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e002      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023c2:	2300      	movs	r3, #0
 80023c4:	69fa      	ldr	r2, [r7, #28]
 80023c6:	f002 0203 	and.w	r2, r2, #3
 80023ca:	0092      	lsls	r2, r2, #2
 80023cc:	4093      	lsls	r3, r2
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023d4:	4935      	ldr	r1, [pc, #212]	; (80024ac <HAL_GPIO_Init+0x310>)
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	089b      	lsrs	r3, r3, #2
 80023da:	3302      	adds	r3, #2
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023e2:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <HAL_GPIO_Init+0x334>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002406:	4a32      	ldr	r2, [pc, #200]	; (80024d0 <HAL_GPIO_Init+0x334>)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800240c:	4b30      	ldr	r3, [pc, #192]	; (80024d0 <HAL_GPIO_Init+0x334>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002430:	4a27      	ldr	r2, [pc, #156]	; (80024d0 <HAL_GPIO_Init+0x334>)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002436:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <HAL_GPIO_Init+0x334>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800245a:	4a1d      	ldr	r2, [pc, #116]	; (80024d0 <HAL_GPIO_Init+0x334>)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002460:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <HAL_GPIO_Init+0x334>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002484:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <HAL_GPIO_Init+0x334>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3301      	adds	r3, #1
 800248e:	61fb      	str	r3, [r7, #28]
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	2b0f      	cmp	r3, #15
 8002494:	f67f ae90 	bls.w	80021b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002498:	bf00      	nop
 800249a:	bf00      	nop
 800249c:	3724      	adds	r7, #36	; 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40013800 	.word	0x40013800
 80024b0:	40020000 	.word	0x40020000
 80024b4:	40020400 	.word	0x40020400
 80024b8:	40020800 	.word	0x40020800
 80024bc:	40020c00 	.word	0x40020c00
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40021400 	.word	0x40021400
 80024c8:	40021800 	.word	0x40021800
 80024cc:	40021c00 	.word	0x40021c00
 80024d0:	40013c00 	.word	0x40013c00

080024d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	807b      	strh	r3, [r7, #2]
 80024e0:	4613      	mov	r3, r2
 80024e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024e4:	787b      	ldrb	r3, [r7, #1]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ea:	887a      	ldrh	r2, [r7, #2]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024f0:	e003      	b.n	80024fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024f2:	887b      	ldrh	r3, [r7, #2]
 80024f4:	041a      	lsls	r2, r3, #16
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	619a      	str	r2, [r3, #24]
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002506:	b480      	push	{r7}
 8002508:	b085      	sub	sp, #20
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	460b      	mov	r3, r1
 8002510:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002518:	887a      	ldrh	r2, [r7, #2]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4013      	ands	r3, r2
 800251e:	041a      	lsls	r2, r3, #16
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	43d9      	mvns	r1, r3
 8002524:	887b      	ldrh	r3, [r7, #2]
 8002526:	400b      	ands	r3, r1
 8002528:	431a      	orrs	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	619a      	str	r2, [r3, #24]
}
 800252e:	bf00      	nop
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e12b      	b.n	80027a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7fe fad2 	bl	8000b0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2224      	movs	r2, #36	; 0x24
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0201 	bic.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800258e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800259e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025a0:	f001 fa06 	bl	80039b0 <HAL_RCC_GetPCLK1Freq>
 80025a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	4a81      	ldr	r2, [pc, #516]	; (80027b0 <HAL_I2C_Init+0x274>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d807      	bhi.n	80025c0 <HAL_I2C_Init+0x84>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4a80      	ldr	r2, [pc, #512]	; (80027b4 <HAL_I2C_Init+0x278>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	bf94      	ite	ls
 80025b8:	2301      	movls	r3, #1
 80025ba:	2300      	movhi	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	e006      	b.n	80025ce <HAL_I2C_Init+0x92>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4a7d      	ldr	r2, [pc, #500]	; (80027b8 <HAL_I2C_Init+0x27c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	bf94      	ite	ls
 80025c8:	2301      	movls	r3, #1
 80025ca:	2300      	movhi	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e0e7      	b.n	80027a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4a78      	ldr	r2, [pc, #480]	; (80027bc <HAL_I2C_Init+0x280>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	0c9b      	lsrs	r3, r3, #18
 80025e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a6a      	ldr	r2, [pc, #424]	; (80027b0 <HAL_I2C_Init+0x274>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d802      	bhi.n	8002610 <HAL_I2C_Init+0xd4>
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	3301      	adds	r3, #1
 800260e:	e009      	b.n	8002624 <HAL_I2C_Init+0xe8>
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002616:	fb02 f303 	mul.w	r3, r2, r3
 800261a:	4a69      	ldr	r2, [pc, #420]	; (80027c0 <HAL_I2C_Init+0x284>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	3301      	adds	r3, #1
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	430b      	orrs	r3, r1
 800262a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002636:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	495c      	ldr	r1, [pc, #368]	; (80027b0 <HAL_I2C_Init+0x274>)
 8002640:	428b      	cmp	r3, r1
 8002642:	d819      	bhi.n	8002678 <HAL_I2C_Init+0x13c>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1e59      	subs	r1, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002652:	1c59      	adds	r1, r3, #1
 8002654:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002658:	400b      	ands	r3, r1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <HAL_I2C_Init+0x138>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1e59      	subs	r1, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fbb1 f3f3 	udiv	r3, r1, r3
 800266c:	3301      	adds	r3, #1
 800266e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002672:	e051      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 8002674:	2304      	movs	r3, #4
 8002676:	e04f      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d111      	bne.n	80026a4 <HAL_I2C_Init+0x168>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1e58      	subs	r0, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6859      	ldr	r1, [r3, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	440b      	add	r3, r1
 800268e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002692:	3301      	adds	r3, #1
 8002694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf0c      	ite	eq
 800269c:	2301      	moveq	r3, #1
 800269e:	2300      	movne	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	e012      	b.n	80026ca <HAL_I2C_Init+0x18e>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1e58      	subs	r0, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	0099      	lsls	r1, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ba:	3301      	adds	r3, #1
 80026bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	bf0c      	ite	eq
 80026c4:	2301      	moveq	r3, #1
 80026c6:	2300      	movne	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_I2C_Init+0x196>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e022      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10e      	bne.n	80026f8 <HAL_I2C_Init+0x1bc>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1e58      	subs	r0, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6859      	ldr	r1, [r3, #4]
 80026e2:	460b      	mov	r3, r1
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	440b      	add	r3, r1
 80026e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ec:	3301      	adds	r3, #1
 80026ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f6:	e00f      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1e58      	subs	r0, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6859      	ldr	r1, [r3, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	0099      	lsls	r1, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	fbb0 f3f3 	udiv	r3, r0, r3
 800270e:	3301      	adds	r3, #1
 8002710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	6809      	ldr	r1, [r1, #0]
 800271c:	4313      	orrs	r3, r2
 800271e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69da      	ldr	r2, [r3, #28]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002746:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6911      	ldr	r1, [r2, #16]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68d2      	ldr	r2, [r2, #12]
 8002752:	4311      	orrs	r1, r2
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	430b      	orrs	r3, r1
 800275a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0201 	orr.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	000186a0 	.word	0x000186a0
 80027b4:	001e847f 	.word	0x001e847f
 80027b8:	003d08ff 	.word	0x003d08ff
 80027bc:	431bde83 	.word	0x431bde83
 80027c0:	10624dd3 	.word	0x10624dd3

080027c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08c      	sub	sp, #48	; 0x30
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	4608      	mov	r0, r1
 80027ce:	4611      	mov	r1, r2
 80027d0:	461a      	mov	r2, r3
 80027d2:	4603      	mov	r3, r0
 80027d4:	817b      	strh	r3, [r7, #10]
 80027d6:	460b      	mov	r3, r1
 80027d8:	813b      	strh	r3, [r7, #8]
 80027da:	4613      	mov	r3, r2
 80027dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027de:	f7ff fb09 	bl	8001df4 <HAL_GetTick>
 80027e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	f040 8208 	bne.w	8002c02 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	2319      	movs	r3, #25
 80027f8:	2201      	movs	r2, #1
 80027fa:	497b      	ldr	r1, [pc, #492]	; (80029e8 <HAL_I2C_Mem_Read+0x224>)
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 faef 	bl	8002de0 <I2C_WaitOnFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002808:	2302      	movs	r3, #2
 800280a:	e1fb      	b.n	8002c04 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_I2C_Mem_Read+0x56>
 8002816:	2302      	movs	r3, #2
 8002818:	e1f4      	b.n	8002c04 <HAL_I2C_Mem_Read+0x440>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b01      	cmp	r3, #1
 800282e:	d007      	beq.n	8002840 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800284e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2222      	movs	r2, #34	; 0x22
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2240      	movs	r2, #64	; 0x40
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800286a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002870:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4a5b      	ldr	r2, [pc, #364]	; (80029ec <HAL_I2C_Mem_Read+0x228>)
 8002880:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002882:	88f8      	ldrh	r0, [r7, #6]
 8002884:	893a      	ldrh	r2, [r7, #8]
 8002886:	8979      	ldrh	r1, [r7, #10]
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	9301      	str	r3, [sp, #4]
 800288c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	4603      	mov	r3, r0
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 f9bc 	bl	8002c10 <I2C_RequestMemoryRead>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e1b0      	b.n	8002c04 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d113      	bne.n	80028d2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028aa:	2300      	movs	r3, #0
 80028ac:	623b      	str	r3, [r7, #32]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	623b      	str	r3, [r7, #32]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	623b      	str	r3, [r7, #32]
 80028be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	e184      	b.n	8002bdc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d11b      	bne.n	8002912 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	61fb      	str	r3, [r7, #28]
 80028fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	e164      	b.n	8002bdc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002916:	2b02      	cmp	r3, #2
 8002918:	d11b      	bne.n	8002952 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002928:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002938:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800293a:	2300      	movs	r3, #0
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	61bb      	str	r3, [r7, #24]
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	e144      	b.n	8002bdc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002968:	e138      	b.n	8002bdc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296e:	2b03      	cmp	r3, #3
 8002970:	f200 80f1 	bhi.w	8002b56 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002978:	2b01      	cmp	r3, #1
 800297a:	d123      	bne.n	80029c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800297c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 fb44 	bl	800300e <I2C_WaitOnRXNEFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e139      	b.n	8002c04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691a      	ldr	r2, [r3, #16]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029c2:	e10b      	b.n	8002bdc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d14e      	bne.n	8002a6a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d2:	2200      	movs	r2, #0
 80029d4:	4906      	ldr	r1, [pc, #24]	; (80029f0 <HAL_I2C_Mem_Read+0x22c>)
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 fa02 	bl	8002de0 <I2C_WaitOnFlagUntilTimeout>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d008      	beq.n	80029f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e10e      	b.n	8002c04 <HAL_I2C_Mem_Read+0x440>
 80029e6:	bf00      	nop
 80029e8:	00100002 	.word	0x00100002
 80029ec:	ffff0000 	.word	0xffff0000
 80029f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a68:	e0b8      	b.n	8002bdc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a70:	2200      	movs	r2, #0
 8002a72:	4966      	ldr	r1, [pc, #408]	; (8002c0c <HAL_I2C_Mem_Read+0x448>)
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f9b3 	bl	8002de0 <I2C_WaitOnFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0bf      	b.n	8002c04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002acc:	2200      	movs	r2, #0
 8002ace:	494f      	ldr	r1, [pc, #316]	; (8002c0c <HAL_I2C_Mem_Read+0x448>)
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f985 	bl	8002de0 <I2C_WaitOnFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e091      	b.n	8002c04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691a      	ldr	r2, [r3, #16]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b54:	e042      	b.n	8002bdc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 fa57 	bl	800300e <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e04c      	b.n	8002c04 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d118      	bne.n	8002bdc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f47f aec2 	bne.w	800296a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e000      	b.n	8002c04 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002c02:	2302      	movs	r3, #2
  }
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3728      	adds	r7, #40	; 0x28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	00010004 	.word	0x00010004

08002c10 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	4608      	mov	r0, r1
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4603      	mov	r3, r0
 8002c20:	817b      	strh	r3, [r7, #10]
 8002c22:	460b      	mov	r3, r1
 8002c24:	813b      	strh	r3, [r7, #8]
 8002c26:	4613      	mov	r3, r2
 8002c28:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c38:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f8c2 	bl	8002de0 <I2C_WaitOnFlagUntilTimeout>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00d      	beq.n	8002c7e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c70:	d103      	bne.n	8002c7a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e0aa      	b.n	8002dd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c7e:	897b      	ldrh	r3, [r7, #10]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	461a      	mov	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	6a3a      	ldr	r2, [r7, #32]
 8002c92:	4952      	ldr	r1, [pc, #328]	; (8002ddc <I2C_RequestMemoryRead+0x1cc>)
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 f8fa 	bl	8002e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e097      	b.n	8002dd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cbc:	6a39      	ldr	r1, [r7, #32]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f964 	bl	8002f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00d      	beq.n	8002ce6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d107      	bne.n	8002ce2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e076      	b.n	8002dd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d105      	bne.n	8002cf8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cec:	893b      	ldrh	r3, [r7, #8]
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	611a      	str	r2, [r3, #16]
 8002cf6:	e021      	b.n	8002d3c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cf8:	893b      	ldrh	r3, [r7, #8]
 8002cfa:	0a1b      	lsrs	r3, r3, #8
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d08:	6a39      	ldr	r1, [r7, #32]
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 f93e 	bl	8002f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00d      	beq.n	8002d32 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d107      	bne.n	8002d2e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e050      	b.n	8002dd4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d32:	893b      	ldrh	r3, [r7, #8]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3e:	6a39      	ldr	r1, [r7, #32]
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f923 	bl	8002f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00d      	beq.n	8002d68 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d107      	bne.n	8002d64 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d62:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e035      	b.n	8002dd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d76:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f82b 	bl	8002de0 <I2C_WaitOnFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00d      	beq.n	8002dac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d9e:	d103      	bne.n	8002da8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002da6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e013      	b.n	8002dd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002dac:	897b      	ldrh	r3, [r7, #10]
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	6a3a      	ldr	r2, [r7, #32]
 8002dc0:	4906      	ldr	r1, [pc, #24]	; (8002ddc <I2C_RequestMemoryRead+0x1cc>)
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 f863 	bl	8002e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	00010002 	.word	0x00010002

08002de0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	4613      	mov	r3, r2
 8002dee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002df0:	e025      	b.n	8002e3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df8:	d021      	beq.n	8002e3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dfa:	f7fe fffb 	bl	8001df4 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d302      	bcc.n	8002e10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d116      	bne.n	8002e3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f043 0220 	orr.w	r2, r3, #32
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e023      	b.n	8002e86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	0c1b      	lsrs	r3, r3, #16
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d10d      	bne.n	8002e64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	43da      	mvns	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	4013      	ands	r3, r2
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	bf0c      	ite	eq
 8002e5a:	2301      	moveq	r3, #1
 8002e5c:	2300      	movne	r3, #0
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	461a      	mov	r2, r3
 8002e62:	e00c      	b.n	8002e7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	43da      	mvns	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	bf0c      	ite	eq
 8002e76:	2301      	moveq	r3, #1
 8002e78:	2300      	movne	r3, #0
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d0b6      	beq.n	8002df2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
 8002e9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e9c:	e051      	b.n	8002f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eac:	d123      	bne.n	8002ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ebc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ec6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f043 0204 	orr.w	r2, r3, #4
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e046      	b.n	8002f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d021      	beq.n	8002f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efe:	f7fe ff79 	bl	8001df4 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d302      	bcc.n	8002f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d116      	bne.n	8002f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f043 0220 	orr.w	r2, r3, #32
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e020      	b.n	8002f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d10c      	bne.n	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	43da      	mvns	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4013      	ands	r3, r2
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	bf14      	ite	ne
 8002f5e:	2301      	movne	r3, #1
 8002f60:	2300      	moveq	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	e00b      	b.n	8002f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	43da      	mvns	r2, r3
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	4013      	ands	r3, r2
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf14      	ite	ne
 8002f78:	2301      	movne	r3, #1
 8002f7a:	2300      	moveq	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d18d      	bne.n	8002e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f98:	e02d      	b.n	8002ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f88d 	bl	80030ba <I2C_IsAcknowledgeFailed>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e02d      	b.n	8003006 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb0:	d021      	beq.n	8002ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb2:	f7fe ff1f 	bl	8001df4 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d302      	bcc.n	8002fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d116      	bne.n	8002ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f043 0220 	orr.w	r2, r3, #32
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e007      	b.n	8003006 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003000:	2b80      	cmp	r3, #128	; 0x80
 8003002:	d1ca      	bne.n	8002f9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b084      	sub	sp, #16
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800301a:	e042      	b.n	80030a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	2b10      	cmp	r3, #16
 8003028:	d119      	bne.n	800305e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f06f 0210 	mvn.w	r2, #16
 8003032:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2220      	movs	r2, #32
 800303e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e029      	b.n	80030b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800305e:	f7fe fec9 	bl	8001df4 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	429a      	cmp	r2, r3
 800306c:	d302      	bcc.n	8003074 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d116      	bne.n	80030a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f043 0220 	orr.w	r2, r3, #32
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e007      	b.n	80030b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ac:	2b40      	cmp	r3, #64	; 0x40
 80030ae:	d1b5      	bne.n	800301c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d0:	d11b      	bne.n	800310a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f043 0204 	orr.w	r2, r3, #4
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e264      	b.n	80035f4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d075      	beq.n	8003222 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003136:	4ba3      	ldr	r3, [pc, #652]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 030c 	and.w	r3, r3, #12
 800313e:	2b04      	cmp	r3, #4
 8003140:	d00c      	beq.n	800315c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003142:	4ba0      	ldr	r3, [pc, #640]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800314a:	2b08      	cmp	r3, #8
 800314c:	d112      	bne.n	8003174 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800314e:	4b9d      	ldr	r3, [pc, #628]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800315a:	d10b      	bne.n	8003174 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800315c:	4b99      	ldr	r3, [pc, #612]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d05b      	beq.n	8003220 <HAL_RCC_OscConfig+0x108>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d157      	bne.n	8003220 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e23f      	b.n	80035f4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800317c:	d106      	bne.n	800318c <HAL_RCC_OscConfig+0x74>
 800317e:	4b91      	ldr	r3, [pc, #580]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a90      	ldr	r2, [pc, #576]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 8003184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	e01d      	b.n	80031c8 <HAL_RCC_OscConfig+0xb0>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003194:	d10c      	bne.n	80031b0 <HAL_RCC_OscConfig+0x98>
 8003196:	4b8b      	ldr	r3, [pc, #556]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a8a      	ldr	r2, [pc, #552]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 800319c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	4b88      	ldr	r3, [pc, #544]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a87      	ldr	r2, [pc, #540]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 80031a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	e00b      	b.n	80031c8 <HAL_RCC_OscConfig+0xb0>
 80031b0:	4b84      	ldr	r3, [pc, #528]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a83      	ldr	r2, [pc, #524]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 80031b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	4b81      	ldr	r3, [pc, #516]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a80      	ldr	r2, [pc, #512]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 80031c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d013      	beq.n	80031f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d0:	f7fe fe10 	bl	8001df4 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031d8:	f7fe fe0c 	bl	8001df4 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b64      	cmp	r3, #100	; 0x64
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e204      	b.n	80035f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ea:	4b76      	ldr	r3, [pc, #472]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0f0      	beq.n	80031d8 <HAL_RCC_OscConfig+0xc0>
 80031f6:	e014      	b.n	8003222 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f8:	f7fe fdfc 	bl	8001df4 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003200:	f7fe fdf8 	bl	8001df4 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b64      	cmp	r3, #100	; 0x64
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e1f0      	b.n	80035f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003212:	4b6c      	ldr	r3, [pc, #432]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f0      	bne.n	8003200 <HAL_RCC_OscConfig+0xe8>
 800321e:	e000      	b.n	8003222 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d063      	beq.n	80032f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800322e:	4b65      	ldr	r3, [pc, #404]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 030c 	and.w	r3, r3, #12
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00b      	beq.n	8003252 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800323a:	4b62      	ldr	r3, [pc, #392]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003242:	2b08      	cmp	r3, #8
 8003244:	d11c      	bne.n	8003280 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003246:	4b5f      	ldr	r3, [pc, #380]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d116      	bne.n	8003280 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003252:	4b5c      	ldr	r3, [pc, #368]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <HAL_RCC_OscConfig+0x152>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d001      	beq.n	800326a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e1c4      	b.n	80035f4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326a:	4b56      	ldr	r3, [pc, #344]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	4952      	ldr	r1, [pc, #328]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 800327a:	4313      	orrs	r3, r2
 800327c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327e:	e03a      	b.n	80032f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d020      	beq.n	80032ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003288:	4b4f      	ldr	r3, [pc, #316]	; (80033c8 <HAL_RCC_OscConfig+0x2b0>)
 800328a:	2201      	movs	r2, #1
 800328c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328e:	f7fe fdb1 	bl	8001df4 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003296:	f7fe fdad 	bl	8001df4 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e1a5      	b.n	80035f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a8:	4b46      	ldr	r3, [pc, #280]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0f0      	beq.n	8003296 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b4:	4b43      	ldr	r3, [pc, #268]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	4940      	ldr	r1, [pc, #256]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	600b      	str	r3, [r1, #0]
 80032c8:	e015      	b.n	80032f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ca:	4b3f      	ldr	r3, [pc, #252]	; (80033c8 <HAL_RCC_OscConfig+0x2b0>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7fe fd90 	bl	8001df4 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032d8:	f7fe fd8c 	bl	8001df4 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e184      	b.n	80035f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ea:	4b36      	ldr	r3, [pc, #216]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d030      	beq.n	8003364 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d016      	beq.n	8003338 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800330a:	4b30      	ldr	r3, [pc, #192]	; (80033cc <HAL_RCC_OscConfig+0x2b4>)
 800330c:	2201      	movs	r2, #1
 800330e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003310:	f7fe fd70 	bl	8001df4 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003318:	f7fe fd6c 	bl	8001df4 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e164      	b.n	80035f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332a:	4b26      	ldr	r3, [pc, #152]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 800332c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0x200>
 8003336:	e015      	b.n	8003364 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003338:	4b24      	ldr	r3, [pc, #144]	; (80033cc <HAL_RCC_OscConfig+0x2b4>)
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333e:	f7fe fd59 	bl	8001df4 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003346:	f7fe fd55 	bl	8001df4 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e14d      	b.n	80035f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003358:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 800335a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f0      	bne.n	8003346 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 80a0 	beq.w	80034b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003372:	2300      	movs	r3, #0
 8003374:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003376:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10f      	bne.n	80033a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	4a0e      	ldr	r2, [pc, #56]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 800338c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003390:	6413      	str	r3, [r2, #64]	; 0x40
 8003392:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <HAL_RCC_OscConfig+0x2ac>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800339e:	2301      	movs	r3, #1
 80033a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a2:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <HAL_RCC_OscConfig+0x2b8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d121      	bne.n	80033f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ae:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <HAL_RCC_OscConfig+0x2b8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a07      	ldr	r2, [pc, #28]	; (80033d0 <HAL_RCC_OscConfig+0x2b8>)
 80033b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ba:	f7fe fd1b 	bl	8001df4 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c0:	e011      	b.n	80033e6 <HAL_RCC_OscConfig+0x2ce>
 80033c2:	bf00      	nop
 80033c4:	40023800 	.word	0x40023800
 80033c8:	42470000 	.word	0x42470000
 80033cc:	42470e80 	.word	0x42470e80
 80033d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d4:	f7fe fd0e 	bl	8001df4 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e106      	b.n	80035f4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e6:	4b85      	ldr	r3, [pc, #532]	; (80035fc <HAL_RCC_OscConfig+0x4e4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d106      	bne.n	8003408 <HAL_RCC_OscConfig+0x2f0>
 80033fa:	4b81      	ldr	r3, [pc, #516]	; (8003600 <HAL_RCC_OscConfig+0x4e8>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	4a80      	ldr	r2, [pc, #512]	; (8003600 <HAL_RCC_OscConfig+0x4e8>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	6713      	str	r3, [r2, #112]	; 0x70
 8003406:	e01c      	b.n	8003442 <HAL_RCC_OscConfig+0x32a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b05      	cmp	r3, #5
 800340e:	d10c      	bne.n	800342a <HAL_RCC_OscConfig+0x312>
 8003410:	4b7b      	ldr	r3, [pc, #492]	; (8003600 <HAL_RCC_OscConfig+0x4e8>)
 8003412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003414:	4a7a      	ldr	r2, [pc, #488]	; (8003600 <HAL_RCC_OscConfig+0x4e8>)
 8003416:	f043 0304 	orr.w	r3, r3, #4
 800341a:	6713      	str	r3, [r2, #112]	; 0x70
 800341c:	4b78      	ldr	r3, [pc, #480]	; (8003600 <HAL_RCC_OscConfig+0x4e8>)
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	4a77      	ldr	r2, [pc, #476]	; (8003600 <HAL_RCC_OscConfig+0x4e8>)
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	6713      	str	r3, [r2, #112]	; 0x70
 8003428:	e00b      	b.n	8003442 <HAL_RCC_OscConfig+0x32a>
 800342a:	4b75      	ldr	r3, [pc, #468]	; (8003600 <HAL_RCC_OscConfig+0x4e8>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	4a74      	ldr	r2, [pc, #464]	; (8003600 <HAL_RCC_OscConfig+0x4e8>)
 8003430:	f023 0301 	bic.w	r3, r3, #1
 8003434:	6713      	str	r3, [r2, #112]	; 0x70
 8003436:	4b72      	ldr	r3, [pc, #456]	; (8003600 <HAL_RCC_OscConfig+0x4e8>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	4a71      	ldr	r2, [pc, #452]	; (8003600 <HAL_RCC_OscConfig+0x4e8>)
 800343c:	f023 0304 	bic.w	r3, r3, #4
 8003440:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d015      	beq.n	8003476 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344a:	f7fe fcd3 	bl	8001df4 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003450:	e00a      	b.n	8003468 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003452:	f7fe fccf 	bl	8001df4 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003460:	4293      	cmp	r3, r2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e0c5      	b.n	80035f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003468:	4b65      	ldr	r3, [pc, #404]	; (8003600 <HAL_RCC_OscConfig+0x4e8>)
 800346a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0ee      	beq.n	8003452 <HAL_RCC_OscConfig+0x33a>
 8003474:	e014      	b.n	80034a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003476:	f7fe fcbd 	bl	8001df4 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800347c:	e00a      	b.n	8003494 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800347e:	f7fe fcb9 	bl	8001df4 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	f241 3288 	movw	r2, #5000	; 0x1388
 800348c:	4293      	cmp	r3, r2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e0af      	b.n	80035f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003494:	4b5a      	ldr	r3, [pc, #360]	; (8003600 <HAL_RCC_OscConfig+0x4e8>)
 8003496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1ee      	bne.n	800347e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034a0:	7dfb      	ldrb	r3, [r7, #23]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d105      	bne.n	80034b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a6:	4b56      	ldr	r3, [pc, #344]	; (8003600 <HAL_RCC_OscConfig+0x4e8>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	4a55      	ldr	r2, [pc, #340]	; (8003600 <HAL_RCC_OscConfig+0x4e8>)
 80034ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 809b 	beq.w	80035f2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034bc:	4b50      	ldr	r3, [pc, #320]	; (8003600 <HAL_RCC_OscConfig+0x4e8>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 030c 	and.w	r3, r3, #12
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d05c      	beq.n	8003582 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d141      	bne.n	8003554 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d0:	4b4c      	ldr	r3, [pc, #304]	; (8003604 <HAL_RCC_OscConfig+0x4ec>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d6:	f7fe fc8d 	bl	8001df4 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034de:	f7fe fc89 	bl	8001df4 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e081      	b.n	80035f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f0:	4b43      	ldr	r3, [pc, #268]	; (8003600 <HAL_RCC_OscConfig+0x4e8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1f0      	bne.n	80034de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69da      	ldr	r2, [r3, #28]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	019b      	lsls	r3, r3, #6
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003512:	085b      	lsrs	r3, r3, #1
 8003514:	3b01      	subs	r3, #1
 8003516:	041b      	lsls	r3, r3, #16
 8003518:	431a      	orrs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	061b      	lsls	r3, r3, #24
 8003520:	4937      	ldr	r1, [pc, #220]	; (8003600 <HAL_RCC_OscConfig+0x4e8>)
 8003522:	4313      	orrs	r3, r2
 8003524:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003526:	4b37      	ldr	r3, [pc, #220]	; (8003604 <HAL_RCC_OscConfig+0x4ec>)
 8003528:	2201      	movs	r2, #1
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fe fc62 	bl	8001df4 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003534:	f7fe fc5e 	bl	8001df4 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e056      	b.n	80035f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003546:	4b2e      	ldr	r3, [pc, #184]	; (8003600 <HAL_RCC_OscConfig+0x4e8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCC_OscConfig+0x41c>
 8003552:	e04e      	b.n	80035f2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003554:	4b2b      	ldr	r3, [pc, #172]	; (8003604 <HAL_RCC_OscConfig+0x4ec>)
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355a:	f7fe fc4b 	bl	8001df4 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003562:	f7fe fc47 	bl	8001df4 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e03f      	b.n	80035f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003574:	4b22      	ldr	r3, [pc, #136]	; (8003600 <HAL_RCC_OscConfig+0x4e8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1f0      	bne.n	8003562 <HAL_RCC_OscConfig+0x44a>
 8003580:	e037      	b.n	80035f2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e032      	b.n	80035f4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800358e:	4b1c      	ldr	r3, [pc, #112]	; (8003600 <HAL_RCC_OscConfig+0x4e8>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d028      	beq.n	80035ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d121      	bne.n	80035ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d11a      	bne.n	80035ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035be:	4013      	ands	r3, r2
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035c4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d111      	bne.n	80035ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d4:	085b      	lsrs	r3, r3, #1
 80035d6:	3b01      	subs	r3, #1
 80035d8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035da:	429a      	cmp	r2, r3
 80035dc:	d107      	bne.n	80035ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d001      	beq.n	80035f2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40007000 	.word	0x40007000
 8003600:	40023800 	.word	0x40023800
 8003604:	42470060 	.word	0x42470060

08003608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0cc      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800361c:	4b68      	ldr	r3, [pc, #416]	; (80037c0 <HAL_RCC_ClockConfig+0x1b8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d90c      	bls.n	8003644 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362a:	4b65      	ldr	r3, [pc, #404]	; (80037c0 <HAL_RCC_ClockConfig+0x1b8>)
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003632:	4b63      	ldr	r3, [pc, #396]	; (80037c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d001      	beq.n	8003644 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0b8      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d020      	beq.n	8003692 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800365c:	4b59      	ldr	r3, [pc, #356]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	4a58      	ldr	r2, [pc, #352]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003666:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003674:	4b53      	ldr	r3, [pc, #332]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	4a52      	ldr	r2, [pc, #328]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800367e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003680:	4b50      	ldr	r3, [pc, #320]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	494d      	ldr	r1, [pc, #308]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	4313      	orrs	r3, r2
 8003690:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d044      	beq.n	8003728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d107      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a6:	4b47      	ldr	r3, [pc, #284]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d119      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e07f      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d003      	beq.n	80036c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d107      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c6:	4b3f      	ldr	r3, [pc, #252]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e06f      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d6:	4b3b      	ldr	r3, [pc, #236]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e067      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036e6:	4b37      	ldr	r3, [pc, #220]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f023 0203 	bic.w	r2, r3, #3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	4934      	ldr	r1, [pc, #208]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036f8:	f7fe fb7c 	bl	8001df4 <HAL_GetTick>
 80036fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fe:	e00a      	b.n	8003716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003700:	f7fe fb78 	bl	8001df4 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f241 3288 	movw	r2, #5000	; 0x1388
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e04f      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003716:	4b2b      	ldr	r3, [pc, #172]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 020c 	and.w	r2, r3, #12
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	429a      	cmp	r2, r3
 8003726:	d1eb      	bne.n	8003700 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003728:	4b25      	ldr	r3, [pc, #148]	; (80037c0 <HAL_RCC_ClockConfig+0x1b8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d20c      	bcs.n	8003750 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800373e:	4b20      	ldr	r3, [pc, #128]	; (80037c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d001      	beq.n	8003750 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e032      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	d008      	beq.n	800376e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800375c:	4b19      	ldr	r3, [pc, #100]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	4916      	ldr	r1, [pc, #88]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	4313      	orrs	r3, r2
 800376c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b00      	cmp	r3, #0
 8003778:	d009      	beq.n	800378e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800377a:	4b12      	ldr	r3, [pc, #72]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	490e      	ldr	r1, [pc, #56]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	4313      	orrs	r3, r2
 800378c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800378e:	f000 f821 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8003792:	4602      	mov	r2, r0
 8003794:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	091b      	lsrs	r3, r3, #4
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	490a      	ldr	r1, [pc, #40]	; (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 80037a0:	5ccb      	ldrb	r3, [r1, r3]
 80037a2:	fa22 f303 	lsr.w	r3, r2, r3
 80037a6:	4a09      	ldr	r2, [pc, #36]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 80037a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037aa:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <HAL_RCC_ClockConfig+0x1c8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fe fadc 	bl	8001d6c <HAL_InitTick>

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40023c00 	.word	0x40023c00
 80037c4:	40023800 	.word	0x40023800
 80037c8:	08006910 	.word	0x08006910
 80037cc:	20000010 	.word	0x20000010
 80037d0:	20000014 	.word	0x20000014

080037d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037dc:	2300      	movs	r3, #0
 80037de:	607b      	str	r3, [r7, #4]
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	2300      	movs	r3, #0
 80037e6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037ec:	4b67      	ldr	r3, [pc, #412]	; (800398c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 030c 	and.w	r3, r3, #12
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d00d      	beq.n	8003814 <HAL_RCC_GetSysClockFreq+0x40>
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	f200 80bd 	bhi.w	8003978 <HAL_RCC_GetSysClockFreq+0x1a4>
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <HAL_RCC_GetSysClockFreq+0x34>
 8003802:	2b04      	cmp	r3, #4
 8003804:	d003      	beq.n	800380e <HAL_RCC_GetSysClockFreq+0x3a>
 8003806:	e0b7      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003808:	4b61      	ldr	r3, [pc, #388]	; (8003990 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800380a:	60bb      	str	r3, [r7, #8]
       break;
 800380c:	e0b7      	b.n	800397e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800380e:	4b61      	ldr	r3, [pc, #388]	; (8003994 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003810:	60bb      	str	r3, [r7, #8]
      break;
 8003812:	e0b4      	b.n	800397e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003814:	4b5d      	ldr	r3, [pc, #372]	; (800398c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800381c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800381e:	4b5b      	ldr	r3, [pc, #364]	; (800398c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d04d      	beq.n	80038c6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800382a:	4b58      	ldr	r3, [pc, #352]	; (800398c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	099b      	lsrs	r3, r3, #6
 8003830:	461a      	mov	r2, r3
 8003832:	f04f 0300 	mov.w	r3, #0
 8003836:	f240 10ff 	movw	r0, #511	; 0x1ff
 800383a:	f04f 0100 	mov.w	r1, #0
 800383e:	ea02 0800 	and.w	r8, r2, r0
 8003842:	ea03 0901 	and.w	r9, r3, r1
 8003846:	4640      	mov	r0, r8
 8003848:	4649      	mov	r1, r9
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	014b      	lsls	r3, r1, #5
 8003854:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003858:	0142      	lsls	r2, r0, #5
 800385a:	4610      	mov	r0, r2
 800385c:	4619      	mov	r1, r3
 800385e:	ebb0 0008 	subs.w	r0, r0, r8
 8003862:	eb61 0109 	sbc.w	r1, r1, r9
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	018b      	lsls	r3, r1, #6
 8003870:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003874:	0182      	lsls	r2, r0, #6
 8003876:	1a12      	subs	r2, r2, r0
 8003878:	eb63 0301 	sbc.w	r3, r3, r1
 800387c:	f04f 0000 	mov.w	r0, #0
 8003880:	f04f 0100 	mov.w	r1, #0
 8003884:	00d9      	lsls	r1, r3, #3
 8003886:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800388a:	00d0      	lsls	r0, r2, #3
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	eb12 0208 	adds.w	r2, r2, r8
 8003894:	eb43 0309 	adc.w	r3, r3, r9
 8003898:	f04f 0000 	mov.w	r0, #0
 800389c:	f04f 0100 	mov.w	r1, #0
 80038a0:	0259      	lsls	r1, r3, #9
 80038a2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80038a6:	0250      	lsls	r0, r2, #9
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4610      	mov	r0, r2
 80038ae:	4619      	mov	r1, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	461a      	mov	r2, r3
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	f7fc fcda 	bl	8000270 <__aeabi_uldivmod>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4613      	mov	r3, r2
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	e04a      	b.n	800395c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038c6:	4b31      	ldr	r3, [pc, #196]	; (800398c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	099b      	lsrs	r3, r3, #6
 80038cc:	461a      	mov	r2, r3
 80038ce:	f04f 0300 	mov.w	r3, #0
 80038d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038d6:	f04f 0100 	mov.w	r1, #0
 80038da:	ea02 0400 	and.w	r4, r2, r0
 80038de:	ea03 0501 	and.w	r5, r3, r1
 80038e2:	4620      	mov	r0, r4
 80038e4:	4629      	mov	r1, r5
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	014b      	lsls	r3, r1, #5
 80038f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038f4:	0142      	lsls	r2, r0, #5
 80038f6:	4610      	mov	r0, r2
 80038f8:	4619      	mov	r1, r3
 80038fa:	1b00      	subs	r0, r0, r4
 80038fc:	eb61 0105 	sbc.w	r1, r1, r5
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	018b      	lsls	r3, r1, #6
 800390a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800390e:	0182      	lsls	r2, r0, #6
 8003910:	1a12      	subs	r2, r2, r0
 8003912:	eb63 0301 	sbc.w	r3, r3, r1
 8003916:	f04f 0000 	mov.w	r0, #0
 800391a:	f04f 0100 	mov.w	r1, #0
 800391e:	00d9      	lsls	r1, r3, #3
 8003920:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003924:	00d0      	lsls	r0, r2, #3
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	1912      	adds	r2, r2, r4
 800392c:	eb45 0303 	adc.w	r3, r5, r3
 8003930:	f04f 0000 	mov.w	r0, #0
 8003934:	f04f 0100 	mov.w	r1, #0
 8003938:	0299      	lsls	r1, r3, #10
 800393a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800393e:	0290      	lsls	r0, r2, #10
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4610      	mov	r0, r2
 8003946:	4619      	mov	r1, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	461a      	mov	r2, r3
 800394c:	f04f 0300 	mov.w	r3, #0
 8003950:	f7fc fc8e 	bl	8000270 <__aeabi_uldivmod>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4613      	mov	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800395c:	4b0b      	ldr	r3, [pc, #44]	; (800398c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	0c1b      	lsrs	r3, r3, #16
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	3301      	adds	r3, #1
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	fbb2 f3f3 	udiv	r3, r2, r3
 8003974:	60bb      	str	r3, [r7, #8]
      break;
 8003976:	e002      	b.n	800397e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800397a:	60bb      	str	r3, [r7, #8]
      break;
 800397c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800397e:	68bb      	ldr	r3, [r7, #8]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800398a:	bf00      	nop
 800398c:	40023800 	.word	0x40023800
 8003990:	00f42400 	.word	0x00f42400
 8003994:	007a1200 	.word	0x007a1200

08003998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800399c:	4b03      	ldr	r3, [pc, #12]	; (80039ac <HAL_RCC_GetHCLKFreq+0x14>)
 800399e:	681b      	ldr	r3, [r3, #0]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	20000010 	.word	0x20000010

080039b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039b4:	f7ff fff0 	bl	8003998 <HAL_RCC_GetHCLKFreq>
 80039b8:	4602      	mov	r2, r0
 80039ba:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	0a9b      	lsrs	r3, r3, #10
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	4903      	ldr	r1, [pc, #12]	; (80039d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039c6:	5ccb      	ldrb	r3, [r1, r3]
 80039c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40023800 	.word	0x40023800
 80039d4:	08006920 	.word	0x08006920

080039d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039dc:	f7ff ffdc 	bl	8003998 <HAL_RCC_GetHCLKFreq>
 80039e0:	4602      	mov	r2, r0
 80039e2:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	0b5b      	lsrs	r3, r3, #13
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	4903      	ldr	r1, [pc, #12]	; (80039fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ee:	5ccb      	ldrb	r3, [r1, r3]
 80039f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40023800 	.word	0x40023800
 80039fc:	08006920 	.word	0x08006920

08003a00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e07b      	b.n	8003b0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d108      	bne.n	8003a2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a22:	d009      	beq.n	8003a38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	61da      	str	r2, [r3, #28]
 8003a2a:	e005      	b.n	8003a38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d106      	bne.n	8003a58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fd fea6 	bl	80017a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abc:	ea42 0103 	orr.w	r1, r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	0c1b      	lsrs	r3, r3, #16
 8003ad6:	f003 0104 	and.w	r1, r3, #4
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	f003 0210 	and.w	r2, r3, #16
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69da      	ldr	r2, [r3, #28]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003af8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b088      	sub	sp, #32
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	60f8      	str	r0, [r7, #12]
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	603b      	str	r3, [r7, #0]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <HAL_SPI_Transmit+0x22>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e126      	b.n	8003d82 <HAL_SPI_Transmit+0x270>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b3c:	f7fe f95a 	bl	8001df4 <HAL_GetTick>
 8003b40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b42:	88fb      	ldrh	r3, [r7, #6]
 8003b44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d002      	beq.n	8003b58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b52:	2302      	movs	r3, #2
 8003b54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b56:	e10b      	b.n	8003d70 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <HAL_SPI_Transmit+0x52>
 8003b5e:	88fb      	ldrh	r3, [r7, #6]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d102      	bne.n	8003b6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b68:	e102      	b.n	8003d70 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2203      	movs	r2, #3
 8003b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	88fa      	ldrh	r2, [r7, #6]
 8003b82:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	88fa      	ldrh	r2, [r7, #6]
 8003b88:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb0:	d10f      	bne.n	8003bd2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bdc:	2b40      	cmp	r3, #64	; 0x40
 8003bde:	d007      	beq.n	8003bf0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf8:	d14b      	bne.n	8003c92 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <HAL_SPI_Transmit+0xf6>
 8003c02:	8afb      	ldrh	r3, [r7, #22]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d13e      	bne.n	8003c86 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	881a      	ldrh	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c18:	1c9a      	adds	r2, r3, #2
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c2c:	e02b      	b.n	8003c86 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d112      	bne.n	8003c62 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	881a      	ldrh	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	1c9a      	adds	r2, r3, #2
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c60:	e011      	b.n	8003c86 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c62:	f7fe f8c7 	bl	8001df4 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d803      	bhi.n	8003c7a <HAL_SPI_Transmit+0x168>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c78:	d102      	bne.n	8003c80 <HAL_SPI_Transmit+0x16e>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d102      	bne.n	8003c86 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c84:	e074      	b.n	8003d70 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1ce      	bne.n	8003c2e <HAL_SPI_Transmit+0x11c>
 8003c90:	e04c      	b.n	8003d2c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <HAL_SPI_Transmit+0x18e>
 8003c9a:	8afb      	ldrh	r3, [r7, #22]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d140      	bne.n	8003d22 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	330c      	adds	r3, #12
 8003caa:	7812      	ldrb	r2, [r2, #0]
 8003cac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003cc6:	e02c      	b.n	8003d22 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d113      	bne.n	8003cfe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	330c      	adds	r3, #12
 8003ce0:	7812      	ldrb	r2, [r2, #0]
 8003ce2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	86da      	strh	r2, [r3, #54]	; 0x36
 8003cfc:	e011      	b.n	8003d22 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cfe:	f7fe f879 	bl	8001df4 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d803      	bhi.n	8003d16 <HAL_SPI_Transmit+0x204>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d14:	d102      	bne.n	8003d1c <HAL_SPI_Transmit+0x20a>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d102      	bne.n	8003d22 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d20:	e026      	b.n	8003d70 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1cd      	bne.n	8003cc8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	6839      	ldr	r1, [r7, #0]
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 fbcb 	bl	80044cc <SPI_EndRxTxTransaction>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d002      	beq.n	8003d42 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10a      	bne.n	8003d60 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	613b      	str	r3, [r7, #16]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	613b      	str	r3, [r7, #16]
 8003d5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d002      	beq.n	8003d6e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	77fb      	strb	r3, [r7, #31]
 8003d6c:	e000      	b.n	8003d70 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003d6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d80:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3720      	adds	r7, #32
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b088      	sub	sp, #32
 8003d8e:	af02      	add	r7, sp, #8
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	603b      	str	r3, [r7, #0]
 8003d96:	4613      	mov	r3, r2
 8003d98:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003da6:	d112      	bne.n	8003dce <HAL_SPI_Receive+0x44>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10e      	bne.n	8003dce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2204      	movs	r2, #4
 8003db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003db8:	88fa      	ldrh	r2, [r7, #6]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	68b9      	ldr	r1, [r7, #8]
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f8f1 	bl	8003fac <HAL_SPI_TransmitReceive>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	e0ea      	b.n	8003fa4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_SPI_Receive+0x52>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e0e3      	b.n	8003fa4 <HAL_SPI_Receive+0x21a>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003de4:	f7fe f806 	bl	8001df4 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d002      	beq.n	8003dfc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003df6:	2302      	movs	r3, #2
 8003df8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dfa:	e0ca      	b.n	8003f92 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <HAL_SPI_Receive+0x7e>
 8003e02:	88fb      	ldrh	r3, [r7, #6]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d102      	bne.n	8003e0e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e0c:	e0c1      	b.n	8003f92 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2204      	movs	r2, #4
 8003e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	88fa      	ldrh	r2, [r7, #6]
 8003e26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	88fa      	ldrh	r2, [r7, #6]
 8003e2c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e54:	d10f      	bne.n	8003e76 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e74:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	2b40      	cmp	r3, #64	; 0x40
 8003e82:	d007      	beq.n	8003e94 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e92:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d162      	bne.n	8003f62 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e9c:	e02e      	b.n	8003efc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d115      	bne.n	8003ed8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f103 020c 	add.w	r2, r3, #12
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	7812      	ldrb	r2, [r2, #0]
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	1c5a      	adds	r2, r3, #1
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ed6:	e011      	b.n	8003efc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ed8:	f7fd ff8c 	bl	8001df4 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d803      	bhi.n	8003ef0 <HAL_SPI_Receive+0x166>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eee:	d102      	bne.n	8003ef6 <HAL_SPI_Receive+0x16c>
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d102      	bne.n	8003efc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003efa:	e04a      	b.n	8003f92 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1cb      	bne.n	8003e9e <HAL_SPI_Receive+0x114>
 8003f06:	e031      	b.n	8003f6c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d113      	bne.n	8003f3e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	b292      	uxth	r2, r2
 8003f22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	1c9a      	adds	r2, r3, #2
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f3c:	e011      	b.n	8003f62 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f3e:	f7fd ff59 	bl	8001df4 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d803      	bhi.n	8003f56 <HAL_SPI_Receive+0x1cc>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f54:	d102      	bne.n	8003f5c <HAL_SPI_Receive+0x1d2>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d102      	bne.n	8003f62 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f60:	e017      	b.n	8003f92 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1cd      	bne.n	8003f08 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	6839      	ldr	r1, [r7, #0]
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 fa45 	bl	8004400 <SPI_EndRxTransaction>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	75fb      	strb	r3, [r7, #23]
 8003f8e:	e000      	b.n	8003f92 <HAL_SPI_Receive+0x208>
  }

error :
 8003f90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08c      	sub	sp, #48	; 0x30
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
 8003fb8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d101      	bne.n	8003fd2 <HAL_SPI_TransmitReceive+0x26>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	e18a      	b.n	80042e8 <HAL_SPI_TransmitReceive+0x33c>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fda:	f7fd ff0b 	bl	8001df4 <HAL_GetTick>
 8003fde:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003ff0:	887b      	ldrh	r3, [r7, #2]
 8003ff2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ff4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d00f      	beq.n	800401c <HAL_SPI_TransmitReceive+0x70>
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004002:	d107      	bne.n	8004014 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d103      	bne.n	8004014 <HAL_SPI_TransmitReceive+0x68>
 800400c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004010:	2b04      	cmp	r3, #4
 8004012:	d003      	beq.n	800401c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004014:	2302      	movs	r3, #2
 8004016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800401a:	e15b      	b.n	80042d4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d005      	beq.n	800402e <HAL_SPI_TransmitReceive+0x82>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <HAL_SPI_TransmitReceive+0x82>
 8004028:	887b      	ldrh	r3, [r7, #2]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d103      	bne.n	8004036 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004034:	e14e      	b.n	80042d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b04      	cmp	r3, #4
 8004040:	d003      	beq.n	800404a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2205      	movs	r2, #5
 8004046:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	887a      	ldrh	r2, [r7, #2]
 800405a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	887a      	ldrh	r2, [r7, #2]
 8004060:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	887a      	ldrh	r2, [r7, #2]
 800406c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	887a      	ldrh	r2, [r7, #2]
 8004072:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408a:	2b40      	cmp	r3, #64	; 0x40
 800408c:	d007      	beq.n	800409e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800409c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040a6:	d178      	bne.n	800419a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <HAL_SPI_TransmitReceive+0x10a>
 80040b0:	8b7b      	ldrh	r3, [r7, #26]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d166      	bne.n	8004184 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	881a      	ldrh	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	1c9a      	adds	r2, r3, #2
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040da:	e053      	b.n	8004184 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d11b      	bne.n	8004122 <HAL_SPI_TransmitReceive+0x176>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d016      	beq.n	8004122 <HAL_SPI_TransmitReceive+0x176>
 80040f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d113      	bne.n	8004122 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	881a      	ldrh	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	1c9a      	adds	r2, r3, #2
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004114:	b29b      	uxth	r3, r3
 8004116:	3b01      	subs	r3, #1
 8004118:	b29a      	uxth	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b01      	cmp	r3, #1
 800412e:	d119      	bne.n	8004164 <HAL_SPI_TransmitReceive+0x1b8>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d014      	beq.n	8004164 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004144:	b292      	uxth	r2, r2
 8004146:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414c:	1c9a      	adds	r2, r3, #2
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004160:	2301      	movs	r3, #1
 8004162:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004164:	f7fd fe46 	bl	8001df4 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004170:	429a      	cmp	r2, r3
 8004172:	d807      	bhi.n	8004184 <HAL_SPI_TransmitReceive+0x1d8>
 8004174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417a:	d003      	beq.n	8004184 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004182:	e0a7      	b.n	80042d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1a6      	bne.n	80040dc <HAL_SPI_TransmitReceive+0x130>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1a1      	bne.n	80040dc <HAL_SPI_TransmitReceive+0x130>
 8004198:	e07c      	b.n	8004294 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <HAL_SPI_TransmitReceive+0x1fc>
 80041a2:	8b7b      	ldrh	r3, [r7, #26]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d16b      	bne.n	8004280 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	330c      	adds	r3, #12
 80041b2:	7812      	ldrb	r2, [r2, #0]
 80041b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041ce:	e057      	b.n	8004280 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d11c      	bne.n	8004218 <HAL_SPI_TransmitReceive+0x26c>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d017      	beq.n	8004218 <HAL_SPI_TransmitReceive+0x26c>
 80041e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d114      	bne.n	8004218 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	330c      	adds	r3, #12
 80041f8:	7812      	ldrb	r2, [r2, #0]
 80041fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800420a:	b29b      	uxth	r3, r3
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b01      	cmp	r3, #1
 8004224:	d119      	bne.n	800425a <HAL_SPI_TransmitReceive+0x2ae>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800422a:	b29b      	uxth	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d014      	beq.n	800425a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004256:	2301      	movs	r3, #1
 8004258:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800425a:	f7fd fdcb 	bl	8001df4 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004266:	429a      	cmp	r2, r3
 8004268:	d803      	bhi.n	8004272 <HAL_SPI_TransmitReceive+0x2c6>
 800426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004270:	d102      	bne.n	8004278 <HAL_SPI_TransmitReceive+0x2cc>
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	2b00      	cmp	r3, #0
 8004276:	d103      	bne.n	8004280 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800427e:	e029      	b.n	80042d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1a2      	bne.n	80041d0 <HAL_SPI_TransmitReceive+0x224>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d19d      	bne.n	80041d0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004296:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f917 	bl	80044cc <SPI_EndRxTxTransaction>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d006      	beq.n	80042b2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2220      	movs	r2, #32
 80042ae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80042b0:	e010      	b.n	80042d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10b      	bne.n	80042d2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042ba:	2300      	movs	r3, #0
 80042bc:	617b      	str	r3, [r7, #20]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	617b      	str	r3, [r7, #20]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	e000      	b.n	80042d4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80042d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3730      	adds	r7, #48	; 0x30
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004300:	f7fd fd78 	bl	8001df4 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	4413      	add	r3, r2
 800430e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004310:	f7fd fd70 	bl	8001df4 <HAL_GetTick>
 8004314:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004316:	4b39      	ldr	r3, [pc, #228]	; (80043fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	015b      	lsls	r3, r3, #5
 800431c:	0d1b      	lsrs	r3, r3, #20
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	fb02 f303 	mul.w	r3, r2, r3
 8004324:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004326:	e054      	b.n	80043d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432e:	d050      	beq.n	80043d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004330:	f7fd fd60 	bl	8001df4 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	69fa      	ldr	r2, [r7, #28]
 800433c:	429a      	cmp	r2, r3
 800433e:	d902      	bls.n	8004346 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d13d      	bne.n	80043c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004354:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800435e:	d111      	bne.n	8004384 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004368:	d004      	beq.n	8004374 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004372:	d107      	bne.n	8004384 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004382:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800438c:	d10f      	bne.n	80043ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e017      	b.n	80043f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	4013      	ands	r3, r2
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	429a      	cmp	r2, r3
 80043e0:	bf0c      	ite	eq
 80043e2:	2301      	moveq	r3, #1
 80043e4:	2300      	movne	r3, #0
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	461a      	mov	r2, r3
 80043ea:	79fb      	ldrb	r3, [r7, #7]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d19b      	bne.n	8004328 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3720      	adds	r7, #32
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20000010 	.word	0x20000010

08004400 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004414:	d111      	bne.n	800443a <SPI_EndRxTransaction+0x3a>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800441e:	d004      	beq.n	800442a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004428:	d107      	bne.n	800443a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004438:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004442:	d12a      	bne.n	800449a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444c:	d012      	beq.n	8004474 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2200      	movs	r2, #0
 8004456:	2180      	movs	r1, #128	; 0x80
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f7ff ff49 	bl	80042f0 <SPI_WaitFlagStateUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d02d      	beq.n	80044c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004468:	f043 0220 	orr.w	r2, r3, #32
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e026      	b.n	80044c2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2200      	movs	r2, #0
 800447c:	2101      	movs	r1, #1
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f7ff ff36 	bl	80042f0 <SPI_WaitFlagStateUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d01a      	beq.n	80044c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448e:	f043 0220 	orr.w	r2, r3, #32
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e013      	b.n	80044c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2200      	movs	r2, #0
 80044a2:	2101      	movs	r1, #1
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f7ff ff23 	bl	80042f0 <SPI_WaitFlagStateUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d007      	beq.n	80044c0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b4:	f043 0220 	orr.w	r2, r3, #32
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e000      	b.n	80044c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80044d8:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <SPI_EndRxTxTransaction+0x7c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1b      	ldr	r2, [pc, #108]	; (800454c <SPI_EndRxTxTransaction+0x80>)
 80044de:	fba2 2303 	umull	r2, r3, r2, r3
 80044e2:	0d5b      	lsrs	r3, r3, #21
 80044e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044e8:	fb02 f303 	mul.w	r3, r2, r3
 80044ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044f6:	d112      	bne.n	800451e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2200      	movs	r2, #0
 8004500:	2180      	movs	r1, #128	; 0x80
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f7ff fef4 	bl	80042f0 <SPI_WaitFlagStateUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d016      	beq.n	800453c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004512:	f043 0220 	orr.w	r2, r3, #32
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e00f      	b.n	800453e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00a      	beq.n	800453a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	3b01      	subs	r3, #1
 8004528:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004534:	2b80      	cmp	r3, #128	; 0x80
 8004536:	d0f2      	beq.n	800451e <SPI_EndRxTxTransaction+0x52>
 8004538:	e000      	b.n	800453c <SPI_EndRxTxTransaction+0x70>
        break;
 800453a:	bf00      	nop
  }

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	20000010 	.word	0x20000010
 800454c:	165e9f81 	.word	0x165e9f81

08004550 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e034      	b.n	80045d0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f7fc f996 	bl	80008ac <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	3308      	adds	r3, #8
 8004588:	4619      	mov	r1, r3
 800458a:	4610      	mov	r0, r2
 800458c:	f001 fc6e 	bl	8005e6c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	461a      	mov	r2, r3
 800459a:	68b9      	ldr	r1, [r7, #8]
 800459c:	f001 fcb8 	bl	8005f10 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6858      	ldr	r0, [r3, #4]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	f001 fced 	bl	8005f8c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	6892      	ldr	r2, [r2, #8]
 80045ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	6892      	ldr	r2, [r2, #8]
 80045c6:	f041 0101 	orr.w	r1, r1, #1
 80045ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e041      	b.n	800466e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d106      	bne.n	8004604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fd fa12 	bl	8001a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3304      	adds	r3, #4
 8004614:	4619      	mov	r1, r3
 8004616:	4610      	mov	r0, r2
 8004618:	f000 fa96 	bl	8004b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	d001      	beq.n	8004690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e04e      	b.n	800472e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0201 	orr.w	r2, r2, #1
 80046a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a23      	ldr	r2, [pc, #140]	; (800473c <HAL_TIM_Base_Start_IT+0xc4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d022      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0x80>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ba:	d01d      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0x80>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1f      	ldr	r2, [pc, #124]	; (8004740 <HAL_TIM_Base_Start_IT+0xc8>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d018      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0x80>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1e      	ldr	r2, [pc, #120]	; (8004744 <HAL_TIM_Base_Start_IT+0xcc>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d013      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0x80>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a1c      	ldr	r2, [pc, #112]	; (8004748 <HAL_TIM_Base_Start_IT+0xd0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00e      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0x80>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1b      	ldr	r2, [pc, #108]	; (800474c <HAL_TIM_Base_Start_IT+0xd4>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d009      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0x80>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a19      	ldr	r2, [pc, #100]	; (8004750 <HAL_TIM_Base_Start_IT+0xd8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d004      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0x80>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a18      	ldr	r2, [pc, #96]	; (8004754 <HAL_TIM_Base_Start_IT+0xdc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d111      	bne.n	800471c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b06      	cmp	r3, #6
 8004708:	d010      	beq.n	800472c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0201 	orr.w	r2, r2, #1
 8004718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800471a:	e007      	b.n	800472c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40010000 	.word	0x40010000
 8004740:	40000400 	.word	0x40000400
 8004744:	40000800 	.word	0x40000800
 8004748:	40000c00 	.word	0x40000c00
 800474c:	40010400 	.word	0x40010400
 8004750:	40014000 	.word	0x40014000
 8004754:	40001800 	.word	0x40001800

08004758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b02      	cmp	r3, #2
 800476c:	d122      	bne.n	80047b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b02      	cmp	r3, #2
 800477a:	d11b      	bne.n	80047b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f06f 0202 	mvn.w	r2, #2
 8004784:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f9b5 	bl	8004b0a <HAL_TIM_IC_CaptureCallback>
 80047a0:	e005      	b.n	80047ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f9a7 	bl	8004af6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f9b8 	bl	8004b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f003 0304 	and.w	r3, r3, #4
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d122      	bne.n	8004808 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b04      	cmp	r3, #4
 80047ce:	d11b      	bne.n	8004808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0204 	mvn.w	r2, #4
 80047d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2202      	movs	r2, #2
 80047de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f98b 	bl	8004b0a <HAL_TIM_IC_CaptureCallback>
 80047f4:	e005      	b.n	8004802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f97d 	bl	8004af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f98e 	bl	8004b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b08      	cmp	r3, #8
 8004814:	d122      	bne.n	800485c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	2b08      	cmp	r3, #8
 8004822:	d11b      	bne.n	800485c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0208 	mvn.w	r2, #8
 800482c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2204      	movs	r2, #4
 8004832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f961 	bl	8004b0a <HAL_TIM_IC_CaptureCallback>
 8004848:	e005      	b.n	8004856 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f953 	bl	8004af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f964 	bl	8004b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f003 0310 	and.w	r3, r3, #16
 8004866:	2b10      	cmp	r3, #16
 8004868:	d122      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	2b10      	cmp	r3, #16
 8004876:	d11b      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f06f 0210 	mvn.w	r2, #16
 8004880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2208      	movs	r2, #8
 8004886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f937 	bl	8004b0a <HAL_TIM_IC_CaptureCallback>
 800489c:	e005      	b.n	80048aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f929 	bl	8004af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f93a 	bl	8004b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d10e      	bne.n	80048dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d107      	bne.n	80048dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f06f 0201 	mvn.w	r2, #1
 80048d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7fc fe96 	bl	8001608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e6:	2b80      	cmp	r3, #128	; 0x80
 80048e8:	d10e      	bne.n	8004908 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f4:	2b80      	cmp	r3, #128	; 0x80
 80048f6:	d107      	bne.n	8004908 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fae0 	bl	8004ec8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004912:	2b40      	cmp	r3, #64	; 0x40
 8004914:	d10e      	bne.n	8004934 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004920:	2b40      	cmp	r3, #64	; 0x40
 8004922:	d107      	bne.n	8004934 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800492c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f8ff 	bl	8004b32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b20      	cmp	r3, #32
 8004940:	d10e      	bne.n	8004960 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f003 0320 	and.w	r3, r3, #32
 800494c:	2b20      	cmp	r3, #32
 800494e:	d107      	bne.n	8004960 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0220 	mvn.w	r2, #32
 8004958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 faaa 	bl	8004eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004960:	bf00      	nop
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800497c:	2b01      	cmp	r3, #1
 800497e:	d101      	bne.n	8004984 <HAL_TIM_ConfigClockSource+0x1c>
 8004980:	2302      	movs	r3, #2
 8004982:	e0b4      	b.n	8004aee <HAL_TIM_ConfigClockSource+0x186>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049bc:	d03e      	beq.n	8004a3c <HAL_TIM_ConfigClockSource+0xd4>
 80049be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049c2:	f200 8087 	bhi.w	8004ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80049c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ca:	f000 8086 	beq.w	8004ada <HAL_TIM_ConfigClockSource+0x172>
 80049ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d2:	d87f      	bhi.n	8004ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80049d4:	2b70      	cmp	r3, #112	; 0x70
 80049d6:	d01a      	beq.n	8004a0e <HAL_TIM_ConfigClockSource+0xa6>
 80049d8:	2b70      	cmp	r3, #112	; 0x70
 80049da:	d87b      	bhi.n	8004ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80049dc:	2b60      	cmp	r3, #96	; 0x60
 80049de:	d050      	beq.n	8004a82 <HAL_TIM_ConfigClockSource+0x11a>
 80049e0:	2b60      	cmp	r3, #96	; 0x60
 80049e2:	d877      	bhi.n	8004ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80049e4:	2b50      	cmp	r3, #80	; 0x50
 80049e6:	d03c      	beq.n	8004a62 <HAL_TIM_ConfigClockSource+0xfa>
 80049e8:	2b50      	cmp	r3, #80	; 0x50
 80049ea:	d873      	bhi.n	8004ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80049ec:	2b40      	cmp	r3, #64	; 0x40
 80049ee:	d058      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0x13a>
 80049f0:	2b40      	cmp	r3, #64	; 0x40
 80049f2:	d86f      	bhi.n	8004ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80049f4:	2b30      	cmp	r3, #48	; 0x30
 80049f6:	d064      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x15a>
 80049f8:	2b30      	cmp	r3, #48	; 0x30
 80049fa:	d86b      	bhi.n	8004ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80049fc:	2b20      	cmp	r3, #32
 80049fe:	d060      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8004a00:	2b20      	cmp	r3, #32
 8004a02:	d867      	bhi.n	8004ad4 <HAL_TIM_ConfigClockSource+0x16c>
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d05c      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8004a08:	2b10      	cmp	r3, #16
 8004a0a:	d05a      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8004a0c:	e062      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6818      	ldr	r0, [r3, #0]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	6899      	ldr	r1, [r3, #8]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f000 f9ad 	bl	8004d7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	609a      	str	r2, [r3, #8]
      break;
 8004a3a:	e04f      	b.n	8004adc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6818      	ldr	r0, [r3, #0]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	6899      	ldr	r1, [r3, #8]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f000 f996 	bl	8004d7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689a      	ldr	r2, [r3, #8]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a5e:	609a      	str	r2, [r3, #8]
      break;
 8004a60:	e03c      	b.n	8004adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6818      	ldr	r0, [r3, #0]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	6859      	ldr	r1, [r3, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f000 f90a 	bl	8004c88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2150      	movs	r1, #80	; 0x50
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 f963 	bl	8004d46 <TIM_ITRx_SetConfig>
      break;
 8004a80:	e02c      	b.n	8004adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6818      	ldr	r0, [r3, #0]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	6859      	ldr	r1, [r3, #4]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	f000 f929 	bl	8004ce6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2160      	movs	r1, #96	; 0x60
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 f953 	bl	8004d46 <TIM_ITRx_SetConfig>
      break;
 8004aa0:	e01c      	b.n	8004adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6859      	ldr	r1, [r3, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f000 f8ea 	bl	8004c88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2140      	movs	r1, #64	; 0x40
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 f943 	bl	8004d46 <TIM_ITRx_SetConfig>
      break;
 8004ac0:	e00c      	b.n	8004adc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4619      	mov	r1, r3
 8004acc:	4610      	mov	r0, r2
 8004ace:	f000 f93a 	bl	8004d46 <TIM_ITRx_SetConfig>
      break;
 8004ad2:	e003      	b.n	8004adc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ad8:	e000      	b.n	8004adc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ada:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
	...

08004b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a40      	ldr	r2, [pc, #256]	; (8004c5c <TIM_Base_SetConfig+0x114>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d013      	beq.n	8004b88 <TIM_Base_SetConfig+0x40>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b66:	d00f      	beq.n	8004b88 <TIM_Base_SetConfig+0x40>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a3d      	ldr	r2, [pc, #244]	; (8004c60 <TIM_Base_SetConfig+0x118>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d00b      	beq.n	8004b88 <TIM_Base_SetConfig+0x40>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a3c      	ldr	r2, [pc, #240]	; (8004c64 <TIM_Base_SetConfig+0x11c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d007      	beq.n	8004b88 <TIM_Base_SetConfig+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a3b      	ldr	r2, [pc, #236]	; (8004c68 <TIM_Base_SetConfig+0x120>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d003      	beq.n	8004b88 <TIM_Base_SetConfig+0x40>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a3a      	ldr	r2, [pc, #232]	; (8004c6c <TIM_Base_SetConfig+0x124>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d108      	bne.n	8004b9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a2f      	ldr	r2, [pc, #188]	; (8004c5c <TIM_Base_SetConfig+0x114>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d02b      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba8:	d027      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a2c      	ldr	r2, [pc, #176]	; (8004c60 <TIM_Base_SetConfig+0x118>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d023      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a2b      	ldr	r2, [pc, #172]	; (8004c64 <TIM_Base_SetConfig+0x11c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d01f      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a2a      	ldr	r2, [pc, #168]	; (8004c68 <TIM_Base_SetConfig+0x120>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d01b      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a29      	ldr	r2, [pc, #164]	; (8004c6c <TIM_Base_SetConfig+0x124>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d017      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a28      	ldr	r2, [pc, #160]	; (8004c70 <TIM_Base_SetConfig+0x128>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a27      	ldr	r2, [pc, #156]	; (8004c74 <TIM_Base_SetConfig+0x12c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00f      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a26      	ldr	r2, [pc, #152]	; (8004c78 <TIM_Base_SetConfig+0x130>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00b      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a25      	ldr	r2, [pc, #148]	; (8004c7c <TIM_Base_SetConfig+0x134>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d007      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a24      	ldr	r2, [pc, #144]	; (8004c80 <TIM_Base_SetConfig+0x138>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d003      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a23      	ldr	r2, [pc, #140]	; (8004c84 <TIM_Base_SetConfig+0x13c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d108      	bne.n	8004c0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a0a      	ldr	r2, [pc, #40]	; (8004c5c <TIM_Base_SetConfig+0x114>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d003      	beq.n	8004c40 <TIM_Base_SetConfig+0xf8>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a0c      	ldr	r2, [pc, #48]	; (8004c6c <TIM_Base_SetConfig+0x124>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d103      	bne.n	8004c48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	615a      	str	r2, [r3, #20]
}
 8004c4e:	bf00      	nop
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40010000 	.word	0x40010000
 8004c60:	40000400 	.word	0x40000400
 8004c64:	40000800 	.word	0x40000800
 8004c68:	40000c00 	.word	0x40000c00
 8004c6c:	40010400 	.word	0x40010400
 8004c70:	40014000 	.word	0x40014000
 8004c74:	40014400 	.word	0x40014400
 8004c78:	40014800 	.word	0x40014800
 8004c7c:	40001800 	.word	0x40001800
 8004c80:	40001c00 	.word	0x40001c00
 8004c84:	40002000 	.word	0x40002000

08004c88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	f023 0201 	bic.w	r2, r3, #1
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	011b      	lsls	r3, r3, #4
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f023 030a 	bic.w	r3, r3, #10
 8004cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	621a      	str	r2, [r3, #32]
}
 8004cda:	bf00      	nop
 8004cdc:	371c      	adds	r7, #28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b087      	sub	sp, #28
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	60f8      	str	r0, [r7, #12]
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	f023 0210 	bic.w	r2, r3, #16
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	031b      	lsls	r3, r3, #12
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	621a      	str	r2, [r3, #32]
}
 8004d3a:	bf00      	nop
 8004d3c:	371c      	adds	r7, #28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b085      	sub	sp, #20
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
 8004d4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f043 0307 	orr.w	r3, r3, #7
 8004d68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	609a      	str	r2, [r3, #8]
}
 8004d70:	bf00      	nop
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
 8004d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	021a      	lsls	r2, r3, #8
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	609a      	str	r2, [r3, #8]
}
 8004db0:	bf00      	nop
 8004db2:	371c      	adds	r7, #28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e05a      	b.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a21      	ldr	r2, [pc, #132]	; (8004e98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d022      	beq.n	8004e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e20:	d01d      	beq.n	8004e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a1d      	ldr	r2, [pc, #116]	; (8004e9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d018      	beq.n	8004e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a1b      	ldr	r2, [pc, #108]	; (8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a1a      	ldr	r2, [pc, #104]	; (8004ea4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00e      	beq.n	8004e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a18      	ldr	r2, [pc, #96]	; (8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d009      	beq.n	8004e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a17      	ldr	r2, [pc, #92]	; (8004eac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d004      	beq.n	8004e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a15      	ldr	r2, [pc, #84]	; (8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d10c      	bne.n	8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40010000 	.word	0x40010000
 8004e9c:	40000400 	.word	0x40000400
 8004ea0:	40000800 	.word	0x40000800
 8004ea4:	40000c00 	.word	0x40000c00
 8004ea8:	40010400 	.word	0x40010400
 8004eac:	40014000 	.word	0x40014000
 8004eb0:	40001800 	.word	0x40001800

08004eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e03f      	b.n	8004f6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d106      	bne.n	8004f08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7fc fe7c 	bl	8001c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2224      	movs	r2, #36	; 0x24
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 fddb 	bl	8005adc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	691a      	ldr	r2, [r3, #16]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695a      	ldr	r2, [r3, #20]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68da      	ldr	r2, [r3, #12]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b08a      	sub	sp, #40	; 0x28
 8004f7a:	af02      	add	r7, sp, #8
 8004f7c:	60f8      	str	r0, [r7, #12]
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	603b      	str	r3, [r7, #0]
 8004f82:	4613      	mov	r3, r2
 8004f84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b20      	cmp	r3, #32
 8004f94:	d17c      	bne.n	8005090 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <HAL_UART_Transmit+0x2c>
 8004f9c:	88fb      	ldrh	r3, [r7, #6]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e075      	b.n	8005092 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d101      	bne.n	8004fb4 <HAL_UART_Transmit+0x3e>
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	e06e      	b.n	8005092 <HAL_UART_Transmit+0x11c>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2221      	movs	r2, #33	; 0x21
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fca:	f7fc ff13 	bl	8001df4 <HAL_GetTick>
 8004fce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	88fa      	ldrh	r2, [r7, #6]
 8004fd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	88fa      	ldrh	r2, [r7, #6]
 8004fda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fe4:	d108      	bne.n	8004ff8 <HAL_UART_Transmit+0x82>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d104      	bne.n	8004ff8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	e003      	b.n	8005000 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005008:	e02a      	b.n	8005060 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2200      	movs	r2, #0
 8005012:	2180      	movs	r1, #128	; 0x80
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 fb1f 	bl	8005658 <UART_WaitOnFlagUntilTimeout>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e036      	b.n	8005092 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10b      	bne.n	8005042 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005038:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	3302      	adds	r3, #2
 800503e:	61bb      	str	r3, [r7, #24]
 8005040:	e007      	b.n	8005052 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	781a      	ldrb	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	3301      	adds	r3, #1
 8005050:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005064:	b29b      	uxth	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1cf      	bne.n	800500a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2200      	movs	r2, #0
 8005072:	2140      	movs	r1, #64	; 0x40
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 faef 	bl	8005658 <UART_WaitOnFlagUntilTimeout>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e006      	b.n	8005092 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2220      	movs	r2, #32
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800508c:	2300      	movs	r3, #0
 800508e:	e000      	b.n	8005092 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005090:	2302      	movs	r3, #2
  }
}
 8005092:	4618      	mov	r0, r3
 8005094:	3720      	adds	r7, #32
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	60f8      	str	r0, [r7, #12]
 80050a2:	60b9      	str	r1, [r7, #8]
 80050a4:	4613      	mov	r3, r2
 80050a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b20      	cmp	r3, #32
 80050b2:	d11d      	bne.n	80050f0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <HAL_UART_Receive_IT+0x26>
 80050ba:	88fb      	ldrh	r3, [r7, #6]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e016      	b.n	80050f2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d101      	bne.n	80050d2 <HAL_UART_Receive_IT+0x38>
 80050ce:	2302      	movs	r3, #2
 80050d0:	e00f      	b.n	80050f2 <HAL_UART_Receive_IT+0x58>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80050e0:	88fb      	ldrh	r3, [r7, #6]
 80050e2:	461a      	mov	r2, r3
 80050e4:	68b9      	ldr	r1, [r7, #8]
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 fb24 	bl	8005734 <UART_Start_Receive_IT>
 80050ec:	4603      	mov	r3, r0
 80050ee:	e000      	b.n	80050f2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80050f0:	2302      	movs	r3, #2
  }
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b0ba      	sub	sp, #232	; 0xe8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005122:	2300      	movs	r3, #0
 8005124:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005128:	2300      	movs	r3, #0
 800512a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800512e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800513a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10f      	bne.n	8005162 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005146:	f003 0320 	and.w	r3, r3, #32
 800514a:	2b00      	cmp	r3, #0
 800514c:	d009      	beq.n	8005162 <HAL_UART_IRQHandler+0x66>
 800514e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005152:	f003 0320 	and.w	r3, r3, #32
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fc03 	bl	8005966 <UART_Receive_IT>
      return;
 8005160:	e256      	b.n	8005610 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005162:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 80de 	beq.w	8005328 <HAL_UART_IRQHandler+0x22c>
 800516c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	d106      	bne.n	8005186 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800517c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 80d1 	beq.w	8005328 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00b      	beq.n	80051aa <HAL_UART_IRQHandler+0xae>
 8005192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519a:	2b00      	cmp	r3, #0
 800519c:	d005      	beq.n	80051aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	f043 0201 	orr.w	r2, r3, #1
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00b      	beq.n	80051ce <HAL_UART_IRQHandler+0xd2>
 80051b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d005      	beq.n	80051ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	f043 0202 	orr.w	r2, r3, #2
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00b      	beq.n	80051f2 <HAL_UART_IRQHandler+0xf6>
 80051da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d005      	beq.n	80051f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	f043 0204 	orr.w	r2, r3, #4
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80051f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d011      	beq.n	8005222 <HAL_UART_IRQHandler+0x126>
 80051fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005202:	f003 0320 	and.w	r3, r3, #32
 8005206:	2b00      	cmp	r3, #0
 8005208:	d105      	bne.n	8005216 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800520a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d005      	beq.n	8005222 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	f043 0208 	orr.w	r2, r3, #8
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 81ed 	beq.w	8005606 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800522c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005230:	f003 0320 	and.w	r3, r3, #32
 8005234:	2b00      	cmp	r3, #0
 8005236:	d008      	beq.n	800524a <HAL_UART_IRQHandler+0x14e>
 8005238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800523c:	f003 0320 	and.w	r3, r3, #32
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fb8e 	bl	8005966 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005254:	2b40      	cmp	r3, #64	; 0x40
 8005256:	bf0c      	ite	eq
 8005258:	2301      	moveq	r3, #1
 800525a:	2300      	movne	r3, #0
 800525c:	b2db      	uxtb	r3, r3
 800525e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	f003 0308 	and.w	r3, r3, #8
 800526a:	2b00      	cmp	r3, #0
 800526c:	d103      	bne.n	8005276 <HAL_UART_IRQHandler+0x17a>
 800526e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005272:	2b00      	cmp	r3, #0
 8005274:	d04f      	beq.n	8005316 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fa96 	bl	80057a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005286:	2b40      	cmp	r3, #64	; 0x40
 8005288:	d141      	bne.n	800530e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3314      	adds	r3, #20
 8005290:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005298:	e853 3f00 	ldrex	r3, [r3]
 800529c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80052a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3314      	adds	r3, #20
 80052b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80052b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80052ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80052c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80052c6:	e841 2300 	strex	r3, r2, [r1]
 80052ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80052ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1d9      	bne.n	800528a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d013      	beq.n	8005306 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	4a7d      	ldr	r2, [pc, #500]	; (80054d8 <HAL_UART_IRQHandler+0x3dc>)
 80052e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fc ff33 	bl	8002156 <HAL_DMA_Abort_IT>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d016      	beq.n	8005324 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005300:	4610      	mov	r0, r2
 8005302:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005304:	e00e      	b.n	8005324 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f990 	bl	800562c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800530c:	e00a      	b.n	8005324 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f98c 	bl	800562c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005314:	e006      	b.n	8005324 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f988 	bl	800562c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005322:	e170      	b.n	8005606 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005324:	bf00      	nop
    return;
 8005326:	e16e      	b.n	8005606 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532c:	2b01      	cmp	r3, #1
 800532e:	f040 814a 	bne.w	80055c6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005336:	f003 0310 	and.w	r3, r3, #16
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 8143 	beq.w	80055c6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005344:	f003 0310 	and.w	r3, r3, #16
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 813c 	beq.w	80055c6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800534e:	2300      	movs	r3, #0
 8005350:	60bb      	str	r3, [r7, #8]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	60bb      	str	r3, [r7, #8]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	60bb      	str	r3, [r7, #8]
 8005362:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536e:	2b40      	cmp	r3, #64	; 0x40
 8005370:	f040 80b4 	bne.w	80054dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005380:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 8140 	beq.w	800560a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800538e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005392:	429a      	cmp	r2, r3
 8005394:	f080 8139 	bcs.w	800560a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800539e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053aa:	f000 8088 	beq.w	80054be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	330c      	adds	r3, #12
 80053b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053bc:	e853 3f00 	ldrex	r3, [r3]
 80053c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80053c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	330c      	adds	r3, #12
 80053d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80053da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80053de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80053e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80053ea:	e841 2300 	strex	r3, r2, [r1]
 80053ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80053f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1d9      	bne.n	80053ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	3314      	adds	r3, #20
 8005400:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005404:	e853 3f00 	ldrex	r3, [r3]
 8005408:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800540a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800540c:	f023 0301 	bic.w	r3, r3, #1
 8005410:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3314      	adds	r3, #20
 800541a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800541e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005422:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005424:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005426:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800542a:	e841 2300 	strex	r3, r2, [r1]
 800542e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005430:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1e1      	bne.n	80053fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3314      	adds	r3, #20
 800543c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005440:	e853 3f00 	ldrex	r3, [r3]
 8005444:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800544c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3314      	adds	r3, #20
 8005456:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800545a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800545c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005460:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1e3      	bne.n	8005436 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2220      	movs	r2, #32
 8005472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	330c      	adds	r3, #12
 8005482:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005486:	e853 3f00 	ldrex	r3, [r3]
 800548a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800548c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800548e:	f023 0310 	bic.w	r3, r3, #16
 8005492:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	330c      	adds	r3, #12
 800549c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80054a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80054a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054a8:	e841 2300 	strex	r3, r2, [r1]
 80054ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e3      	bne.n	800547c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fc fddc 	bl	8002076 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	4619      	mov	r1, r3
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f8b6 	bl	8005640 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054d4:	e099      	b.n	800560a <HAL_UART_IRQHandler+0x50e>
 80054d6:	bf00      	nop
 80054d8:	0800586f 	.word	0x0800586f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 808b 	beq.w	800560e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80054f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 8086 	beq.w	800560e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	330c      	adds	r3, #12
 8005508:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550c:	e853 3f00 	ldrex	r3, [r3]
 8005510:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005514:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005518:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	330c      	adds	r3, #12
 8005522:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005526:	647a      	str	r2, [r7, #68]	; 0x44
 8005528:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800552c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800552e:	e841 2300 	strex	r3, r2, [r1]
 8005532:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1e3      	bne.n	8005502 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3314      	adds	r3, #20
 8005540:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	623b      	str	r3, [r7, #32]
   return(result);
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	f023 0301 	bic.w	r3, r3, #1
 8005550:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3314      	adds	r3, #20
 800555a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800555e:	633a      	str	r2, [r7, #48]	; 0x30
 8005560:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e3      	bne.n	800553a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2220      	movs	r2, #32
 8005576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	330c      	adds	r3, #12
 8005586:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	e853 3f00 	ldrex	r3, [r3]
 800558e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0310 	bic.w	r3, r3, #16
 8005596:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	330c      	adds	r3, #12
 80055a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80055a4:	61fa      	str	r2, [r7, #28]
 80055a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a8:	69b9      	ldr	r1, [r7, #24]
 80055aa:	69fa      	ldr	r2, [r7, #28]
 80055ac:	e841 2300 	strex	r3, r2, [r1]
 80055b0:	617b      	str	r3, [r7, #20]
   return(result);
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1e3      	bne.n	8005580 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055bc:	4619      	mov	r1, r3
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f83e 	bl	8005640 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055c4:	e023      	b.n	800560e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d009      	beq.n	80055e6 <HAL_UART_IRQHandler+0x4ea>
 80055d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f959 	bl	8005896 <UART_Transmit_IT>
    return;
 80055e4:	e014      	b.n	8005610 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80055e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00e      	beq.n	8005610 <HAL_UART_IRQHandler+0x514>
 80055f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d008      	beq.n	8005610 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f999 	bl	8005936 <UART_EndTransmit_IT>
    return;
 8005604:	e004      	b.n	8005610 <HAL_UART_IRQHandler+0x514>
    return;
 8005606:	bf00      	nop
 8005608:	e002      	b.n	8005610 <HAL_UART_IRQHandler+0x514>
      return;
 800560a:	bf00      	nop
 800560c:	e000      	b.n	8005610 <HAL_UART_IRQHandler+0x514>
      return;
 800560e:	bf00      	nop
  }
}
 8005610:	37e8      	adds	r7, #232	; 0xe8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop

08005618 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	460b      	mov	r3, r1
 800564a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b090      	sub	sp, #64	; 0x40
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	4613      	mov	r3, r2
 8005666:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005668:	e050      	b.n	800570c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800566a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800566c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005670:	d04c      	beq.n	800570c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005674:	2b00      	cmp	r3, #0
 8005676:	d007      	beq.n	8005688 <UART_WaitOnFlagUntilTimeout+0x30>
 8005678:	f7fc fbbc 	bl	8001df4 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005684:	429a      	cmp	r2, r3
 8005686:	d241      	bcs.n	800570c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	330c      	adds	r3, #12
 800568e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	e853 3f00 	ldrex	r3, [r3]
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800569e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	330c      	adds	r3, #12
 80056a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056a8:	637a      	str	r2, [r7, #52]	; 0x34
 80056aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056b0:	e841 2300 	strex	r3, r2, [r1]
 80056b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1e5      	bne.n	8005688 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3314      	adds	r3, #20
 80056c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	e853 3f00 	ldrex	r3, [r3]
 80056ca:	613b      	str	r3, [r7, #16]
   return(result);
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f023 0301 	bic.w	r3, r3, #1
 80056d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3314      	adds	r3, #20
 80056da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056dc:	623a      	str	r2, [r7, #32]
 80056de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e0:	69f9      	ldr	r1, [r7, #28]
 80056e2:	6a3a      	ldr	r2, [r7, #32]
 80056e4:	e841 2300 	strex	r3, r2, [r1]
 80056e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1e5      	bne.n	80056bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e00f      	b.n	800572c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	4013      	ands	r3, r2
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	429a      	cmp	r2, r3
 800571a:	bf0c      	ite	eq
 800571c:	2301      	moveq	r3, #1
 800571e:	2300      	movne	r3, #0
 8005720:	b2db      	uxtb	r3, r3
 8005722:	461a      	mov	r2, r3
 8005724:	79fb      	ldrb	r3, [r7, #7]
 8005726:	429a      	cmp	r2, r3
 8005728:	d09f      	beq.n	800566a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3740      	adds	r7, #64	; 0x40
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	4613      	mov	r3, r2
 8005740:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	88fa      	ldrh	r2, [r7, #6]
 800574c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	88fa      	ldrh	r2, [r7, #6]
 8005752:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2222      	movs	r2, #34	; 0x22
 800575e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68da      	ldr	r2, [r3, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005778:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695a      	ldr	r2, [r3, #20]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f042 0201 	orr.w	r2, r2, #1
 8005788:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f042 0220 	orr.w	r2, r2, #32
 8005798:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b095      	sub	sp, #84	; 0x54
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	330c      	adds	r3, #12
 80057b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ba:	e853 3f00 	ldrex	r3, [r3]
 80057be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	330c      	adds	r3, #12
 80057ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057d0:	643a      	str	r2, [r7, #64]	; 0x40
 80057d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057d8:	e841 2300 	strex	r3, r2, [r1]
 80057dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e5      	bne.n	80057b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3314      	adds	r3, #20
 80057ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	e853 3f00 	ldrex	r3, [r3]
 80057f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	f023 0301 	bic.w	r3, r3, #1
 80057fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3314      	adds	r3, #20
 8005802:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005804:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005806:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005808:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800580a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800580c:	e841 2300 	strex	r3, r2, [r1]
 8005810:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1e5      	bne.n	80057e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581c:	2b01      	cmp	r3, #1
 800581e:	d119      	bne.n	8005854 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	330c      	adds	r3, #12
 8005826:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	e853 3f00 	ldrex	r3, [r3]
 800582e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f023 0310 	bic.w	r3, r3, #16
 8005836:	647b      	str	r3, [r7, #68]	; 0x44
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	330c      	adds	r3, #12
 800583e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005840:	61ba      	str	r2, [r7, #24]
 8005842:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005844:	6979      	ldr	r1, [r7, #20]
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	e841 2300 	strex	r3, r2, [r1]
 800584c:	613b      	str	r3, [r7, #16]
   return(result);
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1e5      	bne.n	8005820 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2220      	movs	r2, #32
 8005858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005862:	bf00      	nop
 8005864:	3754      	adds	r7, #84	; 0x54
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b084      	sub	sp, #16
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f7ff fecf 	bl	800562c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800588e:	bf00      	nop
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005896:	b480      	push	{r7}
 8005898:	b085      	sub	sp, #20
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b21      	cmp	r3, #33	; 0x21
 80058a8:	d13e      	bne.n	8005928 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b2:	d114      	bne.n	80058de <UART_Transmit_IT+0x48>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d110      	bne.n	80058de <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	461a      	mov	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	1c9a      	adds	r2, r3, #2
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	621a      	str	r2, [r3, #32]
 80058dc:	e008      	b.n	80058f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	1c59      	adds	r1, r3, #1
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6211      	str	r1, [r2, #32]
 80058e8:	781a      	ldrb	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	3b01      	subs	r3, #1
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	4619      	mov	r1, r3
 80058fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10f      	bne.n	8005924 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005912:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005922:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005924:	2300      	movs	r3, #0
 8005926:	e000      	b.n	800592a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005928:	2302      	movs	r3, #2
  }
}
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b082      	sub	sp, #8
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68da      	ldr	r2, [r3, #12]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800594c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2220      	movs	r2, #32
 8005952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7ff fe5e 	bl	8005618 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b08c      	sub	sp, #48	; 0x30
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b22      	cmp	r3, #34	; 0x22
 8005978:	f040 80ab 	bne.w	8005ad2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005984:	d117      	bne.n	80059b6 <UART_Receive_IT+0x50>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d113      	bne.n	80059b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800598e:	2300      	movs	r3, #0
 8005990:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005996:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ae:	1c9a      	adds	r2, r3, #2
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	629a      	str	r2, [r3, #40]	; 0x28
 80059b4:	e026      	b.n	8005a04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80059bc:	2300      	movs	r3, #0
 80059be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c8:	d007      	beq.n	80059da <UART_Receive_IT+0x74>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10a      	bne.n	80059e8 <UART_Receive_IT+0x82>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d106      	bne.n	80059e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e4:	701a      	strb	r2, [r3, #0]
 80059e6:	e008      	b.n	80059fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fe:	1c5a      	adds	r2, r3, #1
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	4619      	mov	r1, r3
 8005a12:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d15a      	bne.n	8005ace <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0220 	bic.w	r2, r2, #32
 8005a26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	695a      	ldr	r2, [r3, #20]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0201 	bic.w	r2, r2, #1
 8005a46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d135      	bne.n	8005ac4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	330c      	adds	r3, #12
 8005a64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	e853 3f00 	ldrex	r3, [r3]
 8005a6c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f023 0310 	bic.w	r3, r3, #16
 8005a74:	627b      	str	r3, [r7, #36]	; 0x24
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	330c      	adds	r3, #12
 8005a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a7e:	623a      	str	r2, [r7, #32]
 8005a80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a82:	69f9      	ldr	r1, [r7, #28]
 8005a84:	6a3a      	ldr	r2, [r7, #32]
 8005a86:	e841 2300 	strex	r3, r2, [r1]
 8005a8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1e5      	bne.n	8005a5e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0310 	and.w	r3, r3, #16
 8005a9c:	2b10      	cmp	r3, #16
 8005a9e:	d10a      	bne.n	8005ab6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005aba:	4619      	mov	r1, r3
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7ff fdbf 	bl	8005640 <HAL_UARTEx_RxEventCallback>
 8005ac2:	e002      	b.n	8005aca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7fc f853 	bl	8001b70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	e002      	b.n	8005ad4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e000      	b.n	8005ad4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005ad2:	2302      	movs	r3, #2
  }
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3730      	adds	r7, #48	; 0x30
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae0:	b09f      	sub	sp, #124	; 0x7c
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af2:	68d9      	ldr	r1, [r3, #12]
 8005af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	ea40 0301 	orr.w	r3, r0, r1
 8005afc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b00:	689a      	ldr	r2, [r3, #8]
 8005b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	431a      	orrs	r2, r3
 8005b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b20:	f021 010c 	bic.w	r1, r1, #12
 8005b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b2a:	430b      	orrs	r3, r1
 8005b2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b3a:	6999      	ldr	r1, [r3, #24]
 8005b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	ea40 0301 	orr.w	r3, r0, r1
 8005b44:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	4bc5      	ldr	r3, [pc, #788]	; (8005e60 <UART_SetConfig+0x384>)
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d004      	beq.n	8005b5a <UART_SetConfig+0x7e>
 8005b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	4bc3      	ldr	r3, [pc, #780]	; (8005e64 <UART_SetConfig+0x388>)
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d103      	bne.n	8005b62 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b5a:	f7fd ff3d 	bl	80039d8 <HAL_RCC_GetPCLK2Freq>
 8005b5e:	6778      	str	r0, [r7, #116]	; 0x74
 8005b60:	e002      	b.n	8005b68 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b62:	f7fd ff25 	bl	80039b0 <HAL_RCC_GetPCLK1Freq>
 8005b66:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b70:	f040 80b6 	bne.w	8005ce0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b76:	461c      	mov	r4, r3
 8005b78:	f04f 0500 	mov.w	r5, #0
 8005b7c:	4622      	mov	r2, r4
 8005b7e:	462b      	mov	r3, r5
 8005b80:	1891      	adds	r1, r2, r2
 8005b82:	6439      	str	r1, [r7, #64]	; 0x40
 8005b84:	415b      	adcs	r3, r3
 8005b86:	647b      	str	r3, [r7, #68]	; 0x44
 8005b88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b8c:	1912      	adds	r2, r2, r4
 8005b8e:	eb45 0303 	adc.w	r3, r5, r3
 8005b92:	f04f 0000 	mov.w	r0, #0
 8005b96:	f04f 0100 	mov.w	r1, #0
 8005b9a:	00d9      	lsls	r1, r3, #3
 8005b9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ba0:	00d0      	lsls	r0, r2, #3
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	1911      	adds	r1, r2, r4
 8005ba8:	6639      	str	r1, [r7, #96]	; 0x60
 8005baa:	416b      	adcs	r3, r5
 8005bac:	667b      	str	r3, [r7, #100]	; 0x64
 8005bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	f04f 0300 	mov.w	r3, #0
 8005bb8:	1891      	adds	r1, r2, r2
 8005bba:	63b9      	str	r1, [r7, #56]	; 0x38
 8005bbc:	415b      	adcs	r3, r3
 8005bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005bc4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005bc8:	f7fa fb52 	bl	8000270 <__aeabi_uldivmod>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4ba5      	ldr	r3, [pc, #660]	; (8005e68 <UART_SetConfig+0x38c>)
 8005bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	011e      	lsls	r6, r3, #4
 8005bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bdc:	461c      	mov	r4, r3
 8005bde:	f04f 0500 	mov.w	r5, #0
 8005be2:	4622      	mov	r2, r4
 8005be4:	462b      	mov	r3, r5
 8005be6:	1891      	adds	r1, r2, r2
 8005be8:	6339      	str	r1, [r7, #48]	; 0x30
 8005bea:	415b      	adcs	r3, r3
 8005bec:	637b      	str	r3, [r7, #52]	; 0x34
 8005bee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005bf2:	1912      	adds	r2, r2, r4
 8005bf4:	eb45 0303 	adc.w	r3, r5, r3
 8005bf8:	f04f 0000 	mov.w	r0, #0
 8005bfc:	f04f 0100 	mov.w	r1, #0
 8005c00:	00d9      	lsls	r1, r3, #3
 8005c02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c06:	00d0      	lsls	r0, r2, #3
 8005c08:	4602      	mov	r2, r0
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	1911      	adds	r1, r2, r4
 8005c0e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c10:	416b      	adcs	r3, r5
 8005c12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	f04f 0300 	mov.w	r3, #0
 8005c1e:	1891      	adds	r1, r2, r2
 8005c20:	62b9      	str	r1, [r7, #40]	; 0x28
 8005c22:	415b      	adcs	r3, r3
 8005c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c2a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005c2e:	f7fa fb1f 	bl	8000270 <__aeabi_uldivmod>
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	4b8c      	ldr	r3, [pc, #560]	; (8005e68 <UART_SetConfig+0x38c>)
 8005c38:	fba3 1302 	umull	r1, r3, r3, r2
 8005c3c:	095b      	lsrs	r3, r3, #5
 8005c3e:	2164      	movs	r1, #100	; 0x64
 8005c40:	fb01 f303 	mul.w	r3, r1, r3
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	3332      	adds	r3, #50	; 0x32
 8005c4a:	4a87      	ldr	r2, [pc, #540]	; (8005e68 <UART_SetConfig+0x38c>)
 8005c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c50:	095b      	lsrs	r3, r3, #5
 8005c52:	005b      	lsls	r3, r3, #1
 8005c54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c58:	441e      	add	r6, r3
 8005c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f04f 0100 	mov.w	r1, #0
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	1894      	adds	r4, r2, r2
 8005c68:	623c      	str	r4, [r7, #32]
 8005c6a:	415b      	adcs	r3, r3
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c72:	1812      	adds	r2, r2, r0
 8005c74:	eb41 0303 	adc.w	r3, r1, r3
 8005c78:	f04f 0400 	mov.w	r4, #0
 8005c7c:	f04f 0500 	mov.w	r5, #0
 8005c80:	00dd      	lsls	r5, r3, #3
 8005c82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c86:	00d4      	lsls	r4, r2, #3
 8005c88:	4622      	mov	r2, r4
 8005c8a:	462b      	mov	r3, r5
 8005c8c:	1814      	adds	r4, r2, r0
 8005c8e:	653c      	str	r4, [r7, #80]	; 0x50
 8005c90:	414b      	adcs	r3, r1
 8005c92:	657b      	str	r3, [r7, #84]	; 0x54
 8005c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	f04f 0300 	mov.w	r3, #0
 8005c9e:	1891      	adds	r1, r2, r2
 8005ca0:	61b9      	str	r1, [r7, #24]
 8005ca2:	415b      	adcs	r3, r3
 8005ca4:	61fb      	str	r3, [r7, #28]
 8005ca6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005caa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005cae:	f7fa fadf 	bl	8000270 <__aeabi_uldivmod>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4b6c      	ldr	r3, [pc, #432]	; (8005e68 <UART_SetConfig+0x38c>)
 8005cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cbc:	095b      	lsrs	r3, r3, #5
 8005cbe:	2164      	movs	r1, #100	; 0x64
 8005cc0:	fb01 f303 	mul.w	r3, r1, r3
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	3332      	adds	r3, #50	; 0x32
 8005cca:	4a67      	ldr	r2, [pc, #412]	; (8005e68 <UART_SetConfig+0x38c>)
 8005ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd0:	095b      	lsrs	r3, r3, #5
 8005cd2:	f003 0207 	and.w	r2, r3, #7
 8005cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4432      	add	r2, r6
 8005cdc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cde:	e0b9      	b.n	8005e54 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ce0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ce2:	461c      	mov	r4, r3
 8005ce4:	f04f 0500 	mov.w	r5, #0
 8005ce8:	4622      	mov	r2, r4
 8005cea:	462b      	mov	r3, r5
 8005cec:	1891      	adds	r1, r2, r2
 8005cee:	6139      	str	r1, [r7, #16]
 8005cf0:	415b      	adcs	r3, r3
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005cf8:	1912      	adds	r2, r2, r4
 8005cfa:	eb45 0303 	adc.w	r3, r5, r3
 8005cfe:	f04f 0000 	mov.w	r0, #0
 8005d02:	f04f 0100 	mov.w	r1, #0
 8005d06:	00d9      	lsls	r1, r3, #3
 8005d08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d0c:	00d0      	lsls	r0, r2, #3
 8005d0e:	4602      	mov	r2, r0
 8005d10:	460b      	mov	r3, r1
 8005d12:	eb12 0804 	adds.w	r8, r2, r4
 8005d16:	eb43 0905 	adc.w	r9, r3, r5
 8005d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f04f 0100 	mov.w	r1, #0
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	f04f 0300 	mov.w	r3, #0
 8005d2c:	008b      	lsls	r3, r1, #2
 8005d2e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d32:	0082      	lsls	r2, r0, #2
 8005d34:	4640      	mov	r0, r8
 8005d36:	4649      	mov	r1, r9
 8005d38:	f7fa fa9a 	bl	8000270 <__aeabi_uldivmod>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4b49      	ldr	r3, [pc, #292]	; (8005e68 <UART_SetConfig+0x38c>)
 8005d42:	fba3 2302 	umull	r2, r3, r3, r2
 8005d46:	095b      	lsrs	r3, r3, #5
 8005d48:	011e      	lsls	r6, r3, #4
 8005d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f04f 0100 	mov.w	r1, #0
 8005d52:	4602      	mov	r2, r0
 8005d54:	460b      	mov	r3, r1
 8005d56:	1894      	adds	r4, r2, r2
 8005d58:	60bc      	str	r4, [r7, #8]
 8005d5a:	415b      	adcs	r3, r3
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d62:	1812      	adds	r2, r2, r0
 8005d64:	eb41 0303 	adc.w	r3, r1, r3
 8005d68:	f04f 0400 	mov.w	r4, #0
 8005d6c:	f04f 0500 	mov.w	r5, #0
 8005d70:	00dd      	lsls	r5, r3, #3
 8005d72:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d76:	00d4      	lsls	r4, r2, #3
 8005d78:	4622      	mov	r2, r4
 8005d7a:	462b      	mov	r3, r5
 8005d7c:	1814      	adds	r4, r2, r0
 8005d7e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005d80:	414b      	adcs	r3, r1
 8005d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f04f 0100 	mov.w	r1, #0
 8005d8e:	f04f 0200 	mov.w	r2, #0
 8005d92:	f04f 0300 	mov.w	r3, #0
 8005d96:	008b      	lsls	r3, r1, #2
 8005d98:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d9c:	0082      	lsls	r2, r0, #2
 8005d9e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005da2:	f7fa fa65 	bl	8000270 <__aeabi_uldivmod>
 8005da6:	4602      	mov	r2, r0
 8005da8:	460b      	mov	r3, r1
 8005daa:	4b2f      	ldr	r3, [pc, #188]	; (8005e68 <UART_SetConfig+0x38c>)
 8005dac:	fba3 1302 	umull	r1, r3, r3, r2
 8005db0:	095b      	lsrs	r3, r3, #5
 8005db2:	2164      	movs	r1, #100	; 0x64
 8005db4:	fb01 f303 	mul.w	r3, r1, r3
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	011b      	lsls	r3, r3, #4
 8005dbc:	3332      	adds	r3, #50	; 0x32
 8005dbe:	4a2a      	ldr	r2, [pc, #168]	; (8005e68 <UART_SetConfig+0x38c>)
 8005dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc4:	095b      	lsrs	r3, r3, #5
 8005dc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dca:	441e      	add	r6, r3
 8005dcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f04f 0100 	mov.w	r1, #0
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	1894      	adds	r4, r2, r2
 8005dda:	603c      	str	r4, [r7, #0]
 8005ddc:	415b      	adcs	r3, r3
 8005dde:	607b      	str	r3, [r7, #4]
 8005de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005de4:	1812      	adds	r2, r2, r0
 8005de6:	eb41 0303 	adc.w	r3, r1, r3
 8005dea:	f04f 0400 	mov.w	r4, #0
 8005dee:	f04f 0500 	mov.w	r5, #0
 8005df2:	00dd      	lsls	r5, r3, #3
 8005df4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005df8:	00d4      	lsls	r4, r2, #3
 8005dfa:	4622      	mov	r2, r4
 8005dfc:	462b      	mov	r3, r5
 8005dfe:	eb12 0a00 	adds.w	sl, r2, r0
 8005e02:	eb43 0b01 	adc.w	fp, r3, r1
 8005e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f04f 0100 	mov.w	r1, #0
 8005e10:	f04f 0200 	mov.w	r2, #0
 8005e14:	f04f 0300 	mov.w	r3, #0
 8005e18:	008b      	lsls	r3, r1, #2
 8005e1a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e1e:	0082      	lsls	r2, r0, #2
 8005e20:	4650      	mov	r0, sl
 8005e22:	4659      	mov	r1, fp
 8005e24:	f7fa fa24 	bl	8000270 <__aeabi_uldivmod>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4b0e      	ldr	r3, [pc, #56]	; (8005e68 <UART_SetConfig+0x38c>)
 8005e2e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e32:	095b      	lsrs	r3, r3, #5
 8005e34:	2164      	movs	r1, #100	; 0x64
 8005e36:	fb01 f303 	mul.w	r3, r1, r3
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	011b      	lsls	r3, r3, #4
 8005e3e:	3332      	adds	r3, #50	; 0x32
 8005e40:	4a09      	ldr	r2, [pc, #36]	; (8005e68 <UART_SetConfig+0x38c>)
 8005e42:	fba2 2303 	umull	r2, r3, r2, r3
 8005e46:	095b      	lsrs	r3, r3, #5
 8005e48:	f003 020f 	and.w	r2, r3, #15
 8005e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4432      	add	r2, r6
 8005e52:	609a      	str	r2, [r3, #8]
}
 8005e54:	bf00      	nop
 8005e56:	377c      	adds	r7, #124	; 0x7c
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e5e:	bf00      	nop
 8005e60:	40011000 	.word	0x40011000
 8005e64:	40011400 	.word	0x40011400
 8005e68:	51eb851f 	.word	0x51eb851f

08005e6c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e84:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	4b20      	ldr	r3, [pc, #128]	; (8005f0c <FSMC_NORSRAM_Init+0xa0>)
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005e96:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8005e9c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8005ea2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8005ea8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8005eae:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8005eb4:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8005eba:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8005ec0:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8005ec6:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8005ecc:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8005ed2:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8005ed8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d103      	bne.n	8005ef0 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eee:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68f9      	ldr	r1, [r7, #12]
 8005ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	fff00080 	.word	0xfff00080

08005f10 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	1c5a      	adds	r2, r3, #1
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f2a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005f32:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005f3e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005f46:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8005f4e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	3b01      	subs	r3, #1
 8005f56:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005f58:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	3b02      	subs	r3, #2
 8005f60:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005f62:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6979      	ldr	r1, [r7, #20]
 8005f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
	...

08005f8c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
 8005f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fa4:	d122      	bne.n	8005fec <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fae:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	4b15      	ldr	r3, [pc, #84]	; (8006008 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005fc2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005fca:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8005fd2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005fd8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	6979      	ldr	r1, [r7, #20]
 8005fe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005fea:	e005      	b.n	8005ff8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	cff00000 	.word	0xcff00000

0800600c <__errno>:
 800600c:	4b01      	ldr	r3, [pc, #4]	; (8006014 <__errno+0x8>)
 800600e:	6818      	ldr	r0, [r3, #0]
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	2000001c 	.word	0x2000001c

08006018 <__libc_init_array>:
 8006018:	b570      	push	{r4, r5, r6, lr}
 800601a:	4d0d      	ldr	r5, [pc, #52]	; (8006050 <__libc_init_array+0x38>)
 800601c:	4c0d      	ldr	r4, [pc, #52]	; (8006054 <__libc_init_array+0x3c>)
 800601e:	1b64      	subs	r4, r4, r5
 8006020:	10a4      	asrs	r4, r4, #2
 8006022:	2600      	movs	r6, #0
 8006024:	42a6      	cmp	r6, r4
 8006026:	d109      	bne.n	800603c <__libc_init_array+0x24>
 8006028:	4d0b      	ldr	r5, [pc, #44]	; (8006058 <__libc_init_array+0x40>)
 800602a:	4c0c      	ldr	r4, [pc, #48]	; (800605c <__libc_init_array+0x44>)
 800602c:	f000 fc4e 	bl	80068cc <_init>
 8006030:	1b64      	subs	r4, r4, r5
 8006032:	10a4      	asrs	r4, r4, #2
 8006034:	2600      	movs	r6, #0
 8006036:	42a6      	cmp	r6, r4
 8006038:	d105      	bne.n	8006046 <__libc_init_array+0x2e>
 800603a:	bd70      	pop	{r4, r5, r6, pc}
 800603c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006040:	4798      	blx	r3
 8006042:	3601      	adds	r6, #1
 8006044:	e7ee      	b.n	8006024 <__libc_init_array+0xc>
 8006046:	f855 3b04 	ldr.w	r3, [r5], #4
 800604a:	4798      	blx	r3
 800604c:	3601      	adds	r6, #1
 800604e:	e7f2      	b.n	8006036 <__libc_init_array+0x1e>
 8006050:	08006964 	.word	0x08006964
 8006054:	08006964 	.word	0x08006964
 8006058:	08006964 	.word	0x08006964
 800605c:	08006968 	.word	0x08006968

08006060 <memset>:
 8006060:	4402      	add	r2, r0
 8006062:	4603      	mov	r3, r0
 8006064:	4293      	cmp	r3, r2
 8006066:	d100      	bne.n	800606a <memset+0xa>
 8006068:	4770      	bx	lr
 800606a:	f803 1b01 	strb.w	r1, [r3], #1
 800606e:	e7f9      	b.n	8006064 <memset+0x4>

08006070 <siprintf>:
 8006070:	b40e      	push	{r1, r2, r3}
 8006072:	b500      	push	{lr}
 8006074:	b09c      	sub	sp, #112	; 0x70
 8006076:	ab1d      	add	r3, sp, #116	; 0x74
 8006078:	9002      	str	r0, [sp, #8]
 800607a:	9006      	str	r0, [sp, #24]
 800607c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006080:	4809      	ldr	r0, [pc, #36]	; (80060a8 <siprintf+0x38>)
 8006082:	9107      	str	r1, [sp, #28]
 8006084:	9104      	str	r1, [sp, #16]
 8006086:	4909      	ldr	r1, [pc, #36]	; (80060ac <siprintf+0x3c>)
 8006088:	f853 2b04 	ldr.w	r2, [r3], #4
 800608c:	9105      	str	r1, [sp, #20]
 800608e:	6800      	ldr	r0, [r0, #0]
 8006090:	9301      	str	r3, [sp, #4]
 8006092:	a902      	add	r1, sp, #8
 8006094:	f000 f868 	bl	8006168 <_svfiprintf_r>
 8006098:	9b02      	ldr	r3, [sp, #8]
 800609a:	2200      	movs	r2, #0
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	b01c      	add	sp, #112	; 0x70
 80060a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80060a4:	b003      	add	sp, #12
 80060a6:	4770      	bx	lr
 80060a8:	2000001c 	.word	0x2000001c
 80060ac:	ffff0208 	.word	0xffff0208

080060b0 <__ssputs_r>:
 80060b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060b4:	688e      	ldr	r6, [r1, #8]
 80060b6:	429e      	cmp	r6, r3
 80060b8:	4682      	mov	sl, r0
 80060ba:	460c      	mov	r4, r1
 80060bc:	4690      	mov	r8, r2
 80060be:	461f      	mov	r7, r3
 80060c0:	d838      	bhi.n	8006134 <__ssputs_r+0x84>
 80060c2:	898a      	ldrh	r2, [r1, #12]
 80060c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060c8:	d032      	beq.n	8006130 <__ssputs_r+0x80>
 80060ca:	6825      	ldr	r5, [r4, #0]
 80060cc:	6909      	ldr	r1, [r1, #16]
 80060ce:	eba5 0901 	sub.w	r9, r5, r1
 80060d2:	6965      	ldr	r5, [r4, #20]
 80060d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060dc:	3301      	adds	r3, #1
 80060de:	444b      	add	r3, r9
 80060e0:	106d      	asrs	r5, r5, #1
 80060e2:	429d      	cmp	r5, r3
 80060e4:	bf38      	it	cc
 80060e6:	461d      	movcc	r5, r3
 80060e8:	0553      	lsls	r3, r2, #21
 80060ea:	d531      	bpl.n	8006150 <__ssputs_r+0xa0>
 80060ec:	4629      	mov	r1, r5
 80060ee:	f000 fb47 	bl	8006780 <_malloc_r>
 80060f2:	4606      	mov	r6, r0
 80060f4:	b950      	cbnz	r0, 800610c <__ssputs_r+0x5c>
 80060f6:	230c      	movs	r3, #12
 80060f8:	f8ca 3000 	str.w	r3, [sl]
 80060fc:	89a3      	ldrh	r3, [r4, #12]
 80060fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006102:	81a3      	strh	r3, [r4, #12]
 8006104:	f04f 30ff 	mov.w	r0, #4294967295
 8006108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800610c:	6921      	ldr	r1, [r4, #16]
 800610e:	464a      	mov	r2, r9
 8006110:	f000 fabe 	bl	8006690 <memcpy>
 8006114:	89a3      	ldrh	r3, [r4, #12]
 8006116:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800611a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611e:	81a3      	strh	r3, [r4, #12]
 8006120:	6126      	str	r6, [r4, #16]
 8006122:	6165      	str	r5, [r4, #20]
 8006124:	444e      	add	r6, r9
 8006126:	eba5 0509 	sub.w	r5, r5, r9
 800612a:	6026      	str	r6, [r4, #0]
 800612c:	60a5      	str	r5, [r4, #8]
 800612e:	463e      	mov	r6, r7
 8006130:	42be      	cmp	r6, r7
 8006132:	d900      	bls.n	8006136 <__ssputs_r+0x86>
 8006134:	463e      	mov	r6, r7
 8006136:	4632      	mov	r2, r6
 8006138:	6820      	ldr	r0, [r4, #0]
 800613a:	4641      	mov	r1, r8
 800613c:	f000 fab6 	bl	80066ac <memmove>
 8006140:	68a3      	ldr	r3, [r4, #8]
 8006142:	6822      	ldr	r2, [r4, #0]
 8006144:	1b9b      	subs	r3, r3, r6
 8006146:	4432      	add	r2, r6
 8006148:	60a3      	str	r3, [r4, #8]
 800614a:	6022      	str	r2, [r4, #0]
 800614c:	2000      	movs	r0, #0
 800614e:	e7db      	b.n	8006108 <__ssputs_r+0x58>
 8006150:	462a      	mov	r2, r5
 8006152:	f000 fb6f 	bl	8006834 <_realloc_r>
 8006156:	4606      	mov	r6, r0
 8006158:	2800      	cmp	r0, #0
 800615a:	d1e1      	bne.n	8006120 <__ssputs_r+0x70>
 800615c:	6921      	ldr	r1, [r4, #16]
 800615e:	4650      	mov	r0, sl
 8006160:	f000 fabe 	bl	80066e0 <_free_r>
 8006164:	e7c7      	b.n	80060f6 <__ssputs_r+0x46>
	...

08006168 <_svfiprintf_r>:
 8006168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800616c:	4698      	mov	r8, r3
 800616e:	898b      	ldrh	r3, [r1, #12]
 8006170:	061b      	lsls	r3, r3, #24
 8006172:	b09d      	sub	sp, #116	; 0x74
 8006174:	4607      	mov	r7, r0
 8006176:	460d      	mov	r5, r1
 8006178:	4614      	mov	r4, r2
 800617a:	d50e      	bpl.n	800619a <_svfiprintf_r+0x32>
 800617c:	690b      	ldr	r3, [r1, #16]
 800617e:	b963      	cbnz	r3, 800619a <_svfiprintf_r+0x32>
 8006180:	2140      	movs	r1, #64	; 0x40
 8006182:	f000 fafd 	bl	8006780 <_malloc_r>
 8006186:	6028      	str	r0, [r5, #0]
 8006188:	6128      	str	r0, [r5, #16]
 800618a:	b920      	cbnz	r0, 8006196 <_svfiprintf_r+0x2e>
 800618c:	230c      	movs	r3, #12
 800618e:	603b      	str	r3, [r7, #0]
 8006190:	f04f 30ff 	mov.w	r0, #4294967295
 8006194:	e0d1      	b.n	800633a <_svfiprintf_r+0x1d2>
 8006196:	2340      	movs	r3, #64	; 0x40
 8006198:	616b      	str	r3, [r5, #20]
 800619a:	2300      	movs	r3, #0
 800619c:	9309      	str	r3, [sp, #36]	; 0x24
 800619e:	2320      	movs	r3, #32
 80061a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80061a8:	2330      	movs	r3, #48	; 0x30
 80061aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006354 <_svfiprintf_r+0x1ec>
 80061ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061b2:	f04f 0901 	mov.w	r9, #1
 80061b6:	4623      	mov	r3, r4
 80061b8:	469a      	mov	sl, r3
 80061ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061be:	b10a      	cbz	r2, 80061c4 <_svfiprintf_r+0x5c>
 80061c0:	2a25      	cmp	r2, #37	; 0x25
 80061c2:	d1f9      	bne.n	80061b8 <_svfiprintf_r+0x50>
 80061c4:	ebba 0b04 	subs.w	fp, sl, r4
 80061c8:	d00b      	beq.n	80061e2 <_svfiprintf_r+0x7a>
 80061ca:	465b      	mov	r3, fp
 80061cc:	4622      	mov	r2, r4
 80061ce:	4629      	mov	r1, r5
 80061d0:	4638      	mov	r0, r7
 80061d2:	f7ff ff6d 	bl	80060b0 <__ssputs_r>
 80061d6:	3001      	adds	r0, #1
 80061d8:	f000 80aa 	beq.w	8006330 <_svfiprintf_r+0x1c8>
 80061dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061de:	445a      	add	r2, fp
 80061e0:	9209      	str	r2, [sp, #36]	; 0x24
 80061e2:	f89a 3000 	ldrb.w	r3, [sl]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 80a2 	beq.w	8006330 <_svfiprintf_r+0x1c8>
 80061ec:	2300      	movs	r3, #0
 80061ee:	f04f 32ff 	mov.w	r2, #4294967295
 80061f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061f6:	f10a 0a01 	add.w	sl, sl, #1
 80061fa:	9304      	str	r3, [sp, #16]
 80061fc:	9307      	str	r3, [sp, #28]
 80061fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006202:	931a      	str	r3, [sp, #104]	; 0x68
 8006204:	4654      	mov	r4, sl
 8006206:	2205      	movs	r2, #5
 8006208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800620c:	4851      	ldr	r0, [pc, #324]	; (8006354 <_svfiprintf_r+0x1ec>)
 800620e:	f7f9 ffdf 	bl	80001d0 <memchr>
 8006212:	9a04      	ldr	r2, [sp, #16]
 8006214:	b9d8      	cbnz	r0, 800624e <_svfiprintf_r+0xe6>
 8006216:	06d0      	lsls	r0, r2, #27
 8006218:	bf44      	itt	mi
 800621a:	2320      	movmi	r3, #32
 800621c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006220:	0711      	lsls	r1, r2, #28
 8006222:	bf44      	itt	mi
 8006224:	232b      	movmi	r3, #43	; 0x2b
 8006226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800622a:	f89a 3000 	ldrb.w	r3, [sl]
 800622e:	2b2a      	cmp	r3, #42	; 0x2a
 8006230:	d015      	beq.n	800625e <_svfiprintf_r+0xf6>
 8006232:	9a07      	ldr	r2, [sp, #28]
 8006234:	4654      	mov	r4, sl
 8006236:	2000      	movs	r0, #0
 8006238:	f04f 0c0a 	mov.w	ip, #10
 800623c:	4621      	mov	r1, r4
 800623e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006242:	3b30      	subs	r3, #48	; 0x30
 8006244:	2b09      	cmp	r3, #9
 8006246:	d94e      	bls.n	80062e6 <_svfiprintf_r+0x17e>
 8006248:	b1b0      	cbz	r0, 8006278 <_svfiprintf_r+0x110>
 800624a:	9207      	str	r2, [sp, #28]
 800624c:	e014      	b.n	8006278 <_svfiprintf_r+0x110>
 800624e:	eba0 0308 	sub.w	r3, r0, r8
 8006252:	fa09 f303 	lsl.w	r3, r9, r3
 8006256:	4313      	orrs	r3, r2
 8006258:	9304      	str	r3, [sp, #16]
 800625a:	46a2      	mov	sl, r4
 800625c:	e7d2      	b.n	8006204 <_svfiprintf_r+0x9c>
 800625e:	9b03      	ldr	r3, [sp, #12]
 8006260:	1d19      	adds	r1, r3, #4
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	9103      	str	r1, [sp, #12]
 8006266:	2b00      	cmp	r3, #0
 8006268:	bfbb      	ittet	lt
 800626a:	425b      	neglt	r3, r3
 800626c:	f042 0202 	orrlt.w	r2, r2, #2
 8006270:	9307      	strge	r3, [sp, #28]
 8006272:	9307      	strlt	r3, [sp, #28]
 8006274:	bfb8      	it	lt
 8006276:	9204      	strlt	r2, [sp, #16]
 8006278:	7823      	ldrb	r3, [r4, #0]
 800627a:	2b2e      	cmp	r3, #46	; 0x2e
 800627c:	d10c      	bne.n	8006298 <_svfiprintf_r+0x130>
 800627e:	7863      	ldrb	r3, [r4, #1]
 8006280:	2b2a      	cmp	r3, #42	; 0x2a
 8006282:	d135      	bne.n	80062f0 <_svfiprintf_r+0x188>
 8006284:	9b03      	ldr	r3, [sp, #12]
 8006286:	1d1a      	adds	r2, r3, #4
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	9203      	str	r2, [sp, #12]
 800628c:	2b00      	cmp	r3, #0
 800628e:	bfb8      	it	lt
 8006290:	f04f 33ff 	movlt.w	r3, #4294967295
 8006294:	3402      	adds	r4, #2
 8006296:	9305      	str	r3, [sp, #20]
 8006298:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006364 <_svfiprintf_r+0x1fc>
 800629c:	7821      	ldrb	r1, [r4, #0]
 800629e:	2203      	movs	r2, #3
 80062a0:	4650      	mov	r0, sl
 80062a2:	f7f9 ff95 	bl	80001d0 <memchr>
 80062a6:	b140      	cbz	r0, 80062ba <_svfiprintf_r+0x152>
 80062a8:	2340      	movs	r3, #64	; 0x40
 80062aa:	eba0 000a 	sub.w	r0, r0, sl
 80062ae:	fa03 f000 	lsl.w	r0, r3, r0
 80062b2:	9b04      	ldr	r3, [sp, #16]
 80062b4:	4303      	orrs	r3, r0
 80062b6:	3401      	adds	r4, #1
 80062b8:	9304      	str	r3, [sp, #16]
 80062ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062be:	4826      	ldr	r0, [pc, #152]	; (8006358 <_svfiprintf_r+0x1f0>)
 80062c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062c4:	2206      	movs	r2, #6
 80062c6:	f7f9 ff83 	bl	80001d0 <memchr>
 80062ca:	2800      	cmp	r0, #0
 80062cc:	d038      	beq.n	8006340 <_svfiprintf_r+0x1d8>
 80062ce:	4b23      	ldr	r3, [pc, #140]	; (800635c <_svfiprintf_r+0x1f4>)
 80062d0:	bb1b      	cbnz	r3, 800631a <_svfiprintf_r+0x1b2>
 80062d2:	9b03      	ldr	r3, [sp, #12]
 80062d4:	3307      	adds	r3, #7
 80062d6:	f023 0307 	bic.w	r3, r3, #7
 80062da:	3308      	adds	r3, #8
 80062dc:	9303      	str	r3, [sp, #12]
 80062de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062e0:	4433      	add	r3, r6
 80062e2:	9309      	str	r3, [sp, #36]	; 0x24
 80062e4:	e767      	b.n	80061b6 <_svfiprintf_r+0x4e>
 80062e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80062ea:	460c      	mov	r4, r1
 80062ec:	2001      	movs	r0, #1
 80062ee:	e7a5      	b.n	800623c <_svfiprintf_r+0xd4>
 80062f0:	2300      	movs	r3, #0
 80062f2:	3401      	adds	r4, #1
 80062f4:	9305      	str	r3, [sp, #20]
 80062f6:	4619      	mov	r1, r3
 80062f8:	f04f 0c0a 	mov.w	ip, #10
 80062fc:	4620      	mov	r0, r4
 80062fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006302:	3a30      	subs	r2, #48	; 0x30
 8006304:	2a09      	cmp	r2, #9
 8006306:	d903      	bls.n	8006310 <_svfiprintf_r+0x1a8>
 8006308:	2b00      	cmp	r3, #0
 800630a:	d0c5      	beq.n	8006298 <_svfiprintf_r+0x130>
 800630c:	9105      	str	r1, [sp, #20]
 800630e:	e7c3      	b.n	8006298 <_svfiprintf_r+0x130>
 8006310:	fb0c 2101 	mla	r1, ip, r1, r2
 8006314:	4604      	mov	r4, r0
 8006316:	2301      	movs	r3, #1
 8006318:	e7f0      	b.n	80062fc <_svfiprintf_r+0x194>
 800631a:	ab03      	add	r3, sp, #12
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	462a      	mov	r2, r5
 8006320:	4b0f      	ldr	r3, [pc, #60]	; (8006360 <_svfiprintf_r+0x1f8>)
 8006322:	a904      	add	r1, sp, #16
 8006324:	4638      	mov	r0, r7
 8006326:	f3af 8000 	nop.w
 800632a:	1c42      	adds	r2, r0, #1
 800632c:	4606      	mov	r6, r0
 800632e:	d1d6      	bne.n	80062de <_svfiprintf_r+0x176>
 8006330:	89ab      	ldrh	r3, [r5, #12]
 8006332:	065b      	lsls	r3, r3, #25
 8006334:	f53f af2c 	bmi.w	8006190 <_svfiprintf_r+0x28>
 8006338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800633a:	b01d      	add	sp, #116	; 0x74
 800633c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006340:	ab03      	add	r3, sp, #12
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	462a      	mov	r2, r5
 8006346:	4b06      	ldr	r3, [pc, #24]	; (8006360 <_svfiprintf_r+0x1f8>)
 8006348:	a904      	add	r1, sp, #16
 800634a:	4638      	mov	r0, r7
 800634c:	f000 f87a 	bl	8006444 <_printf_i>
 8006350:	e7eb      	b.n	800632a <_svfiprintf_r+0x1c2>
 8006352:	bf00      	nop
 8006354:	08006928 	.word	0x08006928
 8006358:	08006932 	.word	0x08006932
 800635c:	00000000 	.word	0x00000000
 8006360:	080060b1 	.word	0x080060b1
 8006364:	0800692e 	.word	0x0800692e

08006368 <_printf_common>:
 8006368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800636c:	4616      	mov	r6, r2
 800636e:	4699      	mov	r9, r3
 8006370:	688a      	ldr	r2, [r1, #8]
 8006372:	690b      	ldr	r3, [r1, #16]
 8006374:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006378:	4293      	cmp	r3, r2
 800637a:	bfb8      	it	lt
 800637c:	4613      	movlt	r3, r2
 800637e:	6033      	str	r3, [r6, #0]
 8006380:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006384:	4607      	mov	r7, r0
 8006386:	460c      	mov	r4, r1
 8006388:	b10a      	cbz	r2, 800638e <_printf_common+0x26>
 800638a:	3301      	adds	r3, #1
 800638c:	6033      	str	r3, [r6, #0]
 800638e:	6823      	ldr	r3, [r4, #0]
 8006390:	0699      	lsls	r1, r3, #26
 8006392:	bf42      	ittt	mi
 8006394:	6833      	ldrmi	r3, [r6, #0]
 8006396:	3302      	addmi	r3, #2
 8006398:	6033      	strmi	r3, [r6, #0]
 800639a:	6825      	ldr	r5, [r4, #0]
 800639c:	f015 0506 	ands.w	r5, r5, #6
 80063a0:	d106      	bne.n	80063b0 <_printf_common+0x48>
 80063a2:	f104 0a19 	add.w	sl, r4, #25
 80063a6:	68e3      	ldr	r3, [r4, #12]
 80063a8:	6832      	ldr	r2, [r6, #0]
 80063aa:	1a9b      	subs	r3, r3, r2
 80063ac:	42ab      	cmp	r3, r5
 80063ae:	dc26      	bgt.n	80063fe <_printf_common+0x96>
 80063b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063b4:	1e13      	subs	r3, r2, #0
 80063b6:	6822      	ldr	r2, [r4, #0]
 80063b8:	bf18      	it	ne
 80063ba:	2301      	movne	r3, #1
 80063bc:	0692      	lsls	r2, r2, #26
 80063be:	d42b      	bmi.n	8006418 <_printf_common+0xb0>
 80063c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063c4:	4649      	mov	r1, r9
 80063c6:	4638      	mov	r0, r7
 80063c8:	47c0      	blx	r8
 80063ca:	3001      	adds	r0, #1
 80063cc:	d01e      	beq.n	800640c <_printf_common+0xa4>
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	68e5      	ldr	r5, [r4, #12]
 80063d2:	6832      	ldr	r2, [r6, #0]
 80063d4:	f003 0306 	and.w	r3, r3, #6
 80063d8:	2b04      	cmp	r3, #4
 80063da:	bf08      	it	eq
 80063dc:	1aad      	subeq	r5, r5, r2
 80063de:	68a3      	ldr	r3, [r4, #8]
 80063e0:	6922      	ldr	r2, [r4, #16]
 80063e2:	bf0c      	ite	eq
 80063e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063e8:	2500      	movne	r5, #0
 80063ea:	4293      	cmp	r3, r2
 80063ec:	bfc4      	itt	gt
 80063ee:	1a9b      	subgt	r3, r3, r2
 80063f0:	18ed      	addgt	r5, r5, r3
 80063f2:	2600      	movs	r6, #0
 80063f4:	341a      	adds	r4, #26
 80063f6:	42b5      	cmp	r5, r6
 80063f8:	d11a      	bne.n	8006430 <_printf_common+0xc8>
 80063fa:	2000      	movs	r0, #0
 80063fc:	e008      	b.n	8006410 <_printf_common+0xa8>
 80063fe:	2301      	movs	r3, #1
 8006400:	4652      	mov	r2, sl
 8006402:	4649      	mov	r1, r9
 8006404:	4638      	mov	r0, r7
 8006406:	47c0      	blx	r8
 8006408:	3001      	adds	r0, #1
 800640a:	d103      	bne.n	8006414 <_printf_common+0xac>
 800640c:	f04f 30ff 	mov.w	r0, #4294967295
 8006410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006414:	3501      	adds	r5, #1
 8006416:	e7c6      	b.n	80063a6 <_printf_common+0x3e>
 8006418:	18e1      	adds	r1, r4, r3
 800641a:	1c5a      	adds	r2, r3, #1
 800641c:	2030      	movs	r0, #48	; 0x30
 800641e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006422:	4422      	add	r2, r4
 8006424:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006428:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800642c:	3302      	adds	r3, #2
 800642e:	e7c7      	b.n	80063c0 <_printf_common+0x58>
 8006430:	2301      	movs	r3, #1
 8006432:	4622      	mov	r2, r4
 8006434:	4649      	mov	r1, r9
 8006436:	4638      	mov	r0, r7
 8006438:	47c0      	blx	r8
 800643a:	3001      	adds	r0, #1
 800643c:	d0e6      	beq.n	800640c <_printf_common+0xa4>
 800643e:	3601      	adds	r6, #1
 8006440:	e7d9      	b.n	80063f6 <_printf_common+0x8e>
	...

08006444 <_printf_i>:
 8006444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006448:	460c      	mov	r4, r1
 800644a:	4691      	mov	r9, r2
 800644c:	7e27      	ldrb	r7, [r4, #24]
 800644e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006450:	2f78      	cmp	r7, #120	; 0x78
 8006452:	4680      	mov	r8, r0
 8006454:	469a      	mov	sl, r3
 8006456:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800645a:	d807      	bhi.n	800646c <_printf_i+0x28>
 800645c:	2f62      	cmp	r7, #98	; 0x62
 800645e:	d80a      	bhi.n	8006476 <_printf_i+0x32>
 8006460:	2f00      	cmp	r7, #0
 8006462:	f000 80d8 	beq.w	8006616 <_printf_i+0x1d2>
 8006466:	2f58      	cmp	r7, #88	; 0x58
 8006468:	f000 80a3 	beq.w	80065b2 <_printf_i+0x16e>
 800646c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006470:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006474:	e03a      	b.n	80064ec <_printf_i+0xa8>
 8006476:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800647a:	2b15      	cmp	r3, #21
 800647c:	d8f6      	bhi.n	800646c <_printf_i+0x28>
 800647e:	a001      	add	r0, pc, #4	; (adr r0, 8006484 <_printf_i+0x40>)
 8006480:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006484:	080064dd 	.word	0x080064dd
 8006488:	080064f1 	.word	0x080064f1
 800648c:	0800646d 	.word	0x0800646d
 8006490:	0800646d 	.word	0x0800646d
 8006494:	0800646d 	.word	0x0800646d
 8006498:	0800646d 	.word	0x0800646d
 800649c:	080064f1 	.word	0x080064f1
 80064a0:	0800646d 	.word	0x0800646d
 80064a4:	0800646d 	.word	0x0800646d
 80064a8:	0800646d 	.word	0x0800646d
 80064ac:	0800646d 	.word	0x0800646d
 80064b0:	080065fd 	.word	0x080065fd
 80064b4:	08006521 	.word	0x08006521
 80064b8:	080065df 	.word	0x080065df
 80064bc:	0800646d 	.word	0x0800646d
 80064c0:	0800646d 	.word	0x0800646d
 80064c4:	0800661f 	.word	0x0800661f
 80064c8:	0800646d 	.word	0x0800646d
 80064cc:	08006521 	.word	0x08006521
 80064d0:	0800646d 	.word	0x0800646d
 80064d4:	0800646d 	.word	0x0800646d
 80064d8:	080065e7 	.word	0x080065e7
 80064dc:	680b      	ldr	r3, [r1, #0]
 80064de:	1d1a      	adds	r2, r3, #4
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	600a      	str	r2, [r1, #0]
 80064e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80064e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064ec:	2301      	movs	r3, #1
 80064ee:	e0a3      	b.n	8006638 <_printf_i+0x1f4>
 80064f0:	6825      	ldr	r5, [r4, #0]
 80064f2:	6808      	ldr	r0, [r1, #0]
 80064f4:	062e      	lsls	r6, r5, #24
 80064f6:	f100 0304 	add.w	r3, r0, #4
 80064fa:	d50a      	bpl.n	8006512 <_printf_i+0xce>
 80064fc:	6805      	ldr	r5, [r0, #0]
 80064fe:	600b      	str	r3, [r1, #0]
 8006500:	2d00      	cmp	r5, #0
 8006502:	da03      	bge.n	800650c <_printf_i+0xc8>
 8006504:	232d      	movs	r3, #45	; 0x2d
 8006506:	426d      	negs	r5, r5
 8006508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800650c:	485e      	ldr	r0, [pc, #376]	; (8006688 <_printf_i+0x244>)
 800650e:	230a      	movs	r3, #10
 8006510:	e019      	b.n	8006546 <_printf_i+0x102>
 8006512:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006516:	6805      	ldr	r5, [r0, #0]
 8006518:	600b      	str	r3, [r1, #0]
 800651a:	bf18      	it	ne
 800651c:	b22d      	sxthne	r5, r5
 800651e:	e7ef      	b.n	8006500 <_printf_i+0xbc>
 8006520:	680b      	ldr	r3, [r1, #0]
 8006522:	6825      	ldr	r5, [r4, #0]
 8006524:	1d18      	adds	r0, r3, #4
 8006526:	6008      	str	r0, [r1, #0]
 8006528:	0628      	lsls	r0, r5, #24
 800652a:	d501      	bpl.n	8006530 <_printf_i+0xec>
 800652c:	681d      	ldr	r5, [r3, #0]
 800652e:	e002      	b.n	8006536 <_printf_i+0xf2>
 8006530:	0669      	lsls	r1, r5, #25
 8006532:	d5fb      	bpl.n	800652c <_printf_i+0xe8>
 8006534:	881d      	ldrh	r5, [r3, #0]
 8006536:	4854      	ldr	r0, [pc, #336]	; (8006688 <_printf_i+0x244>)
 8006538:	2f6f      	cmp	r7, #111	; 0x6f
 800653a:	bf0c      	ite	eq
 800653c:	2308      	moveq	r3, #8
 800653e:	230a      	movne	r3, #10
 8006540:	2100      	movs	r1, #0
 8006542:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006546:	6866      	ldr	r6, [r4, #4]
 8006548:	60a6      	str	r6, [r4, #8]
 800654a:	2e00      	cmp	r6, #0
 800654c:	bfa2      	ittt	ge
 800654e:	6821      	ldrge	r1, [r4, #0]
 8006550:	f021 0104 	bicge.w	r1, r1, #4
 8006554:	6021      	strge	r1, [r4, #0]
 8006556:	b90d      	cbnz	r5, 800655c <_printf_i+0x118>
 8006558:	2e00      	cmp	r6, #0
 800655a:	d04d      	beq.n	80065f8 <_printf_i+0x1b4>
 800655c:	4616      	mov	r6, r2
 800655e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006562:	fb03 5711 	mls	r7, r3, r1, r5
 8006566:	5dc7      	ldrb	r7, [r0, r7]
 8006568:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800656c:	462f      	mov	r7, r5
 800656e:	42bb      	cmp	r3, r7
 8006570:	460d      	mov	r5, r1
 8006572:	d9f4      	bls.n	800655e <_printf_i+0x11a>
 8006574:	2b08      	cmp	r3, #8
 8006576:	d10b      	bne.n	8006590 <_printf_i+0x14c>
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	07df      	lsls	r7, r3, #31
 800657c:	d508      	bpl.n	8006590 <_printf_i+0x14c>
 800657e:	6923      	ldr	r3, [r4, #16]
 8006580:	6861      	ldr	r1, [r4, #4]
 8006582:	4299      	cmp	r1, r3
 8006584:	bfde      	ittt	le
 8006586:	2330      	movle	r3, #48	; 0x30
 8006588:	f806 3c01 	strble.w	r3, [r6, #-1]
 800658c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006590:	1b92      	subs	r2, r2, r6
 8006592:	6122      	str	r2, [r4, #16]
 8006594:	f8cd a000 	str.w	sl, [sp]
 8006598:	464b      	mov	r3, r9
 800659a:	aa03      	add	r2, sp, #12
 800659c:	4621      	mov	r1, r4
 800659e:	4640      	mov	r0, r8
 80065a0:	f7ff fee2 	bl	8006368 <_printf_common>
 80065a4:	3001      	adds	r0, #1
 80065a6:	d14c      	bne.n	8006642 <_printf_i+0x1fe>
 80065a8:	f04f 30ff 	mov.w	r0, #4294967295
 80065ac:	b004      	add	sp, #16
 80065ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065b2:	4835      	ldr	r0, [pc, #212]	; (8006688 <_printf_i+0x244>)
 80065b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80065b8:	6823      	ldr	r3, [r4, #0]
 80065ba:	680e      	ldr	r6, [r1, #0]
 80065bc:	061f      	lsls	r7, r3, #24
 80065be:	f856 5b04 	ldr.w	r5, [r6], #4
 80065c2:	600e      	str	r6, [r1, #0]
 80065c4:	d514      	bpl.n	80065f0 <_printf_i+0x1ac>
 80065c6:	07d9      	lsls	r1, r3, #31
 80065c8:	bf44      	itt	mi
 80065ca:	f043 0320 	orrmi.w	r3, r3, #32
 80065ce:	6023      	strmi	r3, [r4, #0]
 80065d0:	b91d      	cbnz	r5, 80065da <_printf_i+0x196>
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	f023 0320 	bic.w	r3, r3, #32
 80065d8:	6023      	str	r3, [r4, #0]
 80065da:	2310      	movs	r3, #16
 80065dc:	e7b0      	b.n	8006540 <_printf_i+0xfc>
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	f043 0320 	orr.w	r3, r3, #32
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	2378      	movs	r3, #120	; 0x78
 80065e8:	4828      	ldr	r0, [pc, #160]	; (800668c <_printf_i+0x248>)
 80065ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065ee:	e7e3      	b.n	80065b8 <_printf_i+0x174>
 80065f0:	065e      	lsls	r6, r3, #25
 80065f2:	bf48      	it	mi
 80065f4:	b2ad      	uxthmi	r5, r5
 80065f6:	e7e6      	b.n	80065c6 <_printf_i+0x182>
 80065f8:	4616      	mov	r6, r2
 80065fa:	e7bb      	b.n	8006574 <_printf_i+0x130>
 80065fc:	680b      	ldr	r3, [r1, #0]
 80065fe:	6826      	ldr	r6, [r4, #0]
 8006600:	6960      	ldr	r0, [r4, #20]
 8006602:	1d1d      	adds	r5, r3, #4
 8006604:	600d      	str	r5, [r1, #0]
 8006606:	0635      	lsls	r5, r6, #24
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	d501      	bpl.n	8006610 <_printf_i+0x1cc>
 800660c:	6018      	str	r0, [r3, #0]
 800660e:	e002      	b.n	8006616 <_printf_i+0x1d2>
 8006610:	0671      	lsls	r1, r6, #25
 8006612:	d5fb      	bpl.n	800660c <_printf_i+0x1c8>
 8006614:	8018      	strh	r0, [r3, #0]
 8006616:	2300      	movs	r3, #0
 8006618:	6123      	str	r3, [r4, #16]
 800661a:	4616      	mov	r6, r2
 800661c:	e7ba      	b.n	8006594 <_printf_i+0x150>
 800661e:	680b      	ldr	r3, [r1, #0]
 8006620:	1d1a      	adds	r2, r3, #4
 8006622:	600a      	str	r2, [r1, #0]
 8006624:	681e      	ldr	r6, [r3, #0]
 8006626:	6862      	ldr	r2, [r4, #4]
 8006628:	2100      	movs	r1, #0
 800662a:	4630      	mov	r0, r6
 800662c:	f7f9 fdd0 	bl	80001d0 <memchr>
 8006630:	b108      	cbz	r0, 8006636 <_printf_i+0x1f2>
 8006632:	1b80      	subs	r0, r0, r6
 8006634:	6060      	str	r0, [r4, #4]
 8006636:	6863      	ldr	r3, [r4, #4]
 8006638:	6123      	str	r3, [r4, #16]
 800663a:	2300      	movs	r3, #0
 800663c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006640:	e7a8      	b.n	8006594 <_printf_i+0x150>
 8006642:	6923      	ldr	r3, [r4, #16]
 8006644:	4632      	mov	r2, r6
 8006646:	4649      	mov	r1, r9
 8006648:	4640      	mov	r0, r8
 800664a:	47d0      	blx	sl
 800664c:	3001      	adds	r0, #1
 800664e:	d0ab      	beq.n	80065a8 <_printf_i+0x164>
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	079b      	lsls	r3, r3, #30
 8006654:	d413      	bmi.n	800667e <_printf_i+0x23a>
 8006656:	68e0      	ldr	r0, [r4, #12]
 8006658:	9b03      	ldr	r3, [sp, #12]
 800665a:	4298      	cmp	r0, r3
 800665c:	bfb8      	it	lt
 800665e:	4618      	movlt	r0, r3
 8006660:	e7a4      	b.n	80065ac <_printf_i+0x168>
 8006662:	2301      	movs	r3, #1
 8006664:	4632      	mov	r2, r6
 8006666:	4649      	mov	r1, r9
 8006668:	4640      	mov	r0, r8
 800666a:	47d0      	blx	sl
 800666c:	3001      	adds	r0, #1
 800666e:	d09b      	beq.n	80065a8 <_printf_i+0x164>
 8006670:	3501      	adds	r5, #1
 8006672:	68e3      	ldr	r3, [r4, #12]
 8006674:	9903      	ldr	r1, [sp, #12]
 8006676:	1a5b      	subs	r3, r3, r1
 8006678:	42ab      	cmp	r3, r5
 800667a:	dcf2      	bgt.n	8006662 <_printf_i+0x21e>
 800667c:	e7eb      	b.n	8006656 <_printf_i+0x212>
 800667e:	2500      	movs	r5, #0
 8006680:	f104 0619 	add.w	r6, r4, #25
 8006684:	e7f5      	b.n	8006672 <_printf_i+0x22e>
 8006686:	bf00      	nop
 8006688:	08006939 	.word	0x08006939
 800668c:	0800694a 	.word	0x0800694a

08006690 <memcpy>:
 8006690:	440a      	add	r2, r1
 8006692:	4291      	cmp	r1, r2
 8006694:	f100 33ff 	add.w	r3, r0, #4294967295
 8006698:	d100      	bne.n	800669c <memcpy+0xc>
 800669a:	4770      	bx	lr
 800669c:	b510      	push	{r4, lr}
 800669e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066a6:	4291      	cmp	r1, r2
 80066a8:	d1f9      	bne.n	800669e <memcpy+0xe>
 80066aa:	bd10      	pop	{r4, pc}

080066ac <memmove>:
 80066ac:	4288      	cmp	r0, r1
 80066ae:	b510      	push	{r4, lr}
 80066b0:	eb01 0402 	add.w	r4, r1, r2
 80066b4:	d902      	bls.n	80066bc <memmove+0x10>
 80066b6:	4284      	cmp	r4, r0
 80066b8:	4623      	mov	r3, r4
 80066ba:	d807      	bhi.n	80066cc <memmove+0x20>
 80066bc:	1e43      	subs	r3, r0, #1
 80066be:	42a1      	cmp	r1, r4
 80066c0:	d008      	beq.n	80066d4 <memmove+0x28>
 80066c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066ca:	e7f8      	b.n	80066be <memmove+0x12>
 80066cc:	4402      	add	r2, r0
 80066ce:	4601      	mov	r1, r0
 80066d0:	428a      	cmp	r2, r1
 80066d2:	d100      	bne.n	80066d6 <memmove+0x2a>
 80066d4:	bd10      	pop	{r4, pc}
 80066d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066de:	e7f7      	b.n	80066d0 <memmove+0x24>

080066e0 <_free_r>:
 80066e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066e2:	2900      	cmp	r1, #0
 80066e4:	d048      	beq.n	8006778 <_free_r+0x98>
 80066e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066ea:	9001      	str	r0, [sp, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f1a1 0404 	sub.w	r4, r1, #4
 80066f2:	bfb8      	it	lt
 80066f4:	18e4      	addlt	r4, r4, r3
 80066f6:	f000 f8d3 	bl	80068a0 <__malloc_lock>
 80066fa:	4a20      	ldr	r2, [pc, #128]	; (800677c <_free_r+0x9c>)
 80066fc:	9801      	ldr	r0, [sp, #4]
 80066fe:	6813      	ldr	r3, [r2, #0]
 8006700:	4615      	mov	r5, r2
 8006702:	b933      	cbnz	r3, 8006712 <_free_r+0x32>
 8006704:	6063      	str	r3, [r4, #4]
 8006706:	6014      	str	r4, [r2, #0]
 8006708:	b003      	add	sp, #12
 800670a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800670e:	f000 b8cd 	b.w	80068ac <__malloc_unlock>
 8006712:	42a3      	cmp	r3, r4
 8006714:	d90b      	bls.n	800672e <_free_r+0x4e>
 8006716:	6821      	ldr	r1, [r4, #0]
 8006718:	1862      	adds	r2, r4, r1
 800671a:	4293      	cmp	r3, r2
 800671c:	bf04      	itt	eq
 800671e:	681a      	ldreq	r2, [r3, #0]
 8006720:	685b      	ldreq	r3, [r3, #4]
 8006722:	6063      	str	r3, [r4, #4]
 8006724:	bf04      	itt	eq
 8006726:	1852      	addeq	r2, r2, r1
 8006728:	6022      	streq	r2, [r4, #0]
 800672a:	602c      	str	r4, [r5, #0]
 800672c:	e7ec      	b.n	8006708 <_free_r+0x28>
 800672e:	461a      	mov	r2, r3
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	b10b      	cbz	r3, 8006738 <_free_r+0x58>
 8006734:	42a3      	cmp	r3, r4
 8006736:	d9fa      	bls.n	800672e <_free_r+0x4e>
 8006738:	6811      	ldr	r1, [r2, #0]
 800673a:	1855      	adds	r5, r2, r1
 800673c:	42a5      	cmp	r5, r4
 800673e:	d10b      	bne.n	8006758 <_free_r+0x78>
 8006740:	6824      	ldr	r4, [r4, #0]
 8006742:	4421      	add	r1, r4
 8006744:	1854      	adds	r4, r2, r1
 8006746:	42a3      	cmp	r3, r4
 8006748:	6011      	str	r1, [r2, #0]
 800674a:	d1dd      	bne.n	8006708 <_free_r+0x28>
 800674c:	681c      	ldr	r4, [r3, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	6053      	str	r3, [r2, #4]
 8006752:	4421      	add	r1, r4
 8006754:	6011      	str	r1, [r2, #0]
 8006756:	e7d7      	b.n	8006708 <_free_r+0x28>
 8006758:	d902      	bls.n	8006760 <_free_r+0x80>
 800675a:	230c      	movs	r3, #12
 800675c:	6003      	str	r3, [r0, #0]
 800675e:	e7d3      	b.n	8006708 <_free_r+0x28>
 8006760:	6825      	ldr	r5, [r4, #0]
 8006762:	1961      	adds	r1, r4, r5
 8006764:	428b      	cmp	r3, r1
 8006766:	bf04      	itt	eq
 8006768:	6819      	ldreq	r1, [r3, #0]
 800676a:	685b      	ldreq	r3, [r3, #4]
 800676c:	6063      	str	r3, [r4, #4]
 800676e:	bf04      	itt	eq
 8006770:	1949      	addeq	r1, r1, r5
 8006772:	6021      	streq	r1, [r4, #0]
 8006774:	6054      	str	r4, [r2, #4]
 8006776:	e7c7      	b.n	8006708 <_free_r+0x28>
 8006778:	b003      	add	sp, #12
 800677a:	bd30      	pop	{r4, r5, pc}
 800677c:	200000d0 	.word	0x200000d0

08006780 <_malloc_r>:
 8006780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006782:	1ccd      	adds	r5, r1, #3
 8006784:	f025 0503 	bic.w	r5, r5, #3
 8006788:	3508      	adds	r5, #8
 800678a:	2d0c      	cmp	r5, #12
 800678c:	bf38      	it	cc
 800678e:	250c      	movcc	r5, #12
 8006790:	2d00      	cmp	r5, #0
 8006792:	4606      	mov	r6, r0
 8006794:	db01      	blt.n	800679a <_malloc_r+0x1a>
 8006796:	42a9      	cmp	r1, r5
 8006798:	d903      	bls.n	80067a2 <_malloc_r+0x22>
 800679a:	230c      	movs	r3, #12
 800679c:	6033      	str	r3, [r6, #0]
 800679e:	2000      	movs	r0, #0
 80067a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067a2:	f000 f87d 	bl	80068a0 <__malloc_lock>
 80067a6:	4921      	ldr	r1, [pc, #132]	; (800682c <_malloc_r+0xac>)
 80067a8:	680a      	ldr	r2, [r1, #0]
 80067aa:	4614      	mov	r4, r2
 80067ac:	b99c      	cbnz	r4, 80067d6 <_malloc_r+0x56>
 80067ae:	4f20      	ldr	r7, [pc, #128]	; (8006830 <_malloc_r+0xb0>)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	b923      	cbnz	r3, 80067be <_malloc_r+0x3e>
 80067b4:	4621      	mov	r1, r4
 80067b6:	4630      	mov	r0, r6
 80067b8:	f000 f862 	bl	8006880 <_sbrk_r>
 80067bc:	6038      	str	r0, [r7, #0]
 80067be:	4629      	mov	r1, r5
 80067c0:	4630      	mov	r0, r6
 80067c2:	f000 f85d 	bl	8006880 <_sbrk_r>
 80067c6:	1c43      	adds	r3, r0, #1
 80067c8:	d123      	bne.n	8006812 <_malloc_r+0x92>
 80067ca:	230c      	movs	r3, #12
 80067cc:	6033      	str	r3, [r6, #0]
 80067ce:	4630      	mov	r0, r6
 80067d0:	f000 f86c 	bl	80068ac <__malloc_unlock>
 80067d4:	e7e3      	b.n	800679e <_malloc_r+0x1e>
 80067d6:	6823      	ldr	r3, [r4, #0]
 80067d8:	1b5b      	subs	r3, r3, r5
 80067da:	d417      	bmi.n	800680c <_malloc_r+0x8c>
 80067dc:	2b0b      	cmp	r3, #11
 80067de:	d903      	bls.n	80067e8 <_malloc_r+0x68>
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	441c      	add	r4, r3
 80067e4:	6025      	str	r5, [r4, #0]
 80067e6:	e004      	b.n	80067f2 <_malloc_r+0x72>
 80067e8:	6863      	ldr	r3, [r4, #4]
 80067ea:	42a2      	cmp	r2, r4
 80067ec:	bf0c      	ite	eq
 80067ee:	600b      	streq	r3, [r1, #0]
 80067f0:	6053      	strne	r3, [r2, #4]
 80067f2:	4630      	mov	r0, r6
 80067f4:	f000 f85a 	bl	80068ac <__malloc_unlock>
 80067f8:	f104 000b 	add.w	r0, r4, #11
 80067fc:	1d23      	adds	r3, r4, #4
 80067fe:	f020 0007 	bic.w	r0, r0, #7
 8006802:	1ac2      	subs	r2, r0, r3
 8006804:	d0cc      	beq.n	80067a0 <_malloc_r+0x20>
 8006806:	1a1b      	subs	r3, r3, r0
 8006808:	50a3      	str	r3, [r4, r2]
 800680a:	e7c9      	b.n	80067a0 <_malloc_r+0x20>
 800680c:	4622      	mov	r2, r4
 800680e:	6864      	ldr	r4, [r4, #4]
 8006810:	e7cc      	b.n	80067ac <_malloc_r+0x2c>
 8006812:	1cc4      	adds	r4, r0, #3
 8006814:	f024 0403 	bic.w	r4, r4, #3
 8006818:	42a0      	cmp	r0, r4
 800681a:	d0e3      	beq.n	80067e4 <_malloc_r+0x64>
 800681c:	1a21      	subs	r1, r4, r0
 800681e:	4630      	mov	r0, r6
 8006820:	f000 f82e 	bl	8006880 <_sbrk_r>
 8006824:	3001      	adds	r0, #1
 8006826:	d1dd      	bne.n	80067e4 <_malloc_r+0x64>
 8006828:	e7cf      	b.n	80067ca <_malloc_r+0x4a>
 800682a:	bf00      	nop
 800682c:	200000d0 	.word	0x200000d0
 8006830:	200000d4 	.word	0x200000d4

08006834 <_realloc_r>:
 8006834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006836:	4607      	mov	r7, r0
 8006838:	4614      	mov	r4, r2
 800683a:	460e      	mov	r6, r1
 800683c:	b921      	cbnz	r1, 8006848 <_realloc_r+0x14>
 800683e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006842:	4611      	mov	r1, r2
 8006844:	f7ff bf9c 	b.w	8006780 <_malloc_r>
 8006848:	b922      	cbnz	r2, 8006854 <_realloc_r+0x20>
 800684a:	f7ff ff49 	bl	80066e0 <_free_r>
 800684e:	4625      	mov	r5, r4
 8006850:	4628      	mov	r0, r5
 8006852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006854:	f000 f830 	bl	80068b8 <_malloc_usable_size_r>
 8006858:	42a0      	cmp	r0, r4
 800685a:	d20f      	bcs.n	800687c <_realloc_r+0x48>
 800685c:	4621      	mov	r1, r4
 800685e:	4638      	mov	r0, r7
 8006860:	f7ff ff8e 	bl	8006780 <_malloc_r>
 8006864:	4605      	mov	r5, r0
 8006866:	2800      	cmp	r0, #0
 8006868:	d0f2      	beq.n	8006850 <_realloc_r+0x1c>
 800686a:	4631      	mov	r1, r6
 800686c:	4622      	mov	r2, r4
 800686e:	f7ff ff0f 	bl	8006690 <memcpy>
 8006872:	4631      	mov	r1, r6
 8006874:	4638      	mov	r0, r7
 8006876:	f7ff ff33 	bl	80066e0 <_free_r>
 800687a:	e7e9      	b.n	8006850 <_realloc_r+0x1c>
 800687c:	4635      	mov	r5, r6
 800687e:	e7e7      	b.n	8006850 <_realloc_r+0x1c>

08006880 <_sbrk_r>:
 8006880:	b538      	push	{r3, r4, r5, lr}
 8006882:	4d06      	ldr	r5, [pc, #24]	; (800689c <_sbrk_r+0x1c>)
 8006884:	2300      	movs	r3, #0
 8006886:	4604      	mov	r4, r0
 8006888:	4608      	mov	r0, r1
 800688a:	602b      	str	r3, [r5, #0]
 800688c:	f7fb f838 	bl	8001900 <_sbrk>
 8006890:	1c43      	adds	r3, r0, #1
 8006892:	d102      	bne.n	800689a <_sbrk_r+0x1a>
 8006894:	682b      	ldr	r3, [r5, #0]
 8006896:	b103      	cbz	r3, 800689a <_sbrk_r+0x1a>
 8006898:	6023      	str	r3, [r4, #0]
 800689a:	bd38      	pop	{r3, r4, r5, pc}
 800689c:	20000334 	.word	0x20000334

080068a0 <__malloc_lock>:
 80068a0:	4801      	ldr	r0, [pc, #4]	; (80068a8 <__malloc_lock+0x8>)
 80068a2:	f000 b811 	b.w	80068c8 <__retarget_lock_acquire_recursive>
 80068a6:	bf00      	nop
 80068a8:	2000033c 	.word	0x2000033c

080068ac <__malloc_unlock>:
 80068ac:	4801      	ldr	r0, [pc, #4]	; (80068b4 <__malloc_unlock+0x8>)
 80068ae:	f000 b80c 	b.w	80068ca <__retarget_lock_release_recursive>
 80068b2:	bf00      	nop
 80068b4:	2000033c 	.word	0x2000033c

080068b8 <_malloc_usable_size_r>:
 80068b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068bc:	1f18      	subs	r0, r3, #4
 80068be:	2b00      	cmp	r3, #0
 80068c0:	bfbc      	itt	lt
 80068c2:	580b      	ldrlt	r3, [r1, r0]
 80068c4:	18c0      	addlt	r0, r0, r3
 80068c6:	4770      	bx	lr

080068c8 <__retarget_lock_acquire_recursive>:
 80068c8:	4770      	bx	lr

080068ca <__retarget_lock_release_recursive>:
 80068ca:	4770      	bx	lr

080068cc <_init>:
 80068cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ce:	bf00      	nop
 80068d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068d2:	bc08      	pop	{r3}
 80068d4:	469e      	mov	lr, r3
 80068d6:	4770      	bx	lr

080068d8 <_fini>:
 80068d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068da:	bf00      	nop
 80068dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068de:	bc08      	pop	{r3}
 80068e0:	469e      	mov	lr, r3
 80068e2:	4770      	bx	lr
