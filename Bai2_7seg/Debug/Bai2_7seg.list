
Bai2_7seg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005314  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800549c  0800549c  0001549c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054b4  080054b4  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  080054b4  080054b4  000154b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054bc  080054bc  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054bc  080054bc  000154bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054c0  080054c0  000154c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080054c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          0000020c  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000234  20000234  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b19d  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003868  00000000  00000000  0003b1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c8  00000000  00000000  0003ea60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001368  00000000  00000000  0003ff28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023fff  00000000  00000000  00041290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b14f  00000000  00000000  0006528f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d30db  00000000  00000000  000803de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001534b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000577c  00000000  00000000  0015350c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005484 	.word	0x08005484

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	08005484 	.word	0x08005484

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b96e 	b.w	8000c98 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468c      	mov	ip, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f040 8083 	bne.w	8000aea <__udivmoddi4+0x116>
 80009e4:	428a      	cmp	r2, r1
 80009e6:	4617      	mov	r7, r2
 80009e8:	d947      	bls.n	8000a7a <__udivmoddi4+0xa6>
 80009ea:	fab2 f282 	clz	r2, r2
 80009ee:	b142      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009f0:	f1c2 0020 	rsb	r0, r2, #32
 80009f4:	fa24 f000 	lsr.w	r0, r4, r0
 80009f8:	4091      	lsls	r1, r2
 80009fa:	4097      	lsls	r7, r2
 80009fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000a00:	4094      	lsls	r4, r2
 8000a02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a06:	0c23      	lsrs	r3, r4, #16
 8000a08:	fbbc f6f8 	udiv	r6, ip, r8
 8000a0c:	fa1f fe87 	uxth.w	lr, r7
 8000a10:	fb08 c116 	mls	r1, r8, r6, ip
 8000a14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a18:	fb06 f10e 	mul.w	r1, r6, lr
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d909      	bls.n	8000a34 <__udivmoddi4+0x60>
 8000a20:	18fb      	adds	r3, r7, r3
 8000a22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a26:	f080 8119 	bcs.w	8000c5c <__udivmoddi4+0x288>
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	f240 8116 	bls.w	8000c5c <__udivmoddi4+0x288>
 8000a30:	3e02      	subs	r6, #2
 8000a32:	443b      	add	r3, r7
 8000a34:	1a5b      	subs	r3, r3, r1
 8000a36:	b2a4      	uxth	r4, r4
 8000a38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a48:	45a6      	cmp	lr, r4
 8000a4a:	d909      	bls.n	8000a60 <__udivmoddi4+0x8c>
 8000a4c:	193c      	adds	r4, r7, r4
 8000a4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a52:	f080 8105 	bcs.w	8000c60 <__udivmoddi4+0x28c>
 8000a56:	45a6      	cmp	lr, r4
 8000a58:	f240 8102 	bls.w	8000c60 <__udivmoddi4+0x28c>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	443c      	add	r4, r7
 8000a60:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a64:	eba4 040e 	sub.w	r4, r4, lr
 8000a68:	2600      	movs	r6, #0
 8000a6a:	b11d      	cbz	r5, 8000a74 <__udivmoddi4+0xa0>
 8000a6c:	40d4      	lsrs	r4, r2
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e9c5 4300 	strd	r4, r3, [r5]
 8000a74:	4631      	mov	r1, r6
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	b902      	cbnz	r2, 8000a7e <__udivmoddi4+0xaa>
 8000a7c:	deff      	udf	#255	; 0xff
 8000a7e:	fab2 f282 	clz	r2, r2
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d150      	bne.n	8000b28 <__udivmoddi4+0x154>
 8000a86:	1bcb      	subs	r3, r1, r7
 8000a88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a8c:	fa1f f887 	uxth.w	r8, r7
 8000a90:	2601      	movs	r6, #1
 8000a92:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a96:	0c21      	lsrs	r1, r4, #16
 8000a98:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aa0:	fb08 f30c 	mul.w	r3, r8, ip
 8000aa4:	428b      	cmp	r3, r1
 8000aa6:	d907      	bls.n	8000ab8 <__udivmoddi4+0xe4>
 8000aa8:	1879      	adds	r1, r7, r1
 8000aaa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aae:	d202      	bcs.n	8000ab6 <__udivmoddi4+0xe2>
 8000ab0:	428b      	cmp	r3, r1
 8000ab2:	f200 80e9 	bhi.w	8000c88 <__udivmoddi4+0x2b4>
 8000ab6:	4684      	mov	ip, r0
 8000ab8:	1ac9      	subs	r1, r1, r3
 8000aba:	b2a3      	uxth	r3, r4
 8000abc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ac0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ac4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ac8:	fb08 f800 	mul.w	r8, r8, r0
 8000acc:	45a0      	cmp	r8, r4
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x10c>
 8000ad0:	193c      	adds	r4, r7, r4
 8000ad2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ad6:	d202      	bcs.n	8000ade <__udivmoddi4+0x10a>
 8000ad8:	45a0      	cmp	r8, r4
 8000ada:	f200 80d9 	bhi.w	8000c90 <__udivmoddi4+0x2bc>
 8000ade:	4618      	mov	r0, r3
 8000ae0:	eba4 0408 	sub.w	r4, r4, r8
 8000ae4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ae8:	e7bf      	b.n	8000a6a <__udivmoddi4+0x96>
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0x12e>
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	f000 80b1 	beq.w	8000c56 <__udivmoddi4+0x282>
 8000af4:	2600      	movs	r6, #0
 8000af6:	e9c5 0100 	strd	r0, r1, [r5]
 8000afa:	4630      	mov	r0, r6
 8000afc:	4631      	mov	r1, r6
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	fab3 f683 	clz	r6, r3
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	d14a      	bne.n	8000ba0 <__udivmoddi4+0x1cc>
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d302      	bcc.n	8000b14 <__udivmoddi4+0x140>
 8000b0e:	4282      	cmp	r2, r0
 8000b10:	f200 80b8 	bhi.w	8000c84 <__udivmoddi4+0x2b0>
 8000b14:	1a84      	subs	r4, r0, r2
 8000b16:	eb61 0103 	sbc.w	r1, r1, r3
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	468c      	mov	ip, r1
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	d0a8      	beq.n	8000a74 <__udivmoddi4+0xa0>
 8000b22:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b26:	e7a5      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000b28:	f1c2 0320 	rsb	r3, r2, #32
 8000b2c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b30:	4097      	lsls	r7, r2
 8000b32:	fa01 f002 	lsl.w	r0, r1, r2
 8000b36:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b3a:	40d9      	lsrs	r1, r3
 8000b3c:	4330      	orrs	r0, r6
 8000b3e:	0c03      	lsrs	r3, r0, #16
 8000b40:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b50:	fb06 f108 	mul.w	r1, r6, r8
 8000b54:	4299      	cmp	r1, r3
 8000b56:	fa04 f402 	lsl.w	r4, r4, r2
 8000b5a:	d909      	bls.n	8000b70 <__udivmoddi4+0x19c>
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b62:	f080 808d 	bcs.w	8000c80 <__udivmoddi4+0x2ac>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 808a 	bls.w	8000c80 <__udivmoddi4+0x2ac>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	443b      	add	r3, r7
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b281      	uxth	r1, r0
 8000b74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b80:	fb00 f308 	mul.w	r3, r0, r8
 8000b84:	428b      	cmp	r3, r1
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x1c4>
 8000b88:	1879      	adds	r1, r7, r1
 8000b8a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b8e:	d273      	bcs.n	8000c78 <__udivmoddi4+0x2a4>
 8000b90:	428b      	cmp	r3, r1
 8000b92:	d971      	bls.n	8000c78 <__udivmoddi4+0x2a4>
 8000b94:	3802      	subs	r0, #2
 8000b96:	4439      	add	r1, r7
 8000b98:	1acb      	subs	r3, r1, r3
 8000b9a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b9e:	e778      	b.n	8000a92 <__udivmoddi4+0xbe>
 8000ba0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ba4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ba8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bac:	431c      	orrs	r4, r3
 8000bae:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bb2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bb6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bba:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bbe:	431f      	orrs	r7, r3
 8000bc0:	0c3b      	lsrs	r3, r7, #16
 8000bc2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bc6:	fa1f f884 	uxth.w	r8, r4
 8000bca:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bd2:	fb09 fa08 	mul.w	sl, r9, r8
 8000bd6:	458a      	cmp	sl, r1
 8000bd8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bdc:	fa00 f306 	lsl.w	r3, r0, r6
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x220>
 8000be2:	1861      	adds	r1, r4, r1
 8000be4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000be8:	d248      	bcs.n	8000c7c <__udivmoddi4+0x2a8>
 8000bea:	458a      	cmp	sl, r1
 8000bec:	d946      	bls.n	8000c7c <__udivmoddi4+0x2a8>
 8000bee:	f1a9 0902 	sub.w	r9, r9, #2
 8000bf2:	4421      	add	r1, r4
 8000bf4:	eba1 010a 	sub.w	r1, r1, sl
 8000bf8:	b2bf      	uxth	r7, r7
 8000bfa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bfe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c02:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c06:	fb00 f808 	mul.w	r8, r0, r8
 8000c0a:	45b8      	cmp	r8, r7
 8000c0c:	d907      	bls.n	8000c1e <__udivmoddi4+0x24a>
 8000c0e:	19e7      	adds	r7, r4, r7
 8000c10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c14:	d22e      	bcs.n	8000c74 <__udivmoddi4+0x2a0>
 8000c16:	45b8      	cmp	r8, r7
 8000c18:	d92c      	bls.n	8000c74 <__udivmoddi4+0x2a0>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4427      	add	r7, r4
 8000c1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c22:	eba7 0708 	sub.w	r7, r7, r8
 8000c26:	fba0 8902 	umull	r8, r9, r0, r2
 8000c2a:	454f      	cmp	r7, r9
 8000c2c:	46c6      	mov	lr, r8
 8000c2e:	4649      	mov	r1, r9
 8000c30:	d31a      	bcc.n	8000c68 <__udivmoddi4+0x294>
 8000c32:	d017      	beq.n	8000c64 <__udivmoddi4+0x290>
 8000c34:	b15d      	cbz	r5, 8000c4e <__udivmoddi4+0x27a>
 8000c36:	ebb3 020e 	subs.w	r2, r3, lr
 8000c3a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c3e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c42:	40f2      	lsrs	r2, r6
 8000c44:	ea4c 0202 	orr.w	r2, ip, r2
 8000c48:	40f7      	lsrs	r7, r6
 8000c4a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c4e:	2600      	movs	r6, #0
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	462e      	mov	r6, r5
 8000c58:	4628      	mov	r0, r5
 8000c5a:	e70b      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000c5c:	4606      	mov	r6, r0
 8000c5e:	e6e9      	b.n	8000a34 <__udivmoddi4+0x60>
 8000c60:	4618      	mov	r0, r3
 8000c62:	e6fd      	b.n	8000a60 <__udivmoddi4+0x8c>
 8000c64:	4543      	cmp	r3, r8
 8000c66:	d2e5      	bcs.n	8000c34 <__udivmoddi4+0x260>
 8000c68:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c6c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c70:	3801      	subs	r0, #1
 8000c72:	e7df      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c74:	4608      	mov	r0, r1
 8000c76:	e7d2      	b.n	8000c1e <__udivmoddi4+0x24a>
 8000c78:	4660      	mov	r0, ip
 8000c7a:	e78d      	b.n	8000b98 <__udivmoddi4+0x1c4>
 8000c7c:	4681      	mov	r9, r0
 8000c7e:	e7b9      	b.n	8000bf4 <__udivmoddi4+0x220>
 8000c80:	4666      	mov	r6, ip
 8000c82:	e775      	b.n	8000b70 <__udivmoddi4+0x19c>
 8000c84:	4630      	mov	r0, r6
 8000c86:	e74a      	b.n	8000b1e <__udivmoddi4+0x14a>
 8000c88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c8c:	4439      	add	r1, r7
 8000c8e:	e713      	b.n	8000ab8 <__udivmoddi4+0xe4>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	e724      	b.n	8000ae0 <__udivmoddi4+0x10c>
 8000c96:	bf00      	nop

08000c98 <__aeabi_idiv0>:
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2108      	movs	r1, #8
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <button_init+0x14>)
 8000ca6:	f001 fe01 	bl	80028ac <HAL_GPIO_WritePin>
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40020c00 	.word	0x40020c00

08000cb4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08e      	sub	sp, #56	; 0x38
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]
 8000cca:	615a      	str	r2, [r3, #20]
 8000ccc:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000cce:	463b      	mov	r3, r7
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
 8000cdc:	615a      	str	r2, [r3, #20]
 8000cde:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000ce0:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <MX_FSMC_Init+0xec>)
 8000ce2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000ce6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000ce8:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <MX_FSMC_Init+0xec>)
 8000cea:	4a2e      	ldr	r2, [pc, #184]	; (8000da4 <MX_FSMC_Init+0xf0>)
 8000cec:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000cee:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <MX_FSMC_Init+0xec>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000cf4:	4b2a      	ldr	r3, [pc, #168]	; (8000da0 <MX_FSMC_Init+0xec>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000cfa:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <MX_FSMC_Init+0xec>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000d00:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <MX_FSMC_Init+0xec>)
 8000d02:	2210      	movs	r2, #16
 8000d04:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000d06:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <MX_FSMC_Init+0xec>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000d0c:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <MX_FSMC_Init+0xec>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000d12:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <MX_FSMC_Init+0xec>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000d18:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <MX_FSMC_Init+0xec>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000d1e:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <MX_FSMC_Init+0xec>)
 8000d20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d24:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000d26:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <MX_FSMC_Init+0xec>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000d2c:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <MX_FSMC_Init+0xec>)
 8000d2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d32:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <MX_FSMC_Init+0xec>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <MX_FSMC_Init+0xec>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000d40:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <MX_FSMC_Init+0xec>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000d46:	230f      	movs	r3, #15
 8000d48:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000d4a:	230f      	movs	r3, #15
 8000d4c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000d4e:	233c      	movs	r3, #60	; 0x3c
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000d56:	2310      	movs	r3, #16
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000d5a:	2311      	movs	r3, #17
 8000d5c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000d62:	2308      	movs	r3, #8
 8000d64:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000d66:	230f      	movs	r3, #15
 8000d68:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000d6a:	2309      	movs	r3, #9
 8000d6c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000d72:	2310      	movs	r3, #16
 8000d74:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000d76:	2311      	movs	r3, #17
 8000d78:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000d7e:	463a      	mov	r2, r7
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4619      	mov	r1, r3
 8000d86:	4806      	ldr	r0, [pc, #24]	; (8000da0 <MX_FSMC_Init+0xec>)
 8000d88:	f002 fdf2 	bl	8003970 <HAL_SRAM_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000d92:	f000 fdb5 	bl	8001900 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000d96:	bf00      	nop
 8000d98:	3738      	adds	r7, #56	; 0x38
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000006c 	.word	0x2000006c
 8000da4:	a0000104 	.word	0xa0000104

08000da8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000dbc:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <HAL_FSMC_MspInit+0x88>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d131      	bne.n	8000e28 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <HAL_FSMC_MspInit+0x88>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	603b      	str	r3, [r7, #0]
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <HAL_FSMC_MspInit+0x8c>)
 8000dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dd2:	4a18      	ldr	r2, [pc, #96]	; (8000e34 <HAL_FSMC_MspInit+0x8c>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6393      	str	r3, [r2, #56]	; 0x38
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <HAL_FSMC_MspInit+0x8c>)
 8000ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000de6:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000dea:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000df8:	230c      	movs	r3, #12
 8000dfa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	4619      	mov	r1, r3
 8000e00:	480d      	ldr	r0, [pc, #52]	; (8000e38 <HAL_FSMC_MspInit+0x90>)
 8000e02:	f001 fbb7 	bl	8002574 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000e06:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000e0a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000e18:	230c      	movs	r3, #12
 8000e1a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4806      	ldr	r0, [pc, #24]	; (8000e3c <HAL_FSMC_MspInit+0x94>)
 8000e22:	f001 fba7 	bl	8002574 <HAL_GPIO_Init>
 8000e26:	e000      	b.n	8000e2a <HAL_FSMC_MspInit+0x82>
    return;
 8000e28:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000044 	.word	0x20000044
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40020c00 	.word	0x40020c00

08000e40 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000e48:	f7ff ffae 	bl	8000da8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08c      	sub	sp, #48	; 0x30
 8000e58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
 8000e6e:	4b6f      	ldr	r3, [pc, #444]	; (800102c <MX_GPIO_Init+0x1d8>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a6e      	ldr	r2, [pc, #440]	; (800102c <MX_GPIO_Init+0x1d8>)
 8000e74:	f043 0310 	orr.w	r3, r3, #16
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b6c      	ldr	r3, [pc, #432]	; (800102c <MX_GPIO_Init+0x1d8>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0310 	and.w	r3, r3, #16
 8000e82:	61bb      	str	r3, [r7, #24]
 8000e84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	4b68      	ldr	r3, [pc, #416]	; (800102c <MX_GPIO_Init+0x1d8>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a67      	ldr	r2, [pc, #412]	; (800102c <MX_GPIO_Init+0x1d8>)
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b65      	ldr	r3, [pc, #404]	; (800102c <MX_GPIO_Init+0x1d8>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	4b61      	ldr	r3, [pc, #388]	; (800102c <MX_GPIO_Init+0x1d8>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a60      	ldr	r2, [pc, #384]	; (800102c <MX_GPIO_Init+0x1d8>)
 8000eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b5e      	ldr	r3, [pc, #376]	; (800102c <MX_GPIO_Init+0x1d8>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	4b5a      	ldr	r3, [pc, #360]	; (800102c <MX_GPIO_Init+0x1d8>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a59      	ldr	r2, [pc, #356]	; (800102c <MX_GPIO_Init+0x1d8>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b57      	ldr	r3, [pc, #348]	; (800102c <MX_GPIO_Init+0x1d8>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	4b53      	ldr	r3, [pc, #332]	; (800102c <MX_GPIO_Init+0x1d8>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a52      	ldr	r2, [pc, #328]	; (800102c <MX_GPIO_Init+0x1d8>)
 8000ee4:	f043 0308 	orr.w	r3, r3, #8
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b50      	ldr	r3, [pc, #320]	; (800102c <MX_GPIO_Init+0x1d8>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0308 	and.w	r3, r3, #8
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	4b4c      	ldr	r3, [pc, #304]	; (800102c <MX_GPIO_Init+0x1d8>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a4b      	ldr	r2, [pc, #300]	; (800102c <MX_GPIO_Init+0x1d8>)
 8000f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b49      	ldr	r3, [pc, #292]	; (800102c <MX_GPIO_Init+0x1d8>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	603b      	str	r3, [r7, #0]
 8000f16:	4b45      	ldr	r3, [pc, #276]	; (800102c <MX_GPIO_Init+0x1d8>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a44      	ldr	r2, [pc, #272]	; (800102c <MX_GPIO_Init+0x1d8>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b42      	ldr	r3, [pc, #264]	; (800102c <MX_GPIO_Init+0x1d8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2170      	movs	r1, #112	; 0x70
 8000f32:	483f      	ldr	r0, [pc, #252]	; (8001030 <MX_GPIO_Init+0x1dc>)
 8000f34:	f001 fcba 	bl	80028ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3e:	483d      	ldr	r0, [pc, #244]	; (8001034 <MX_GPIO_Init+0x1e0>)
 8000f40:	f001 fcb4 	bl	80028ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2140      	movs	r1, #64	; 0x40
 8000f48:	483b      	ldr	r0, [pc, #236]	; (8001038 <MX_GPIO_Init+0x1e4>)
 8000f4a:	f001 fcaf 	bl	80028ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f54:	4839      	ldr	r0, [pc, #228]	; (800103c <MX_GPIO_Init+0x1e8>)
 8000f56:	f001 fca9 	bl	80028ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2108      	movs	r1, #8
 8000f5e:	4838      	ldr	r0, [pc, #224]	; (8001040 <MX_GPIO_Init+0x1ec>)
 8000f60:	f001 fca4 	bl	80028ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000f64:	2370      	movs	r3, #112	; 0x70
 8000f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	482d      	ldr	r0, [pc, #180]	; (8001030 <MX_GPIO_Init+0x1dc>)
 8000f7c:	f001 fafa 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000f80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f86:	2301      	movs	r3, #1
 8000f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	4619      	mov	r1, r3
 8000f98:	4826      	ldr	r0, [pc, #152]	; (8001034 <MX_GPIO_Init+0x1e0>)
 8000f9a:	f001 faeb 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000f9e:	23c0      	movs	r3, #192	; 0xc0
 8000fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4822      	ldr	r0, [pc, #136]	; (800103c <MX_GPIO_Init+0x1e8>)
 8000fb2:	f001 fadf 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000fb6:	2330      	movs	r3, #48	; 0x30
 8000fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	481a      	ldr	r0, [pc, #104]	; (8001034 <MX_GPIO_Init+0x1e0>)
 8000fca:	f001 fad3 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000fce:	2340      	movs	r3, #64	; 0x40
 8000fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4814      	ldr	r0, [pc, #80]	; (8001038 <MX_GPIO_Init+0x1e4>)
 8000fe6:	f001 fac5 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000fea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	480e      	ldr	r0, [pc, #56]	; (800103c <MX_GPIO_Init+0x1e8>)
 8001004:	f001 fab6 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001008:	2308      	movs	r3, #8
 800100a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	4808      	ldr	r0, [pc, #32]	; (8001040 <MX_GPIO_Init+0x1ec>)
 8001020:	f001 faa8 	bl	8002574 <HAL_GPIO_Init>

}
 8001024:	bf00      	nop
 8001026:	3730      	adds	r7, #48	; 0x30
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40023800 	.word	0x40023800
 8001030:	40021000 	.word	0x40021000
 8001034:	40020800 	.word	0x40020800
 8001038:	40021800 	.word	0x40021800
 800103c:	40020000 	.word	0x40020000
 8001040:	40020c00 	.word	0x40020c00

08001044 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_I2C1_Init+0x50>)
 800104a:	4a13      	ldr	r2, [pc, #76]	; (8001098 <MX_I2C1_Init+0x54>)
 800104c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_I2C1_Init+0x50>)
 8001050:	4a12      	ldr	r2, [pc, #72]	; (800109c <MX_I2C1_Init+0x58>)
 8001052:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_I2C1_Init+0x50>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_I2C1_Init+0x50>)
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_I2C1_Init+0x50>)
 8001062:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001066:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <MX_I2C1_Init+0x50>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_I2C1_Init+0x50>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <MX_I2C1_Init+0x50>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_I2C1_Init+0x50>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001080:	4804      	ldr	r0, [pc, #16]	; (8001094 <MX_I2C1_Init+0x50>)
 8001082:	f001 fc2d 	bl	80028e0 <HAL_I2C_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800108c:	f000 fc38 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200000bc 	.word	0x200000bc
 8001098:	40005400 	.word	0x40005400
 800109c:	000186a0 	.word	0x000186a0

080010a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a19      	ldr	r2, [pc, #100]	; (8001124 <HAL_I2C_MspInit+0x84>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d12b      	bne.n	800111a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_I2C_MspInit+0x88>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a17      	ldr	r2, [pc, #92]	; (8001128 <HAL_I2C_MspInit+0x88>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_I2C_MspInit+0x88>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010de:	23c0      	movs	r3, #192	; 0xc0
 80010e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e2:	2312      	movs	r3, #18
 80010e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010ee:	2304      	movs	r3, #4
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	480c      	ldr	r0, [pc, #48]	; (800112c <HAL_I2C_MspInit+0x8c>)
 80010fa:	f001 fa3b 	bl	8002574 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <HAL_I2C_MspInit+0x88>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	4a08      	ldr	r2, [pc, #32]	; (8001128 <HAL_I2C_MspInit+0x88>)
 8001108:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800110c:	6413      	str	r3, [r2, #64]	; 0x40
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_I2C_MspInit+0x88>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	; 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40005400 	.word	0x40005400
 8001128:	40023800 	.word	0x40023800
 800112c:	40020400 	.word	0x40020400

08001130 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800113a:	4a04      	ldr	r2, [pc, #16]	; (800114c <LCD_WR_REG+0x1c>)
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	8013      	strh	r3, [r2, #0]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	600ffffe 	.word	0x600ffffe

08001150 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800115a:	4a04      	ldr	r2, [pc, #16]	; (800116c <LCD_WR_DATA+0x1c>)
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	8053      	strh	r3, [r2, #2]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	600ffffe 	.word	0x600ffffe

08001170 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <LCD_RD_DATA+0x20>)
 8001178:	885b      	ldrh	r3, [r3, #2]
 800117a:	b29b      	uxth	r3, r3
 800117c:	80fb      	strh	r3, [r7, #6]
	return ram;
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	b29b      	uxth	r3, r3
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	600ffffe 	.word	0x600ffffe

08001194 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	091b      	lsrs	r3, r3, #4
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d007      	beq.n	80011be <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <lcd_SetDir+0x44>)
 80011b0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011b4:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <lcd_SetDir+0x44>)
 80011b8:	22f0      	movs	r2, #240	; 0xf0
 80011ba:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80011bc:	e006      	b.n	80011cc <lcd_SetDir+0x38>
		lcddev.width=240;
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <lcd_SetDir+0x44>)
 80011c0:	22f0      	movs	r2, #240	; 0xf0
 80011c2:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <lcd_SetDir+0x44>)
 80011c6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011ca:	805a      	strh	r2, [r3, #2]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	20000110 	.word	0x20000110

080011dc <lcd_init>:


void lcd_init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e6:	48aa      	ldr	r0, [pc, #680]	; (8001490 <lcd_init+0x2b4>)
 80011e8:	f001 fb60 	bl	80028ac <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80011ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011f0:	f000 fff8 	bl	80021e4 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80011f4:	2201      	movs	r2, #1
 80011f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011fa:	48a5      	ldr	r0, [pc, #660]	; (8001490 <lcd_init+0x2b4>)
 80011fc:	f001 fb56 	bl	80028ac <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001200:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001204:	f000 ffee 	bl	80021e4 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8001208:	2000      	movs	r0, #0
 800120a:	f7ff ffc3 	bl	8001194 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 800120e:	20d3      	movs	r0, #211	; 0xd3
 8001210:	f7ff ff8e 	bl	8001130 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001214:	f7ff ffac 	bl	8001170 <LCD_RD_DATA>
 8001218:	4603      	mov	r3, r0
 800121a:	461a      	mov	r2, r3
 800121c:	4b9d      	ldr	r3, [pc, #628]	; (8001494 <lcd_init+0x2b8>)
 800121e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001220:	f7ff ffa6 	bl	8001170 <LCD_RD_DATA>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	4b9a      	ldr	r3, [pc, #616]	; (8001494 <lcd_init+0x2b8>)
 800122a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 800122c:	f7ff ffa0 	bl	8001170 <LCD_RD_DATA>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	4b97      	ldr	r3, [pc, #604]	; (8001494 <lcd_init+0x2b8>)
 8001236:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001238:	4b96      	ldr	r3, [pc, #600]	; (8001494 <lcd_init+0x2b8>)
 800123a:	889b      	ldrh	r3, [r3, #4]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b29a      	uxth	r2, r3
 8001240:	4b94      	ldr	r3, [pc, #592]	; (8001494 <lcd_init+0x2b8>)
 8001242:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001244:	f7ff ff94 	bl	8001170 <LCD_RD_DATA>
 8001248:	4603      	mov	r3, r0
 800124a:	461a      	mov	r2, r3
 800124c:	4b91      	ldr	r3, [pc, #580]	; (8001494 <lcd_init+0x2b8>)
 800124e:	889b      	ldrh	r3, [r3, #4]
 8001250:	4313      	orrs	r3, r2
 8001252:	b29a      	uxth	r2, r3
 8001254:	4b8f      	ldr	r3, [pc, #572]	; (8001494 <lcd_init+0x2b8>)
 8001256:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001258:	20cf      	movs	r0, #207	; 0xcf
 800125a:	f7ff ff69 	bl	8001130 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800125e:	2000      	movs	r0, #0
 8001260:	f7ff ff76 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001264:	20c1      	movs	r0, #193	; 0xc1
 8001266:	f7ff ff73 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800126a:	2030      	movs	r0, #48	; 0x30
 800126c:	f7ff ff70 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001270:	20ed      	movs	r0, #237	; 0xed
 8001272:	f7ff ff5d 	bl	8001130 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001276:	2064      	movs	r0, #100	; 0x64
 8001278:	f7ff ff6a 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800127c:	2003      	movs	r0, #3
 800127e:	f7ff ff67 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001282:	2012      	movs	r0, #18
 8001284:	f7ff ff64 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001288:	2081      	movs	r0, #129	; 0x81
 800128a:	f7ff ff61 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800128e:	20e8      	movs	r0, #232	; 0xe8
 8001290:	f7ff ff4e 	bl	8001130 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001294:	2085      	movs	r0, #133	; 0x85
 8001296:	f7ff ff5b 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800129a:	2010      	movs	r0, #16
 800129c:	f7ff ff58 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80012a0:	207a      	movs	r0, #122	; 0x7a
 80012a2:	f7ff ff55 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80012a6:	20cb      	movs	r0, #203	; 0xcb
 80012a8:	f7ff ff42 	bl	8001130 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80012ac:	2039      	movs	r0, #57	; 0x39
 80012ae:	f7ff ff4f 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80012b2:	202c      	movs	r0, #44	; 0x2c
 80012b4:	f7ff ff4c 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012b8:	2000      	movs	r0, #0
 80012ba:	f7ff ff49 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80012be:	2034      	movs	r0, #52	; 0x34
 80012c0:	f7ff ff46 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80012c4:	2002      	movs	r0, #2
 80012c6:	f7ff ff43 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80012ca:	20f7      	movs	r0, #247	; 0xf7
 80012cc:	f7ff ff30 	bl	8001130 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80012d0:	2020      	movs	r0, #32
 80012d2:	f7ff ff3d 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80012d6:	20ea      	movs	r0, #234	; 0xea
 80012d8:	f7ff ff2a 	bl	8001130 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff ff37 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012e2:	2000      	movs	r0, #0
 80012e4:	f7ff ff34 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80012e8:	20c0      	movs	r0, #192	; 0xc0
 80012ea:	f7ff ff21 	bl	8001130 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80012ee:	201b      	movs	r0, #27
 80012f0:	f7ff ff2e 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80012f4:	20c1      	movs	r0, #193	; 0xc1
 80012f6:	f7ff ff1b 	bl	8001130 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80012fa:	2001      	movs	r0, #1
 80012fc:	f7ff ff28 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001300:	20c5      	movs	r0, #197	; 0xc5
 8001302:	f7ff ff15 	bl	8001130 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001306:	2030      	movs	r0, #48	; 0x30
 8001308:	f7ff ff22 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 800130c:	2030      	movs	r0, #48	; 0x30
 800130e:	f7ff ff1f 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001312:	20c7      	movs	r0, #199	; 0xc7
 8001314:	f7ff ff0c 	bl	8001130 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001318:	20b7      	movs	r0, #183	; 0xb7
 800131a:	f7ff ff19 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800131e:	2036      	movs	r0, #54	; 0x36
 8001320:	f7ff ff06 	bl	8001130 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8001324:	2008      	movs	r0, #8
 8001326:	f7ff ff13 	bl	8001150 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 800132a:	203a      	movs	r0, #58	; 0x3a
 800132c:	f7ff ff00 	bl	8001130 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001330:	2055      	movs	r0, #85	; 0x55
 8001332:	f7ff ff0d 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001336:	20b1      	movs	r0, #177	; 0xb1
 8001338:	f7ff fefa 	bl	8001130 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff ff07 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001342:	201a      	movs	r0, #26
 8001344:	f7ff ff04 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001348:	20b6      	movs	r0, #182	; 0xb6
 800134a:	f7ff fef1 	bl	8001130 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800134e:	200a      	movs	r0, #10
 8001350:	f7ff fefe 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001354:	20a2      	movs	r0, #162	; 0xa2
 8001356:	f7ff fefb 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800135a:	20f2      	movs	r0, #242	; 0xf2
 800135c:	f7ff fee8 	bl	8001130 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff fef5 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001366:	2026      	movs	r0, #38	; 0x26
 8001368:	f7ff fee2 	bl	8001130 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800136c:	2001      	movs	r0, #1
 800136e:	f7ff feef 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001372:	20e0      	movs	r0, #224	; 0xe0
 8001374:	f7ff fedc 	bl	8001130 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001378:	200f      	movs	r0, #15
 800137a:	f7ff fee9 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800137e:	202a      	movs	r0, #42	; 0x2a
 8001380:	f7ff fee6 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001384:	2028      	movs	r0, #40	; 0x28
 8001386:	f7ff fee3 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800138a:	2008      	movs	r0, #8
 800138c:	f7ff fee0 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001390:	200e      	movs	r0, #14
 8001392:	f7ff fedd 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001396:	2008      	movs	r0, #8
 8001398:	f7ff feda 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 800139c:	2054      	movs	r0, #84	; 0x54
 800139e:	f7ff fed7 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80013a2:	20a9      	movs	r0, #169	; 0xa9
 80013a4:	f7ff fed4 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80013a8:	2043      	movs	r0, #67	; 0x43
 80013aa:	f7ff fed1 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80013ae:	200a      	movs	r0, #10
 80013b0:	f7ff fece 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80013b4:	200f      	movs	r0, #15
 80013b6:	f7ff fecb 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013ba:	2000      	movs	r0, #0
 80013bc:	f7ff fec8 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff fec5 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013c6:	2000      	movs	r0, #0
 80013c8:	f7ff fec2 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013cc:	2000      	movs	r0, #0
 80013ce:	f7ff febf 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80013d2:	20e1      	movs	r0, #225	; 0xe1
 80013d4:	f7ff feac 	bl	8001130 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013d8:	2000      	movs	r0, #0
 80013da:	f7ff feb9 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80013de:	2015      	movs	r0, #21
 80013e0:	f7ff feb6 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80013e4:	2017      	movs	r0, #23
 80013e6:	f7ff feb3 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80013ea:	2007      	movs	r0, #7
 80013ec:	f7ff feb0 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80013f0:	2011      	movs	r0, #17
 80013f2:	f7ff fead 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80013f6:	2006      	movs	r0, #6
 80013f8:	f7ff feaa 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80013fc:	202b      	movs	r0, #43	; 0x2b
 80013fe:	f7ff fea7 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001402:	2056      	movs	r0, #86	; 0x56
 8001404:	f7ff fea4 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001408:	203c      	movs	r0, #60	; 0x3c
 800140a:	f7ff fea1 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800140e:	2005      	movs	r0, #5
 8001410:	f7ff fe9e 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001414:	2010      	movs	r0, #16
 8001416:	f7ff fe9b 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800141a:	200f      	movs	r0, #15
 800141c:	f7ff fe98 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001420:	203f      	movs	r0, #63	; 0x3f
 8001422:	f7ff fe95 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001426:	203f      	movs	r0, #63	; 0x3f
 8001428:	f7ff fe92 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800142c:	200f      	movs	r0, #15
 800142e:	f7ff fe8f 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001432:	202b      	movs	r0, #43	; 0x2b
 8001434:	f7ff fe7c 	bl	8001130 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001438:	2000      	movs	r0, #0
 800143a:	f7ff fe89 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800143e:	2000      	movs	r0, #0
 8001440:	f7ff fe86 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001444:	2001      	movs	r0, #1
 8001446:	f7ff fe83 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800144a:	203f      	movs	r0, #63	; 0x3f
 800144c:	f7ff fe80 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001450:	202a      	movs	r0, #42	; 0x2a
 8001452:	f7ff fe6d 	bl	8001130 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff fe7a 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800145c:	2000      	movs	r0, #0
 800145e:	f7ff fe77 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001462:	2000      	movs	r0, #0
 8001464:	f7ff fe74 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001468:	20ef      	movs	r0, #239	; 0xef
 800146a:	f7ff fe71 	bl	8001150 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800146e:	2011      	movs	r0, #17
 8001470:	f7ff fe5e 	bl	8001130 <LCD_WR_REG>
	HAL_Delay(120);
 8001474:	2078      	movs	r0, #120	; 0x78
 8001476:	f000 feb5 	bl	80021e4 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800147a:	2029      	movs	r0, #41	; 0x29
 800147c:	f7ff fe58 	bl	8001130 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001480:	2201      	movs	r2, #1
 8001482:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001486:	4804      	ldr	r0, [pc, #16]	; (8001498 <lcd_init+0x2bc>)
 8001488:	f001 fa10 	bl	80028ac <HAL_GPIO_WritePin>
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40020800 	.word	0x40020800
 8001494:	20000110 	.word	0x20000110
 8001498:	40020000 	.word	0x40020000

0800149c <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80014a0:	2201      	movs	r2, #1
 80014a2:	2140      	movs	r1, #64	; 0x40
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <led7_init+0x14>)
 80014a6:	f001 fa01 	bl	80028ac <HAL_GPIO_WritePin>
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40021800 	.word	0x40021800

080014b4 <led7_Scan>:

void led7_Scan(){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff; // reset first 4 bit
 80014b8:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <led7_Scan+0x104>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	b29a      	uxth	r2, r3
 80014c0:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <led7_Scan+0x104>)
 80014c2:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80014c4:	4b3d      	ldr	r3, [pc, #244]	; (80015bc <led7_Scan+0x108>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a3d      	ldr	r2, [pc, #244]	; (80015c0 <led7_Scan+0x10c>)
 80014ca:	5cd3      	ldrb	r3, [r2, r3]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	4b39      	ldr	r3, [pc, #228]	; (80015b8 <led7_Scan+0x104>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	b21b      	sxth	r3, r3
 80014d6:	4313      	orrs	r3, r2
 80014d8:	b21b      	sxth	r3, r3
 80014da:	b29a      	uxth	r2, r3
 80014dc:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <led7_Scan+0x104>)
 80014de:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80014e0:	4b36      	ldr	r3, [pc, #216]	; (80015bc <led7_Scan+0x108>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b03      	cmp	r3, #3
 80014e6:	d847      	bhi.n	8001578 <led7_Scan+0xc4>
 80014e8:	a201      	add	r2, pc, #4	; (adr r2, 80014f0 <led7_Scan+0x3c>)
 80014ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ee:	bf00      	nop
 80014f0:	08001501 	.word	0x08001501
 80014f4:	0800151f 	.word	0x0800151f
 80014f8:	0800153d 	.word	0x0800153d
 80014fc:	0800155b 	.word	0x0800155b
	case 0:
		spi_buffer |= 0x00b0;
 8001500:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <led7_Scan+0x104>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001508:	b29a      	uxth	r2, r3
 800150a:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <led7_Scan+0x104>)
 800150c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800150e:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <led7_Scan+0x104>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001516:	b29a      	uxth	r2, r3
 8001518:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <led7_Scan+0x104>)
 800151a:	801a      	strh	r2, [r3, #0]
		break;
 800151c:	e02d      	b.n	800157a <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800151e:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <led7_Scan+0x104>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001526:	b29a      	uxth	r2, r3
 8001528:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <led7_Scan+0x104>)
 800152a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 800152c:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <led7_Scan+0x104>)
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	f023 0320 	bic.w	r3, r3, #32
 8001534:	b29a      	uxth	r2, r3
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <led7_Scan+0x104>)
 8001538:	801a      	strh	r2, [r3, #0]
		break;
 800153a:	e01e      	b.n	800157a <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 800153c:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <led7_Scan+0x104>)
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001544:	b29a      	uxth	r2, r3
 8001546:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <led7_Scan+0x104>)
 8001548:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <led7_Scan+0x104>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	f023 0310 	bic.w	r3, r3, #16
 8001552:	b29a      	uxth	r2, r3
 8001554:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <led7_Scan+0x104>)
 8001556:	801a      	strh	r2, [r3, #0]
		break;
 8001558:	e00f      	b.n	800157a <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <led7_Scan+0x104>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001562:	b29a      	uxth	r2, r3
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <led7_Scan+0x104>)
 8001566:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <led7_Scan+0x104>)
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001570:	b29a      	uxth	r2, r3
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <led7_Scan+0x104>)
 8001574:	801a      	strh	r2, [r3, #0]
		break;
 8001576:	e000      	b.n	800157a <led7_Scan+0xc6>
	default:
		break;
 8001578:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <led7_Scan+0x108>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	3301      	adds	r3, #1
 8001580:	425a      	negs	r2, r3
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	f002 0203 	and.w	r2, r2, #3
 800158a:	bf58      	it	pl
 800158c:	4253      	negpl	r3, r2
 800158e:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <led7_Scan+0x108>)
 8001590:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2140      	movs	r1, #64	; 0x40
 8001596:	480b      	ldr	r0, [pc, #44]	; (80015c4 <led7_Scan+0x110>)
 8001598:	f001 f988 	bl	80028ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 800159c:	2301      	movs	r3, #1
 800159e:	2202      	movs	r2, #2
 80015a0:	4905      	ldr	r1, [pc, #20]	; (80015b8 <led7_Scan+0x104>)
 80015a2:	4809      	ldr	r0, [pc, #36]	; (80015c8 <led7_Scan+0x114>)
 80015a4:	f001 ffdd 	bl	8003562 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80015a8:	2201      	movs	r2, #1
 80015aa:	2140      	movs	r1, #64	; 0x40
 80015ac:	4805      	ldr	r0, [pc, #20]	; (80015c4 <led7_Scan+0x110>)
 80015ae:	f001 f97d 	bl	80028ac <HAL_GPIO_WritePin>
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	2000000e 	.word	0x2000000e
 80015bc:	20000048 	.word	0x20000048
 80015c0:	20000000 	.word	0x20000000
 80015c4:	40021800 	.word	0x40021800
 80015c8:	2000014c 	.word	0x2000014c

080015cc <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	4613      	mov	r3, r2
 80015d8:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	db0e      	blt.n	80015fe <led7_SetDigit+0x32>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2b09      	cmp	r3, #9
 80015e4:	dc0b      	bgt.n	80015fe <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 80015e6:	4a09      	ldr	r2, [pc, #36]	; (800160c <led7_SetDigit+0x40>)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4413      	add	r3, r2
 80015ec:	781a      	ldrb	r2, [r3, #0]
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	b2d9      	uxtb	r1, r3
 80015f4:	4a06      	ldr	r2, [pc, #24]	; (8001610 <led7_SetDigit+0x44>)
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	4413      	add	r3, r2
 80015fa:	460a      	mov	r2, r1
 80015fc:	701a      	strb	r2, [r3, #0]
	}
}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	20000004 	.word	0x20000004
 8001610:	20000000 	.word	0x20000000

08001614 <led7_SetColon>:

void led7_SetColon(uint8_t status){
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d107      	bne.n	8001634 <led7_SetColon+0x20>
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <led7_SetColon+0x3c>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	f023 0308 	bic.w	r3, r3, #8
 800162c:	b29a      	uxth	r2, r3
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <led7_SetColon+0x3c>)
 8001630:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 8001632:	e006      	b.n	8001642 <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <led7_SetColon+0x3c>)
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	f043 0308 	orr.w	r3, r3, #8
 800163c:	b29a      	uxth	r2, r3
 800163e:	4b04      	ldr	r3, [pc, #16]	; (8001650 <led7_SetColon+0x3c>)
 8001640:	801a      	strh	r2, [r3, #0]
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	2000000e 	.word	0x2000000e

08001654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800165a:	f000 fd51 	bl	8002100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800165e:	f000 f86f 	bl	8001740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001662:	f7ff fbf7 	bl	8000e54 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001666:	f000 fc09 	bl	8001e7c <MX_TIM2_Init>
  MX_SPI1_Init();
 800166a:	f000 fb11 	bl	8001c90 <MX_SPI1_Init>
  MX_FSMC_Init();
 800166e:	f7ff fb21 	bl	8000cb4 <MX_FSMC_Init>
  MX_I2C1_Init();
 8001672:	f7ff fce7 	bl	8001044 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001676:	f000 fc9f 	bl	8001fb8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 800167a:	f000 f8cb 	bl	8001814 <system_init>

  int state_y0_led = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
  int state_y1_led = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
  int state_colon = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag_timer2){
 800168a:	4b26      	ldr	r3, [pc, #152]	; (8001724 <main+0xd0>)
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00b      	beq.n	80016aa <main+0x56>
		  setTimer2(250);
 8001692:	20fa      	movs	r0, #250	; 0xfa
 8001694:	f000 f944 	bl	8001920 <setTimer2>
		  state_colon = 1 - state_colon;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f1c3 0301 	rsb	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
		  led7_SetColon(state_colon);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ffb5 	bl	8001614 <led7_SetColon>
	  }
	  if(flag_timer_second){
 80016aa:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <main+0xd4>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d02b      	beq.n	800170a <main+0xb6>
	  	 		  setTimerSecond(1000);
 80016b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016b6:	f000 fa27 	bl	8001b08 <setTimerSecond>
	  	 		  second = second + 1;
 80016ba:	4b1c      	ldr	r3, [pc, #112]	; (800172c <main+0xd8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	4a1a      	ldr	r2, [pc, #104]	; (800172c <main+0xd8>)
 80016c2:	6013      	str	r3, [r2, #0]
	  	 		  if(second >= 60){
 80016c4:	4b19      	ldr	r3, [pc, #100]	; (800172c <main+0xd8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b3b      	cmp	r3, #59	; 0x3b
 80016ca:	dd1e      	ble.n	800170a <main+0xb6>
	  	 			  second = 0;
 80016cc:	4b17      	ldr	r3, [pc, #92]	; (800172c <main+0xd8>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
	  	 			  min = min + 1;
 80016d2:	4b17      	ldr	r3, [pc, #92]	; (8001730 <main+0xdc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	3301      	adds	r3, #1
 80016d8:	4a15      	ldr	r2, [pc, #84]	; (8001730 <main+0xdc>)
 80016da:	6013      	str	r3, [r2, #0]
	  	 			  if (min >= 60){
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <main+0xdc>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b3b      	cmp	r3, #59	; 0x3b
 80016e2:	dd12      	ble.n	800170a <main+0xb6>
	  	 				  min = 0;
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <main+0xdc>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
	  	 				  hour = (hour +1) % 24;
 80016ea:	4b12      	ldr	r3, [pc, #72]	; (8001734 <main+0xe0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	1c59      	adds	r1, r3, #1
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <main+0xe4>)
 80016f2:	fb83 2301 	smull	r2, r3, r3, r1
 80016f6:	109a      	asrs	r2, r3, #2
 80016f8:	17cb      	asrs	r3, r1, #31
 80016fa:	1ad2      	subs	r2, r2, r3
 80016fc:	4613      	mov	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4413      	add	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	1aca      	subs	r2, r1, r3
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <main+0xe0>)
 8001708:	601a      	str	r2, [r3, #0]
	  	 			  }
	  	 		  }
	  	 	  }

	  	  if (flag_timer7seg){
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <main+0xe8>)
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0bb      	beq.n	800168a <main+0x36>
	  		  setTimer7seg_f(SCAN_TIME);
 8001712:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8001716:	f000 f9c3 	bl	8001aa0 <setTimer7seg_f>
	  		  settime_7seg();
 800171a:	f000 f8ab 	bl	8001874 <settime_7seg>
	  		  led7_Scan();
 800171e:	f7ff fec9 	bl	80014b4 <led7_Scan>
	  if (flag_timer2){
 8001722:	e7b2      	b.n	800168a <main+0x36>
 8001724:	2000004c 	.word	0x2000004c
 8001728:	20000064 	.word	0x20000064
 800172c:	20000018 	.word	0x20000018
 8001730:	20000014 	.word	0x20000014
 8001734:	20000010 	.word	0x20000010
 8001738:	2aaaaaab 	.word	0x2aaaaaab
 800173c:	2000005e 	.word	0x2000005e

08001740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b094      	sub	sp, #80	; 0x50
 8001744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001746:	f107 0320 	add.w	r3, r7, #32
 800174a:	2230      	movs	r2, #48	; 0x30
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f003 fe90 	bl	8005474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	4b28      	ldr	r3, [pc, #160]	; (800180c <SystemClock_Config+0xcc>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	4a27      	ldr	r2, [pc, #156]	; (800180c <SystemClock_Config+0xcc>)
 800176e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001772:	6413      	str	r3, [r2, #64]	; 0x40
 8001774:	4b25      	ldr	r3, [pc, #148]	; (800180c <SystemClock_Config+0xcc>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	4b22      	ldr	r3, [pc, #136]	; (8001810 <SystemClock_Config+0xd0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a21      	ldr	r2, [pc, #132]	; (8001810 <SystemClock_Config+0xd0>)
 800178a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <SystemClock_Config+0xd0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800179c:	2302      	movs	r3, #2
 800179e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017a0:	2301      	movs	r3, #1
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017a4:	2310      	movs	r3, #16
 80017a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a8:	2302      	movs	r3, #2
 80017aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017ac:	2300      	movs	r3, #0
 80017ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017b0:	2308      	movs	r3, #8
 80017b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017b4:	23a8      	movs	r3, #168	; 0xa8
 80017b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b8:	2302      	movs	r3, #2
 80017ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017bc:	2304      	movs	r3, #4
 80017be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c0:	f107 0320 	add.w	r3, r7, #32
 80017c4:	4618      	mov	r0, r3
 80017c6:	f001 f9cf 	bl	8002b68 <HAL_RCC_OscConfig>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017d0:	f000 f896 	bl	8001900 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d4:	230f      	movs	r3, #15
 80017d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d8:	2302      	movs	r3, #2
 80017da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80017e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	2105      	movs	r1, #5
 80017f2:	4618      	mov	r0, r3
 80017f4:	f001 fc30 	bl	8003058 <HAL_RCC_ClockConfig>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017fe:	f000 f87f 	bl	8001900 <Error_Handler>
  }
}
 8001802:	bf00      	nop
 8001804:	3750      	adds	r7, #80	; 0x50
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800
 8001810:	40007000 	.word	0x40007000

08001814 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	2120      	movs	r1, #32
 800181c:	4814      	ldr	r0, [pc, #80]	; (8001870 <system_init+0x5c>)
 800181e:	f001 f845 	bl	80028ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2140      	movs	r1, #64	; 0x40
 8001826:	4812      	ldr	r0, [pc, #72]	; (8001870 <system_init+0x5c>)
 8001828:	f001 f840 	bl	80028ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 800182c:	2200      	movs	r2, #0
 800182e:	2110      	movs	r1, #16
 8001830:	480f      	ldr	r0, [pc, #60]	; (8001870 <system_init+0x5c>)
 8001832:	f001 f83b 	bl	80028ac <HAL_GPIO_WritePin>
	  timer_init();
 8001836:	f000 f869 	bl	800190c <timer_init>
	  led7_init();
 800183a:	f7ff fe2f 	bl	800149c <led7_init>
	  button_init();
 800183e:	f7ff fa2d 	bl	8000c9c <button_init>
	  lcd_init();
 8001842:	f7ff fccb 	bl	80011dc <lcd_init>
	  uart_init_rs232();
 8001846:	f000 fb8b 	bl	8001f60 <uart_init_rs232>
	  setTimer2(10);
 800184a:	200a      	movs	r0, #10
 800184c:	f000 f868 	bl	8001920 <setTimer2>
	  setTimer3(10);
 8001850:	200a      	movs	r0, #10
 8001852:	f000 f895 	bl	8001980 <setTimer3>
	  setTimer4(10);
 8001856:	200a      	movs	r0, #10
 8001858:	f000 f8c2 	bl	80019e0 <setTimer4>
	  setTimer7seg(10);
 800185c:	200a      	movs	r0, #10
 800185e:	f000 f8ef 	bl	8001a40 <setTimer7seg>
	  setTimerSecond(10);
 8001862:	200a      	movs	r0, #10
 8001864:	f000 f950 	bl	8001b08 <setTimerSecond>
	  settime_7seg();
 8001868:	f000 f804 	bl	8001874 <settime_7seg>
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40021000 	.word	0x40021000

08001874 <settime_7seg>:
	led7_SetDigit(1, 1, 0);
	led7_SetDigit(2, 2, 0);
	led7_SetDigit(3, 3, 0);
}

void settime_7seg(){
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	led7_SetDigit(hour/10, 0, 0);
 8001878:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <settime_7seg+0x80>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a1e      	ldr	r2, [pc, #120]	; (80018f8 <settime_7seg+0x84>)
 800187e:	fb82 1203 	smull	r1, r2, r2, r3
 8001882:	1092      	asrs	r2, r2, #2
 8001884:	17db      	asrs	r3, r3, #31
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2200      	movs	r2, #0
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fe9d 	bl	80015cc <led7_SetDigit>
	led7_SetDigit(hour%10, 1, 0);
 8001892:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <settime_7seg+0x80>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <settime_7seg+0x84>)
 8001898:	fb83 1302 	smull	r1, r3, r3, r2
 800189c:	1099      	asrs	r1, r3, #2
 800189e:	17d3      	asrs	r3, r2, #31
 80018a0:	1ac8      	subs	r0, r1, r3
 80018a2:	4603      	mov	r3, r0
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4403      	add	r3, r0
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	1ad0      	subs	r0, r2, r3
 80018ac:	2200      	movs	r2, #0
 80018ae:	2101      	movs	r1, #1
 80018b0:	f7ff fe8c 	bl	80015cc <led7_SetDigit>
	led7_SetDigit(min/10, 2, 0);
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <settime_7seg+0x88>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <settime_7seg+0x84>)
 80018ba:	fb82 1203 	smull	r1, r2, r2, r3
 80018be:	1092      	asrs	r2, r2, #2
 80018c0:	17db      	asrs	r3, r3, #31
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2200      	movs	r2, #0
 80018c6:	2102      	movs	r1, #2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fe7f 	bl	80015cc <led7_SetDigit>
	led7_SetDigit(min%10, 3, 0);
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <settime_7seg+0x88>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <settime_7seg+0x84>)
 80018d4:	fb83 1302 	smull	r1, r3, r3, r2
 80018d8:	1099      	asrs	r1, r3, #2
 80018da:	17d3      	asrs	r3, r2, #31
 80018dc:	1ac8      	subs	r0, r1, r3
 80018de:	4603      	mov	r3, r0
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4403      	add	r3, r0
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	1ad0      	subs	r0, r2, r3
 80018e8:	2200      	movs	r2, #0
 80018ea:	2103      	movs	r1, #3
 80018ec:	f7ff fe6e 	bl	80015cc <led7_SetDigit>
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000010 	.word	0x20000010
 80018f8:	66666667 	.word	0x66666667
 80018fc:	20000014 	.word	0x20000014

08001900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001904:	b672      	cpsid	i
}
 8001906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001908:	e7fe      	b.n	8001908 <Error_Handler+0x8>
	...

0800190c <timer_init>:

uint16_t flag_timer_second = 0;
uint16_t timer_second_counter = 0;
uint16_t timer_second_MUL = 0;

void timer_init(){
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <timer_init+0x10>)
 8001912:	f002 f8c1 	bl	8003a98 <HAL_TIM_Base_Start_IT>
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200001a4 	.word	0x200001a4

08001920 <setTimer2>:

void setTimer2(uint16_t duration){
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fd9d 	bl	800046c <__aeabi_i2d>
 8001932:	a310      	add	r3, pc, #64	; (adr r3, 8001974 <setTimer2+0x54>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	f7fe ff2c 	bl	8000794 <__aeabi_ddiv>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	f7ff f80e 	bl	8000964 <__aeabi_d2uiz>
 8001948:	4603      	mov	r3, r0
 800194a:	b29a      	uxth	r2, r3
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <setTimer2+0x48>)
 800194e:	801a      	strh	r2, [r3, #0]
	timer2_counter = timer2_MUL;
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <setTimer2+0x48>)
 8001952:	881a      	ldrh	r2, [r3, #0]
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <setTimer2+0x4c>)
 8001956:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <setTimer2+0x50>)
 800195a:	2200      	movs	r2, #0
 800195c:	801a      	strh	r2, [r3, #0]
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000050 	.word	0x20000050
 800196c:	2000004e 	.word	0x2000004e
 8001970:	2000004c 	.word	0x2000004c
 8001974:	9999999a 	.word	0x9999999a
 8001978:	3fb99999 	.word	0x3fb99999
 800197c:	00000000 	.word	0x00000000

08001980 <setTimer3>:

void setTimer3(uint16_t duration){
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_2;
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fd6d 	bl	800046c <__aeabi_i2d>
 8001992:	a310      	add	r3, pc, #64	; (adr r3, 80019d4 <setTimer3+0x54>)
 8001994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001998:	f7fe fefc 	bl	8000794 <__aeabi_ddiv>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	f7fe ffde 	bl	8000964 <__aeabi_d2uiz>
 80019a8:	4603      	mov	r3, r0
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <setTimer3+0x48>)
 80019ae:	801a      	strh	r2, [r3, #0]
	timer3_counter = timer3_MUL;
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <setTimer3+0x48>)
 80019b2:	881a      	ldrh	r2, [r3, #0]
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <setTimer3+0x4c>)
 80019b6:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <setTimer3+0x50>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	801a      	strh	r2, [r3, #0]
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000056 	.word	0x20000056
 80019cc:	20000054 	.word	0x20000054
 80019d0:	20000052 	.word	0x20000052
 80019d4:	9999999a 	.word	0x9999999a
 80019d8:	3fb99999 	.word	0x3fb99999
 80019dc:	00000000 	.word	0x00000000

080019e0 <setTimer4>:

void setTimer4(uint16_t duration){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	80fb      	strh	r3, [r7, #6]
	timer4_MUL = duration/TIMER_CYCLE_2;
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fd3d 	bl	800046c <__aeabi_i2d>
 80019f2:	a310      	add	r3, pc, #64	; (adr r3, 8001a34 <setTimer4+0x54>)
 80019f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f8:	f7fe fecc 	bl	8000794 <__aeabi_ddiv>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	f7fe ffae 	bl	8000964 <__aeabi_d2uiz>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <setTimer4+0x48>)
 8001a0e:	801a      	strh	r2, [r3, #0]
	timer4_counter = timer4_MUL;
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <setTimer4+0x48>)
 8001a12:	881a      	ldrh	r2, [r3, #0]
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <setTimer4+0x4c>)
 8001a16:	801a      	strh	r2, [r3, #0]
	flag_timer4 = 0;
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <setTimer4+0x50>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	801a      	strh	r2, [r3, #0]
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2000005c 	.word	0x2000005c
 8001a2c:	2000005a 	.word	0x2000005a
 8001a30:	20000058 	.word	0x20000058
 8001a34:	9999999a 	.word	0x9999999a
 8001a38:	3fb99999 	.word	0x3fb99999
 8001a3c:	00000000 	.word	0x00000000

08001a40 <setTimer7seg>:

void setTimer7seg(uint16_t duration){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	80fb      	strh	r3, [r7, #6]
	timer7seg_MUL = duration/TIMER_CYCLE_2;
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fd0d 	bl	800046c <__aeabi_i2d>
 8001a52:	a310      	add	r3, pc, #64	; (adr r3, 8001a94 <setTimer7seg+0x54>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	f7fe fe9c 	bl	8000794 <__aeabi_ddiv>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	f7fe ff7e 	bl	8000964 <__aeabi_d2uiz>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <setTimer7seg+0x48>)
 8001a6e:	801a      	strh	r2, [r3, #0]
	timer7seg_counter = timer7seg_MUL;
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <setTimer7seg+0x48>)
 8001a72:	881a      	ldrh	r2, [r3, #0]
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <setTimer7seg+0x4c>)
 8001a76:	801a      	strh	r2, [r3, #0]
	flag_timer7seg = 0;
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <setTimer7seg+0x50>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	801a      	strh	r2, [r3, #0]
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000062 	.word	0x20000062
 8001a8c:	20000060 	.word	0x20000060
 8001a90:	2000005e 	.word	0x2000005e
 8001a94:	9999999a 	.word	0x9999999a
 8001a98:	3fb99999 	.word	0x3fb99999
 8001a9c:	00000000 	.word	0x00000000

08001aa0 <setTimer7seg_f>:

void setTimer7seg_f(float duration){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	ed87 0a01 	vstr	s0, [r7, #4]
	timer7seg_MUL = (int)duration/TIMER_CYCLE_2;
 8001aaa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ab2:	ee17 0a90 	vmov	r0, s15
 8001ab6:	f7fe fcd9 	bl	800046c <__aeabi_i2d>
 8001aba:	a310      	add	r3, pc, #64	; (adr r3, 8001afc <setTimer7seg_f+0x5c>)
 8001abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac0:	f7fe fe68 	bl	8000794 <__aeabi_ddiv>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	f7fe ff4a 	bl	8000964 <__aeabi_d2uiz>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <setTimer7seg_f+0x50>)
 8001ad6:	801a      	strh	r2, [r3, #0]
	timer7seg_counter = timer7seg_MUL;
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <setTimer7seg_f+0x50>)
 8001ada:	881a      	ldrh	r2, [r3, #0]
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <setTimer7seg_f+0x54>)
 8001ade:	801a      	strh	r2, [r3, #0]
	flag_timer7seg = 0;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <setTimer7seg_f+0x58>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	801a      	strh	r2, [r3, #0]
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000062 	.word	0x20000062
 8001af4:	20000060 	.word	0x20000060
 8001af8:	2000005e 	.word	0x2000005e
 8001afc:	9999999a 	.word	0x9999999a
 8001b00:	3fb99999 	.word	0x3fb99999
 8001b04:	00000000 	.word	0x00000000

08001b08 <setTimerSecond>:
void setTimerSecond(uint16_t duration){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
	timer_second_MUL = duration/TIMER_CYCLE_2;
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fca9 	bl	800046c <__aeabi_i2d>
 8001b1a:	a310      	add	r3, pc, #64	; (adr r3, 8001b5c <setTimerSecond+0x54>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	f7fe fe38 	bl	8000794 <__aeabi_ddiv>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f7fe ff1a 	bl	8000964 <__aeabi_d2uiz>
 8001b30:	4603      	mov	r3, r0
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <setTimerSecond+0x48>)
 8001b36:	801a      	strh	r2, [r3, #0]
	timer_second_counter = timer_second_MUL;
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <setTimerSecond+0x48>)
 8001b3a:	881a      	ldrh	r2, [r3, #0]
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <setTimerSecond+0x4c>)
 8001b3e:	801a      	strh	r2, [r3, #0]
	flag_timer_second = 0;
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <setTimerSecond+0x50>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	801a      	strh	r2, [r3, #0]
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000068 	.word	0x20000068
 8001b54:	20000066 	.word	0x20000066
 8001b58:	20000064 	.word	0x20000064
 8001b5c:	9999999a 	.word	0x9999999a
 8001b60:	3fb99999 	.word	0x3fb99999

08001b64 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b74:	d168      	bne.n	8001c48 <HAL_TIM_PeriodElapsedCallback+0xe4>
		if(timer2_counter > 0){
 8001b76:	4b37      	ldr	r3, [pc, #220]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d010      	beq.n	8001ba0 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8001b7e:	4b35      	ldr	r3, [pc, #212]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	4b33      	ldr	r3, [pc, #204]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001b88:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8001b8a:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d106      	bne.n	8001ba0 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8001b92:	4b31      	ldr	r3, [pc, #196]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001b98:	4b30      	ldr	r3, [pc, #192]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001b9a:	881a      	ldrh	r2, [r3, #0]
 8001b9c:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001b9e:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer3_counter > 0){
 8001ba0:	4b2f      	ldr	r3, [pc, #188]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d010      	beq.n	8001bca <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 8001ba8:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001bb2:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0) {
 8001bb4:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d106      	bne.n	8001bca <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 8001bbc:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 8001bc2:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001bc4:	881a      	ldrh	r2, [r3, #0]
 8001bc6:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001bc8:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer4_counter > 0){
 8001bca:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d010      	beq.n	8001bf4 <HAL_TIM_PeriodElapsedCallback+0x90>
			timer4_counter--;
 8001bd2:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	4b24      	ldr	r3, [pc, #144]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001bdc:	801a      	strh	r2, [r3, #0]
			if(timer4_counter == 0) {
 8001bde:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d106      	bne.n	8001bf4 <HAL_TIM_PeriodElapsedCallback+0x90>
				flag_timer4 = 1;
 8001be6:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	801a      	strh	r2, [r3, #0]
				timer4_counter = timer4_MUL;
 8001bec:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001bee:	881a      	ldrh	r2, [r3, #0]
 8001bf0:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001bf2:	801a      	strh	r2, [r3, #0]
			}
		}

		if(timer7seg_counter > 0){
 8001bf4:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d010      	beq.n	8001c1e <HAL_TIM_PeriodElapsedCallback+0xba>
			timer7seg_counter--;
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001c06:	801a      	strh	r2, [r3, #0]
			if(timer7seg_counter == 0){
 8001c08:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d106      	bne.n	8001c1e <HAL_TIM_PeriodElapsedCallback+0xba>
				flag_timer7seg = 1;
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	801a      	strh	r2, [r3, #0]
				timer7seg_counter = timer7seg_MUL;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001c18:	881a      	ldrh	r2, [r3, #0]
 8001c1a:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001c1c:	801a      	strh	r2, [r3, #0]
			}
		}

		if (timer_second_counter > 0){
 8001c1e:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d010      	beq.n	8001c48 <HAL_TIM_PeriodElapsedCallback+0xe4>
			timer_second_counter--;
 8001c26:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001c30:	801a      	strh	r2, [r3, #0]
			if(timer_second_counter == 0){
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d106      	bne.n	8001c48 <HAL_TIM_PeriodElapsedCallback+0xe4>
				flag_timer_second = 1;
 8001c3a:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	801a      	strh	r2, [r3, #0]
				timer_second_counter = timer_second_MUL;
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001c42:	881a      	ldrh	r2, [r3, #0]
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001c46:	801a      	strh	r2, [r3, #0]
			}
		}
	}
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	2000004e 	.word	0x2000004e
 8001c58:	2000004c 	.word	0x2000004c
 8001c5c:	20000050 	.word	0x20000050
 8001c60:	20000054 	.word	0x20000054
 8001c64:	20000052 	.word	0x20000052
 8001c68:	20000056 	.word	0x20000056
 8001c6c:	2000005a 	.word	0x2000005a
 8001c70:	20000058 	.word	0x20000058
 8001c74:	2000005c 	.word	0x2000005c
 8001c78:	20000060 	.word	0x20000060
 8001c7c:	2000005e 	.word	0x2000005e
 8001c80:	20000062 	.word	0x20000062
 8001c84:	20000066 	.word	0x20000066
 8001c88:	20000064 	.word	0x20000064
 8001c8c:	20000068 	.word	0x20000068

08001c90 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c94:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <MX_SPI1_Init+0x64>)
 8001c96:	4a18      	ldr	r2, [pc, #96]	; (8001cf8 <MX_SPI1_Init+0x68>)
 8001c98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c9a:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <MX_SPI1_Init+0x64>)
 8001c9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ca0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ca2:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <MX_SPI1_Init+0x64>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <MX_SPI1_Init+0x64>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cae:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <MX_SPI1_Init+0x64>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <MX_SPI1_Init+0x64>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cba:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <MX_SPI1_Init+0x64>)
 8001cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <MX_SPI1_Init+0x64>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cc8:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <MX_SPI1_Init+0x64>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <MX_SPI1_Init+0x64>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cd4:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <MX_SPI1_Init+0x64>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <MX_SPI1_Init+0x64>)
 8001cdc:	220a      	movs	r2, #10
 8001cde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ce0:	4804      	ldr	r0, [pc, #16]	; (8001cf4 <MX_SPI1_Init+0x64>)
 8001ce2:	f001 fbb5 	bl	8003450 <HAL_SPI_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001cec:	f7ff fe08 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	2000014c 	.word	0x2000014c
 8001cf8:	40013000 	.word	0x40013000

08001cfc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a19      	ldr	r2, [pc, #100]	; (8001d80 <HAL_SPI_MspInit+0x84>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d12b      	bne.n	8001d76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	4a17      	ldr	r2, [pc, #92]	; (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a10      	ldr	r2, [pc, #64]	; (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d44:	f043 0302 	orr.w	r3, r3, #2
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001d56:	2338      	movs	r3, #56	; 0x38
 8001d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d62:	2303      	movs	r3, #3
 8001d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d66:	2305      	movs	r3, #5
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4805      	ldr	r0, [pc, #20]	; (8001d88 <HAL_SPI_MspInit+0x8c>)
 8001d72:	f000 fbff 	bl	8002574 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d76:	bf00      	nop
 8001d78:	3728      	adds	r7, #40	; 0x28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40013000 	.word	0x40013000
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40020400 	.word	0x40020400

08001d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	607b      	str	r3, [r7, #4]
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <HAL_MspInit+0x4c>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	4a0f      	ldr	r2, [pc, #60]	; (8001dd8 <HAL_MspInit+0x4c>)
 8001d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da0:	6453      	str	r3, [r2, #68]	; 0x44
 8001da2:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <HAL_MspInit+0x4c>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	603b      	str	r3, [r7, #0]
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_MspInit+0x4c>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	4a08      	ldr	r2, [pc, #32]	; (8001dd8 <HAL_MspInit+0x4c>)
 8001db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_MspInit+0x4c>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800

08001ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <NMI_Handler+0x4>

08001de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de6:	e7fe      	b.n	8001de6 <HardFault_Handler+0x4>

08001de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <MemManage_Handler+0x4>

08001dee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df2:	e7fe      	b.n	8001df2 <BusFault_Handler+0x4>

08001df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <UsageFault_Handler+0x4>

08001dfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e28:	f000 f9bc 	bl	80021a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <TIM2_IRQHandler+0x10>)
 8001e36:	f001 fe9f 	bl	8003b78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200001a4 	.word	0x200001a4

08001e44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <USART1_IRQHandler+0x10>)
 8001e4a:	f002 fb67 	bl	800451c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200001ec 	.word	0x200001ec

08001e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <SystemInit+0x20>)
 8001e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e62:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <SystemInit+0x20>)
 8001e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e82:	f107 0308 	add.w	r3, r7, #8
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e90:	463b      	mov	r3, r7
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e98:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <MX_TIM2_Init+0x94>)
 8001e9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <MX_TIM2_Init+0x94>)
 8001ea2:	f240 3247 	movw	r2, #839	; 0x347
 8001ea6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea8:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <MX_TIM2_Init+0x94>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8001eae:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <MX_TIM2_Init+0x94>)
 8001eb0:	2209      	movs	r2, #9
 8001eb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb4:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <MX_TIM2_Init+0x94>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <MX_TIM2_Init+0x94>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ec0:	4813      	ldr	r0, [pc, #76]	; (8001f10 <MX_TIM2_Init+0x94>)
 8001ec2:	f001 fd99 	bl	80039f8 <HAL_TIM_Base_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ecc:	f7ff fd18 	bl	8001900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ed6:	f107 0308 	add.w	r3, r7, #8
 8001eda:	4619      	mov	r1, r3
 8001edc:	480c      	ldr	r0, [pc, #48]	; (8001f10 <MX_TIM2_Init+0x94>)
 8001ede:	f001 ff53 	bl	8003d88 <HAL_TIM_ConfigClockSource>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ee8:	f7ff fd0a 	bl	8001900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eec:	2300      	movs	r3, #0
 8001eee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4805      	ldr	r0, [pc, #20]	; (8001f10 <MX_TIM2_Init+0x94>)
 8001efa:	f002 f96f 	bl	80041dc <HAL_TIMEx_MasterConfigSynchronization>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001f04:	f7ff fcfc 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f08:	bf00      	nop
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	200001a4 	.word	0x200001a4

08001f14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f24:	d115      	bne.n	8001f52 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <HAL_TIM_Base_MspInit+0x48>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	4a0b      	ldr	r2, [pc, #44]	; (8001f5c <HAL_TIM_Base_MspInit+0x48>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6413      	str	r3, [r2, #64]	; 0x40
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_TIM_Base_MspInit+0x48>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	201c      	movs	r0, #28
 8001f48:	f000 fa4b 	bl	80023e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f4c:	201c      	movs	r0, #28
 8001f4e:	f000 fa64 	bl	800241a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f52:	bf00      	nop
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800

08001f60 <uart_init_rs232>:
#include "uart.h"

uint8_t receive_buffer1 = 0;
uint8_t msg[100];

void uart_init_rs232(){
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001f64:	2201      	movs	r2, #1
 8001f66:	4903      	ldr	r1, [pc, #12]	; (8001f74 <uart_init_rs232+0x14>)
 8001f68:	4803      	ldr	r0, [pc, #12]	; (8001f78 <uart_init_rs232+0x18>)
 8001f6a:	f002 faa6 	bl	80044ba <HAL_UART_Receive_IT>
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	2000006a 	.word	0x2000006a
 8001f78:	200001ec 	.word	0x200001ec

08001f7c <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a08      	ldr	r2, [pc, #32]	; (8001fac <HAL_UART_RxCpltCallback+0x30>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d10a      	bne.n	8001fa4 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8001f8e:	230a      	movs	r3, #10
 8001f90:	2201      	movs	r2, #1
 8001f92:	4907      	ldr	r1, [pc, #28]	; (8001fb0 <HAL_UART_RxCpltCallback+0x34>)
 8001f94:	4807      	ldr	r0, [pc, #28]	; (8001fb4 <HAL_UART_RxCpltCallback+0x38>)
 8001f96:	f002 f9fe 	bl	8004396 <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	4904      	ldr	r1, [pc, #16]	; (8001fb0 <HAL_UART_RxCpltCallback+0x34>)
 8001f9e:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <HAL_UART_RxCpltCallback+0x38>)
 8001fa0:	f002 fa8b 	bl	80044ba <HAL_UART_Receive_IT>
	}
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40011000 	.word	0x40011000
 8001fb0:	2000006a 	.word	0x2000006a
 8001fb4:	200001ec 	.word	0x200001ec

08001fb8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <MX_USART1_UART_Init+0x4c>)
 8001fbe:	4a12      	ldr	r2, [pc, #72]	; (8002008 <MX_USART1_UART_Init+0x50>)
 8001fc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <MX_USART1_UART_Init+0x4c>)
 8001fc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <MX_USART1_UART_Init+0x4c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <MX_USART1_UART_Init+0x4c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <MX_USART1_UART_Init+0x4c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <MX_USART1_UART_Init+0x4c>)
 8001fde:	220c      	movs	r2, #12
 8001fe0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <MX_USART1_UART_Init+0x4c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <MX_USART1_UART_Init+0x4c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fee:	4805      	ldr	r0, [pc, #20]	; (8002004 <MX_USART1_UART_Init+0x4c>)
 8001ff0:	f002 f984 	bl	80042fc <HAL_UART_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ffa:	f7ff fc81 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	200001ec 	.word	0x200001ec
 8002008:	40011000 	.word	0x40011000

0800200c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	; 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1d      	ldr	r2, [pc, #116]	; (80020a0 <HAL_UART_MspInit+0x94>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d134      	bne.n	8002098 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <HAL_UART_MspInit+0x98>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	4a1b      	ldr	r2, [pc, #108]	; (80020a4 <HAL_UART_MspInit+0x98>)
 8002038:	f043 0310 	orr.w	r3, r3, #16
 800203c:	6453      	str	r3, [r2, #68]	; 0x44
 800203e:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <HAL_UART_MspInit+0x98>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <HAL_UART_MspInit+0x98>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <HAL_UART_MspInit+0x98>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6313      	str	r3, [r2, #48]	; 0x30
 800205a:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_UART_MspInit+0x98>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002066:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800206a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002074:	2303      	movs	r3, #3
 8002076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002078:	2307      	movs	r3, #7
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	4619      	mov	r1, r3
 8002082:	4809      	ldr	r0, [pc, #36]	; (80020a8 <HAL_UART_MspInit+0x9c>)
 8002084:	f000 fa76 	bl	8002574 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002088:	2200      	movs	r2, #0
 800208a:	2100      	movs	r1, #0
 800208c:	2025      	movs	r0, #37	; 0x25
 800208e:	f000 f9a8 	bl	80023e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002092:	2025      	movs	r0, #37	; 0x25
 8002094:	f000 f9c1 	bl	800241a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002098:	bf00      	nop
 800209a:	3728      	adds	r7, #40	; 0x28
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40011000 	.word	0x40011000
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40020000 	.word	0x40020000

080020ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020b0:	480d      	ldr	r0, [pc, #52]	; (80020e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020b2:	490e      	ldr	r1, [pc, #56]	; (80020ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020b4:	4a0e      	ldr	r2, [pc, #56]	; (80020f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b8:	e002      	b.n	80020c0 <LoopCopyDataInit>

080020ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020be:	3304      	adds	r3, #4

080020c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c4:	d3f9      	bcc.n	80020ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020c6:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020c8:	4c0b      	ldr	r4, [pc, #44]	; (80020f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020cc:	e001      	b.n	80020d2 <LoopFillZerobss>

080020ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d0:	3204      	adds	r2, #4

080020d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d4:	d3fb      	bcc.n	80020ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020d6:	f7ff febf 	bl	8001e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020da:	f003 f9a7 	bl	800542c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020de:	f7ff fab9 	bl	8001654 <main>
  bx  lr    
 80020e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020ec:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80020f0:	080054c4 	.word	0x080054c4
  ldr r2, =_sbss
 80020f4:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80020f8:	20000234 	.word	0x20000234

080020fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020fc:	e7fe      	b.n	80020fc <ADC_IRQHandler>
	...

08002100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002104:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <HAL_Init+0x40>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a0d      	ldr	r2, [pc, #52]	; (8002140 <HAL_Init+0x40>)
 800210a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800210e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_Init+0x40>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <HAL_Init+0x40>)
 8002116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800211a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800211c:	4b08      	ldr	r3, [pc, #32]	; (8002140 <HAL_Init+0x40>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a07      	ldr	r2, [pc, #28]	; (8002140 <HAL_Init+0x40>)
 8002122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002126:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002128:	2003      	movs	r0, #3
 800212a:	f000 f94f 	bl	80023cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800212e:	200f      	movs	r0, #15
 8002130:	f000 f808 	bl	8002144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002134:	f7ff fe2a 	bl	8001d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023c00 	.word	0x40023c00

08002144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_InitTick+0x54>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_InitTick+0x58>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	4619      	mov	r1, r3
 8002156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800215a:	fbb3 f3f1 	udiv	r3, r3, r1
 800215e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f967 	bl	8002436 <HAL_SYSTICK_Config>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e00e      	b.n	8002190 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b0f      	cmp	r3, #15
 8002176:	d80a      	bhi.n	800218e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002178:	2200      	movs	r2, #0
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	f04f 30ff 	mov.w	r0, #4294967295
 8002180:	f000 f92f 	bl	80023e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002184:	4a06      	ldr	r2, [pc, #24]	; (80021a0 <HAL_InitTick+0x5c>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	e000      	b.n	8002190 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
}
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	2000001c 	.word	0x2000001c
 800219c:	20000024 	.word	0x20000024
 80021a0:	20000020 	.word	0x20000020

080021a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_IncTick+0x20>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_IncTick+0x24>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4413      	add	r3, r2
 80021b4:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <HAL_IncTick+0x24>)
 80021b6:	6013      	str	r3, [r2, #0]
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000024 	.word	0x20000024
 80021c8:	20000230 	.word	0x20000230

080021cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return uwTick;
 80021d0:	4b03      	ldr	r3, [pc, #12]	; (80021e0 <HAL_GetTick+0x14>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000230 	.word	0x20000230

080021e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021ec:	f7ff ffee 	bl	80021cc <HAL_GetTick>
 80021f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fc:	d005      	beq.n	800220a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021fe:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <HAL_Delay+0x44>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4413      	add	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800220a:	bf00      	nop
 800220c:	f7ff ffde 	bl	80021cc <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	429a      	cmp	r2, r3
 800221a:	d8f7      	bhi.n	800220c <HAL_Delay+0x28>
  {
  }
}
 800221c:	bf00      	nop
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000024 	.word	0x20000024

0800222c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002248:	4013      	ands	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800225c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225e:	4a04      	ldr	r2, [pc, #16]	; (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	60d3      	str	r3, [r2, #12]
}
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <__NVIC_GetPriorityGrouping+0x18>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	f003 0307 	and.w	r3, r3, #7
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	db0b      	blt.n	80022ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	f003 021f 	and.w	r2, r3, #31
 80022a8:	4907      	ldr	r1, [pc, #28]	; (80022c8 <__NVIC_EnableIRQ+0x38>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	2001      	movs	r0, #1
 80022b2:	fa00 f202 	lsl.w	r2, r0, r2
 80022b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000e100 	.word	0xe000e100

080022cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	6039      	str	r1, [r7, #0]
 80022d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	db0a      	blt.n	80022f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	490c      	ldr	r1, [pc, #48]	; (8002318 <__NVIC_SetPriority+0x4c>)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	0112      	lsls	r2, r2, #4
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	440b      	add	r3, r1
 80022f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f4:	e00a      	b.n	800230c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4908      	ldr	r1, [pc, #32]	; (800231c <__NVIC_SetPriority+0x50>)
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	3b04      	subs	r3, #4
 8002304:	0112      	lsls	r2, r2, #4
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	440b      	add	r3, r1
 800230a:	761a      	strb	r2, [r3, #24]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000e100 	.word	0xe000e100
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002320:	b480      	push	{r7}
 8002322:	b089      	sub	sp, #36	; 0x24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f1c3 0307 	rsb	r3, r3, #7
 800233a:	2b04      	cmp	r3, #4
 800233c:	bf28      	it	cs
 800233e:	2304      	movcs	r3, #4
 8002340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3304      	adds	r3, #4
 8002346:	2b06      	cmp	r3, #6
 8002348:	d902      	bls.n	8002350 <NVIC_EncodePriority+0x30>
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3b03      	subs	r3, #3
 800234e:	e000      	b.n	8002352 <NVIC_EncodePriority+0x32>
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002354:	f04f 32ff 	mov.w	r2, #4294967295
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43da      	mvns	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	401a      	ands	r2, r3
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002368:	f04f 31ff 	mov.w	r1, #4294967295
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	fa01 f303 	lsl.w	r3, r1, r3
 8002372:	43d9      	mvns	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002378:	4313      	orrs	r3, r2
         );
}
 800237a:	4618      	mov	r0, r3
 800237c:	3724      	adds	r7, #36	; 0x24
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3b01      	subs	r3, #1
 8002394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002398:	d301      	bcc.n	800239e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800239a:	2301      	movs	r3, #1
 800239c:	e00f      	b.n	80023be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800239e:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <SysTick_Config+0x40>)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023a6:	210f      	movs	r1, #15
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	f7ff ff8e 	bl	80022cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <SysTick_Config+0x40>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023b6:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <SysTick_Config+0x40>)
 80023b8:	2207      	movs	r2, #7
 80023ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	e000e010 	.word	0xe000e010

080023cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff ff29 	bl	800222c <__NVIC_SetPriorityGrouping>
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b086      	sub	sp, #24
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	4603      	mov	r3, r0
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f4:	f7ff ff3e 	bl	8002274 <__NVIC_GetPriorityGrouping>
 80023f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	6978      	ldr	r0, [r7, #20]
 8002400:	f7ff ff8e 	bl	8002320 <NVIC_EncodePriority>
 8002404:	4602      	mov	r2, r0
 8002406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff5d 	bl	80022cc <__NVIC_SetPriority>
}
 8002412:	bf00      	nop
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff31 	bl	8002290 <__NVIC_EnableIRQ>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff ffa2 	bl	8002388 <SysTick_Config>
 8002444:	4603      	mov	r3, r0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b084      	sub	sp, #16
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800245c:	f7ff feb6 	bl	80021cc <HAL_GetTick>
 8002460:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d008      	beq.n	8002480 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2280      	movs	r2, #128	; 0x80
 8002472:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e052      	b.n	8002526 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0216 	bic.w	r2, r2, #22
 800248e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800249e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d103      	bne.n	80024b0 <HAL_DMA_Abort+0x62>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0208 	bic.w	r2, r2, #8
 80024be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0201 	bic.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024d0:	e013      	b.n	80024fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024d2:	f7ff fe7b 	bl	80021cc <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b05      	cmp	r3, #5
 80024de:	d90c      	bls.n	80024fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2220      	movs	r2, #32
 80024e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2203      	movs	r2, #3
 80024ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e015      	b.n	8002526 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1e4      	bne.n	80024d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250c:	223f      	movs	r2, #63	; 0x3f
 800250e:	409a      	lsls	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d004      	beq.n	800254c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2280      	movs	r2, #128	; 0x80
 8002546:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e00c      	b.n	8002566 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2205      	movs	r2, #5
 8002550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
	...

08002574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	; 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002586:	2300      	movs	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	e16b      	b.n	8002868 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002590:	2201      	movs	r2, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	f040 815a 	bne.w	8002862 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d005      	beq.n	80025c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d130      	bne.n	8002628 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	2203      	movs	r2, #3
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025fc:	2201      	movs	r2, #1
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f003 0201 	and.w	r2, r3, #1
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b03      	cmp	r3, #3
 8002632:	d017      	beq.n	8002664 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	2203      	movs	r2, #3
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d123      	bne.n	80026b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	08da      	lsrs	r2, r3, #3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3208      	adds	r2, #8
 8002678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	220f      	movs	r2, #15
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	08da      	lsrs	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3208      	adds	r2, #8
 80026b2:	69b9      	ldr	r1, [r7, #24]
 80026b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	2203      	movs	r2, #3
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0203 	and.w	r2, r3, #3
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80b4 	beq.w	8002862 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	4b60      	ldr	r3, [pc, #384]	; (8002880 <HAL_GPIO_Init+0x30c>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	4a5f      	ldr	r2, [pc, #380]	; (8002880 <HAL_GPIO_Init+0x30c>)
 8002704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002708:	6453      	str	r3, [r2, #68]	; 0x44
 800270a:	4b5d      	ldr	r3, [pc, #372]	; (8002880 <HAL_GPIO_Init+0x30c>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002716:	4a5b      	ldr	r2, [pc, #364]	; (8002884 <HAL_GPIO_Init+0x310>)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	089b      	lsrs	r3, r3, #2
 800271c:	3302      	adds	r3, #2
 800271e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	220f      	movs	r2, #15
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a52      	ldr	r2, [pc, #328]	; (8002888 <HAL_GPIO_Init+0x314>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d02b      	beq.n	800279a <HAL_GPIO_Init+0x226>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a51      	ldr	r2, [pc, #324]	; (800288c <HAL_GPIO_Init+0x318>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d025      	beq.n	8002796 <HAL_GPIO_Init+0x222>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a50      	ldr	r2, [pc, #320]	; (8002890 <HAL_GPIO_Init+0x31c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d01f      	beq.n	8002792 <HAL_GPIO_Init+0x21e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4f      	ldr	r2, [pc, #316]	; (8002894 <HAL_GPIO_Init+0x320>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d019      	beq.n	800278e <HAL_GPIO_Init+0x21a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4e      	ldr	r2, [pc, #312]	; (8002898 <HAL_GPIO_Init+0x324>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <HAL_GPIO_Init+0x216>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4d      	ldr	r2, [pc, #308]	; (800289c <HAL_GPIO_Init+0x328>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00d      	beq.n	8002786 <HAL_GPIO_Init+0x212>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a4c      	ldr	r2, [pc, #304]	; (80028a0 <HAL_GPIO_Init+0x32c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d007      	beq.n	8002782 <HAL_GPIO_Init+0x20e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4b      	ldr	r2, [pc, #300]	; (80028a4 <HAL_GPIO_Init+0x330>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d101      	bne.n	800277e <HAL_GPIO_Init+0x20a>
 800277a:	2307      	movs	r3, #7
 800277c:	e00e      	b.n	800279c <HAL_GPIO_Init+0x228>
 800277e:	2308      	movs	r3, #8
 8002780:	e00c      	b.n	800279c <HAL_GPIO_Init+0x228>
 8002782:	2306      	movs	r3, #6
 8002784:	e00a      	b.n	800279c <HAL_GPIO_Init+0x228>
 8002786:	2305      	movs	r3, #5
 8002788:	e008      	b.n	800279c <HAL_GPIO_Init+0x228>
 800278a:	2304      	movs	r3, #4
 800278c:	e006      	b.n	800279c <HAL_GPIO_Init+0x228>
 800278e:	2303      	movs	r3, #3
 8002790:	e004      	b.n	800279c <HAL_GPIO_Init+0x228>
 8002792:	2302      	movs	r3, #2
 8002794:	e002      	b.n	800279c <HAL_GPIO_Init+0x228>
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <HAL_GPIO_Init+0x228>
 800279a:	2300      	movs	r3, #0
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	f002 0203 	and.w	r2, r2, #3
 80027a2:	0092      	lsls	r2, r2, #2
 80027a4:	4093      	lsls	r3, r2
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027ac:	4935      	ldr	r1, [pc, #212]	; (8002884 <HAL_GPIO_Init+0x310>)
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	089b      	lsrs	r3, r3, #2
 80027b2:	3302      	adds	r3, #2
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027ba:	4b3b      	ldr	r3, [pc, #236]	; (80028a8 <HAL_GPIO_Init+0x334>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027de:	4a32      	ldr	r2, [pc, #200]	; (80028a8 <HAL_GPIO_Init+0x334>)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027e4:	4b30      	ldr	r3, [pc, #192]	; (80028a8 <HAL_GPIO_Init+0x334>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002808:	4a27      	ldr	r2, [pc, #156]	; (80028a8 <HAL_GPIO_Init+0x334>)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800280e:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <HAL_GPIO_Init+0x334>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002832:	4a1d      	ldr	r2, [pc, #116]	; (80028a8 <HAL_GPIO_Init+0x334>)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002838:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <HAL_GPIO_Init+0x334>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800285c:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <HAL_GPIO_Init+0x334>)
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3301      	adds	r3, #1
 8002866:	61fb      	str	r3, [r7, #28]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	2b0f      	cmp	r3, #15
 800286c:	f67f ae90 	bls.w	8002590 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002870:	bf00      	nop
 8002872:	bf00      	nop
 8002874:	3724      	adds	r7, #36	; 0x24
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40023800 	.word	0x40023800
 8002884:	40013800 	.word	0x40013800
 8002888:	40020000 	.word	0x40020000
 800288c:	40020400 	.word	0x40020400
 8002890:	40020800 	.word	0x40020800
 8002894:	40020c00 	.word	0x40020c00
 8002898:	40021000 	.word	0x40021000
 800289c:	40021400 	.word	0x40021400
 80028a0:	40021800 	.word	0x40021800
 80028a4:	40021c00 	.word	0x40021c00
 80028a8:	40013c00 	.word	0x40013c00

080028ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	807b      	strh	r3, [r7, #2]
 80028b8:	4613      	mov	r3, r2
 80028ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028bc:	787b      	ldrb	r3, [r7, #1]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028c2:	887a      	ldrh	r2, [r7, #2]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028c8:	e003      	b.n	80028d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ca:	887b      	ldrh	r3, [r7, #2]
 80028cc:	041a      	lsls	r2, r3, #16
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	619a      	str	r2, [r3, #24]
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e12b      	b.n	8002b4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fe fbca 	bl	80010a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2224      	movs	r2, #36	; 0x24
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0201 	bic.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002932:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002942:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002944:	f000 fd5c 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 8002948:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	4a81      	ldr	r2, [pc, #516]	; (8002b54 <HAL_I2C_Init+0x274>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d807      	bhi.n	8002964 <HAL_I2C_Init+0x84>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4a80      	ldr	r2, [pc, #512]	; (8002b58 <HAL_I2C_Init+0x278>)
 8002958:	4293      	cmp	r3, r2
 800295a:	bf94      	ite	ls
 800295c:	2301      	movls	r3, #1
 800295e:	2300      	movhi	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	e006      	b.n	8002972 <HAL_I2C_Init+0x92>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4a7d      	ldr	r2, [pc, #500]	; (8002b5c <HAL_I2C_Init+0x27c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	bf94      	ite	ls
 800296c:	2301      	movls	r3, #1
 800296e:	2300      	movhi	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e0e7      	b.n	8002b4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4a78      	ldr	r2, [pc, #480]	; (8002b60 <HAL_I2C_Init+0x280>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	0c9b      	lsrs	r3, r3, #18
 8002984:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	430a      	orrs	r2, r1
 8002998:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	4a6a      	ldr	r2, [pc, #424]	; (8002b54 <HAL_I2C_Init+0x274>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d802      	bhi.n	80029b4 <HAL_I2C_Init+0xd4>
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	3301      	adds	r3, #1
 80029b2:	e009      	b.n	80029c8 <HAL_I2C_Init+0xe8>
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029ba:	fb02 f303 	mul.w	r3, r2, r3
 80029be:	4a69      	ldr	r2, [pc, #420]	; (8002b64 <HAL_I2C_Init+0x284>)
 80029c0:	fba2 2303 	umull	r2, r3, r2, r3
 80029c4:	099b      	lsrs	r3, r3, #6
 80029c6:	3301      	adds	r3, #1
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	430b      	orrs	r3, r1
 80029ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	495c      	ldr	r1, [pc, #368]	; (8002b54 <HAL_I2C_Init+0x274>)
 80029e4:	428b      	cmp	r3, r1
 80029e6:	d819      	bhi.n	8002a1c <HAL_I2C_Init+0x13c>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1e59      	subs	r1, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80029f6:	1c59      	adds	r1, r3, #1
 80029f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029fc:	400b      	ands	r3, r1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_I2C_Init+0x138>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	1e59      	subs	r1, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a10:	3301      	adds	r3, #1
 8002a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a16:	e051      	b.n	8002abc <HAL_I2C_Init+0x1dc>
 8002a18:	2304      	movs	r3, #4
 8002a1a:	e04f      	b.n	8002abc <HAL_I2C_Init+0x1dc>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d111      	bne.n	8002a48 <HAL_I2C_Init+0x168>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	1e58      	subs	r0, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6859      	ldr	r1, [r3, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	440b      	add	r3, r1
 8002a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a36:	3301      	adds	r3, #1
 8002a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	bf0c      	ite	eq
 8002a40:	2301      	moveq	r3, #1
 8002a42:	2300      	movne	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	e012      	b.n	8002a6e <HAL_I2C_Init+0x18e>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1e58      	subs	r0, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	0099      	lsls	r1, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	bf0c      	ite	eq
 8002a68:	2301      	moveq	r3, #1
 8002a6a:	2300      	movne	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_I2C_Init+0x196>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e022      	b.n	8002abc <HAL_I2C_Init+0x1dc>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10e      	bne.n	8002a9c <HAL_I2C_Init+0x1bc>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1e58      	subs	r0, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6859      	ldr	r1, [r3, #4]
 8002a86:	460b      	mov	r3, r1
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	440b      	add	r3, r1
 8002a8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a90:	3301      	adds	r3, #1
 8002a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a9a:	e00f      	b.n	8002abc <HAL_I2C_Init+0x1dc>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	1e58      	subs	r0, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6859      	ldr	r1, [r3, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	0099      	lsls	r1, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	6809      	ldr	r1, [r1, #0]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69da      	ldr	r2, [r3, #28]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002aea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6911      	ldr	r1, [r2, #16]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68d2      	ldr	r2, [r2, #12]
 8002af6:	4311      	orrs	r1, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	430b      	orrs	r3, r1
 8002afe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	000186a0 	.word	0x000186a0
 8002b58:	001e847f 	.word	0x001e847f
 8002b5c:	003d08ff 	.word	0x003d08ff
 8002b60:	431bde83 	.word	0x431bde83
 8002b64:	10624dd3 	.word	0x10624dd3

08002b68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e264      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d075      	beq.n	8002c72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b86:	4ba3      	ldr	r3, [pc, #652]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d00c      	beq.n	8002bac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b92:	4ba0      	ldr	r3, [pc, #640]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d112      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b9e:	4b9d      	ldr	r3, [pc, #628]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002baa:	d10b      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bac:	4b99      	ldr	r3, [pc, #612]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d05b      	beq.n	8002c70 <HAL_RCC_OscConfig+0x108>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d157      	bne.n	8002c70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e23f      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bcc:	d106      	bne.n	8002bdc <HAL_RCC_OscConfig+0x74>
 8002bce:	4b91      	ldr	r3, [pc, #580]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a90      	ldr	r2, [pc, #576]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	e01d      	b.n	8002c18 <HAL_RCC_OscConfig+0xb0>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be4:	d10c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x98>
 8002be6:	4b8b      	ldr	r3, [pc, #556]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a8a      	ldr	r2, [pc, #552]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	4b88      	ldr	r3, [pc, #544]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a87      	ldr	r2, [pc, #540]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	e00b      	b.n	8002c18 <HAL_RCC_OscConfig+0xb0>
 8002c00:	4b84      	ldr	r3, [pc, #528]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a83      	ldr	r2, [pc, #524]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	4b81      	ldr	r3, [pc, #516]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a80      	ldr	r2, [pc, #512]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d013      	beq.n	8002c48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7ff fad4 	bl	80021cc <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c28:	f7ff fad0 	bl	80021cc <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b64      	cmp	r3, #100	; 0x64
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e204      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3a:	4b76      	ldr	r3, [pc, #472]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0xc0>
 8002c46:	e014      	b.n	8002c72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c48:	f7ff fac0 	bl	80021cc <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c50:	f7ff fabc 	bl	80021cc <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	; 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e1f0      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c62:	4b6c      	ldr	r3, [pc, #432]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0xe8>
 8002c6e:	e000      	b.n	8002c72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d063      	beq.n	8002d46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c7e:	4b65      	ldr	r3, [pc, #404]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00b      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c8a:	4b62      	ldr	r3, [pc, #392]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d11c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c96:	4b5f      	ldr	r3, [pc, #380]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d116      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca2:	4b5c      	ldr	r3, [pc, #368]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d005      	beq.n	8002cba <HAL_RCC_OscConfig+0x152>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d001      	beq.n	8002cba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e1c4      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cba:	4b56      	ldr	r3, [pc, #344]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4952      	ldr	r1, [pc, #328]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cce:	e03a      	b.n	8002d46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d020      	beq.n	8002d1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd8:	4b4f      	ldr	r3, [pc, #316]	; (8002e18 <HAL_RCC_OscConfig+0x2b0>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cde:	f7ff fa75 	bl	80021cc <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce6:	f7ff fa71 	bl	80021cc <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e1a5      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf8:	4b46      	ldr	r3, [pc, #280]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d04:	4b43      	ldr	r3, [pc, #268]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4940      	ldr	r1, [pc, #256]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	600b      	str	r3, [r1, #0]
 8002d18:	e015      	b.n	8002d46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d1a:	4b3f      	ldr	r3, [pc, #252]	; (8002e18 <HAL_RCC_OscConfig+0x2b0>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7ff fa54 	bl	80021cc <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d28:	f7ff fa50 	bl	80021cc <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e184      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3a:	4b36      	ldr	r3, [pc, #216]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d030      	beq.n	8002db4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d016      	beq.n	8002d88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d5a:	4b30      	ldr	r3, [pc, #192]	; (8002e1c <HAL_RCC_OscConfig+0x2b4>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d60:	f7ff fa34 	bl	80021cc <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d68:	f7ff fa30 	bl	80021cc <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e164      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7a:	4b26      	ldr	r3, [pc, #152]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0x200>
 8002d86:	e015      	b.n	8002db4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d88:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <HAL_RCC_OscConfig+0x2b4>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8e:	f7ff fa1d 	bl	80021cc <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d96:	f7ff fa19 	bl	80021cc <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e14d      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da8:	4b1a      	ldr	r3, [pc, #104]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1f0      	bne.n	8002d96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80a0 	beq.w	8002f02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc6:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10f      	bne.n	8002df2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	4a0e      	ldr	r2, [pc, #56]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de0:	6413      	str	r3, [r2, #64]	; 0x40
 8002de2:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dee:	2301      	movs	r3, #1
 8002df0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df2:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <HAL_RCC_OscConfig+0x2b8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d121      	bne.n	8002e42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <HAL_RCC_OscConfig+0x2b8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a07      	ldr	r2, [pc, #28]	; (8002e20 <HAL_RCC_OscConfig+0x2b8>)
 8002e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0a:	f7ff f9df 	bl	80021cc <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e10:	e011      	b.n	8002e36 <HAL_RCC_OscConfig+0x2ce>
 8002e12:	bf00      	nop
 8002e14:	40023800 	.word	0x40023800
 8002e18:	42470000 	.word	0x42470000
 8002e1c:	42470e80 	.word	0x42470e80
 8002e20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e24:	f7ff f9d2 	bl	80021cc <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e106      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e36:	4b85      	ldr	r3, [pc, #532]	; (800304c <HAL_RCC_OscConfig+0x4e4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d106      	bne.n	8002e58 <HAL_RCC_OscConfig+0x2f0>
 8002e4a:	4b81      	ldr	r3, [pc, #516]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4e:	4a80      	ldr	r2, [pc, #512]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	6713      	str	r3, [r2, #112]	; 0x70
 8002e56:	e01c      	b.n	8002e92 <HAL_RCC_OscConfig+0x32a>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b05      	cmp	r3, #5
 8002e5e:	d10c      	bne.n	8002e7a <HAL_RCC_OscConfig+0x312>
 8002e60:	4b7b      	ldr	r3, [pc, #492]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e64:	4a7a      	ldr	r2, [pc, #488]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e66:	f043 0304 	orr.w	r3, r3, #4
 8002e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6c:	4b78      	ldr	r3, [pc, #480]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e70:	4a77      	ldr	r2, [pc, #476]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	6713      	str	r3, [r2, #112]	; 0x70
 8002e78:	e00b      	b.n	8002e92 <HAL_RCC_OscConfig+0x32a>
 8002e7a:	4b75      	ldr	r3, [pc, #468]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	4a74      	ldr	r2, [pc, #464]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e80:	f023 0301 	bic.w	r3, r3, #1
 8002e84:	6713      	str	r3, [r2, #112]	; 0x70
 8002e86:	4b72      	ldr	r3, [pc, #456]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8a:	4a71      	ldr	r2, [pc, #452]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e8c:	f023 0304 	bic.w	r3, r3, #4
 8002e90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d015      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9a:	f7ff f997 	bl	80021cc <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea2:	f7ff f993 	bl	80021cc <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e0c5      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb8:	4b65      	ldr	r3, [pc, #404]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0ee      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x33a>
 8002ec4:	e014      	b.n	8002ef0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec6:	f7ff f981 	bl	80021cc <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ecc:	e00a      	b.n	8002ee4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ece:	f7ff f97d 	bl	80021cc <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e0af      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee4:	4b5a      	ldr	r3, [pc, #360]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1ee      	bne.n	8002ece <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ef0:	7dfb      	ldrb	r3, [r7, #23]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d105      	bne.n	8002f02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef6:	4b56      	ldr	r3, [pc, #344]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	4a55      	ldr	r2, [pc, #340]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 809b 	beq.w	8003042 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f0c:	4b50      	ldr	r3, [pc, #320]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 030c 	and.w	r3, r3, #12
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d05c      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d141      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f20:	4b4c      	ldr	r3, [pc, #304]	; (8003054 <HAL_RCC_OscConfig+0x4ec>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f26:	f7ff f951 	bl	80021cc <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f2e:	f7ff f94d 	bl	80021cc <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e081      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f40:	4b43      	ldr	r3, [pc, #268]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f0      	bne.n	8002f2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69da      	ldr	r2, [r3, #28]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	019b      	lsls	r3, r3, #6
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f62:	085b      	lsrs	r3, r3, #1
 8002f64:	3b01      	subs	r3, #1
 8002f66:	041b      	lsls	r3, r3, #16
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6e:	061b      	lsls	r3, r3, #24
 8002f70:	4937      	ldr	r1, [pc, #220]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f76:	4b37      	ldr	r3, [pc, #220]	; (8003054 <HAL_RCC_OscConfig+0x4ec>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7c:	f7ff f926 	bl	80021cc <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f84:	f7ff f922 	bl	80021cc <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e056      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f96:	4b2e      	ldr	r3, [pc, #184]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0f0      	beq.n	8002f84 <HAL_RCC_OscConfig+0x41c>
 8002fa2:	e04e      	b.n	8003042 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa4:	4b2b      	ldr	r3, [pc, #172]	; (8003054 <HAL_RCC_OscConfig+0x4ec>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002faa:	f7ff f90f 	bl	80021cc <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb2:	f7ff f90b 	bl	80021cc <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e03f      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc4:	4b22      	ldr	r3, [pc, #136]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1f0      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x44a>
 8002fd0:	e037      	b.n	8003042 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e032      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fde:	4b1c      	ldr	r3, [pc, #112]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d028      	beq.n	800303e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d121      	bne.n	800303e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003004:	429a      	cmp	r2, r3
 8003006:	d11a      	bne.n	800303e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800300e:	4013      	ands	r3, r2
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003014:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003016:	4293      	cmp	r3, r2
 8003018:	d111      	bne.n	800303e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	085b      	lsrs	r3, r3, #1
 8003026:	3b01      	subs	r3, #1
 8003028:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800302a:	429a      	cmp	r2, r3
 800302c:	d107      	bne.n	800303e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800303a:	429a      	cmp	r2, r3
 800303c:	d001      	beq.n	8003042 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40007000 	.word	0x40007000
 8003050:	40023800 	.word	0x40023800
 8003054:	42470060 	.word	0x42470060

08003058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e0cc      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800306c:	4b68      	ldr	r3, [pc, #416]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d90c      	bls.n	8003094 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307a:	4b65      	ldr	r3, [pc, #404]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003082:	4b63      	ldr	r3, [pc, #396]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d001      	beq.n	8003094 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0b8      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d020      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030ac:	4b59      	ldr	r3, [pc, #356]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	4a58      	ldr	r2, [pc, #352]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c4:	4b53      	ldr	r3, [pc, #332]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	4a52      	ldr	r2, [pc, #328]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d0:	4b50      	ldr	r3, [pc, #320]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	494d      	ldr	r1, [pc, #308]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d044      	beq.n	8003178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d107      	bne.n	8003106 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	4b47      	ldr	r3, [pc, #284]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d119      	bne.n	8003136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e07f      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d003      	beq.n	8003116 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003112:	2b03      	cmp	r3, #3
 8003114:	d107      	bne.n	8003126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003116:	4b3f      	ldr	r3, [pc, #252]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d109      	bne.n	8003136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e06f      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003126:	4b3b      	ldr	r3, [pc, #236]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e067      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003136:	4b37      	ldr	r3, [pc, #220]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f023 0203 	bic.w	r2, r3, #3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4934      	ldr	r1, [pc, #208]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	4313      	orrs	r3, r2
 8003146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003148:	f7ff f840 	bl	80021cc <HAL_GetTick>
 800314c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314e:	e00a      	b.n	8003166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003150:	f7ff f83c 	bl	80021cc <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	; 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e04f      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003166:	4b2b      	ldr	r3, [pc, #172]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 020c 	and.w	r2, r3, #12
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	429a      	cmp	r2, r3
 8003176:	d1eb      	bne.n	8003150 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003178:	4b25      	ldr	r3, [pc, #148]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d20c      	bcs.n	80031a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003186:	4b22      	ldr	r3, [pc, #136]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318e:	4b20      	ldr	r3, [pc, #128]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d001      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e032      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031ac:	4b19      	ldr	r3, [pc, #100]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	4916      	ldr	r1, [pc, #88]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d009      	beq.n	80031de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ca:	4b12      	ldr	r3, [pc, #72]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	490e      	ldr	r1, [pc, #56]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031de:	f000 f821 	bl	8003224 <HAL_RCC_GetSysClockFreq>
 80031e2:	4602      	mov	r2, r0
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	490a      	ldr	r1, [pc, #40]	; (8003218 <HAL_RCC_ClockConfig+0x1c0>)
 80031f0:	5ccb      	ldrb	r3, [r1, r3]
 80031f2:	fa22 f303 	lsr.w	r3, r2, r3
 80031f6:	4a09      	ldr	r2, [pc, #36]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fe ffa0 	bl	8002144 <HAL_InitTick>

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40023c00 	.word	0x40023c00
 8003214:	40023800 	.word	0x40023800
 8003218:	0800549c 	.word	0x0800549c
 800321c:	2000001c 	.word	0x2000001c
 8003220:	20000020 	.word	0x20000020

08003224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003224:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	607b      	str	r3, [r7, #4]
 8003230:	2300      	movs	r3, #0
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	2300      	movs	r3, #0
 8003236:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800323c:	4b67      	ldr	r3, [pc, #412]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 030c 	and.w	r3, r3, #12
 8003244:	2b08      	cmp	r3, #8
 8003246:	d00d      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x40>
 8003248:	2b08      	cmp	r3, #8
 800324a:	f200 80bd 	bhi.w	80033c8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <HAL_RCC_GetSysClockFreq+0x34>
 8003252:	2b04      	cmp	r3, #4
 8003254:	d003      	beq.n	800325e <HAL_RCC_GetSysClockFreq+0x3a>
 8003256:	e0b7      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003258:	4b61      	ldr	r3, [pc, #388]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800325a:	60bb      	str	r3, [r7, #8]
       break;
 800325c:	e0b7      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800325e:	4b61      	ldr	r3, [pc, #388]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003260:	60bb      	str	r3, [r7, #8]
      break;
 8003262:	e0b4      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003264:	4b5d      	ldr	r3, [pc, #372]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800326c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800326e:	4b5b      	ldr	r3, [pc, #364]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d04d      	beq.n	8003316 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800327a:	4b58      	ldr	r3, [pc, #352]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	099b      	lsrs	r3, r3, #6
 8003280:	461a      	mov	r2, r3
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	f240 10ff 	movw	r0, #511	; 0x1ff
 800328a:	f04f 0100 	mov.w	r1, #0
 800328e:	ea02 0800 	and.w	r8, r2, r0
 8003292:	ea03 0901 	and.w	r9, r3, r1
 8003296:	4640      	mov	r0, r8
 8003298:	4649      	mov	r1, r9
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	014b      	lsls	r3, r1, #5
 80032a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032a8:	0142      	lsls	r2, r0, #5
 80032aa:	4610      	mov	r0, r2
 80032ac:	4619      	mov	r1, r3
 80032ae:	ebb0 0008 	subs.w	r0, r0, r8
 80032b2:	eb61 0109 	sbc.w	r1, r1, r9
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	018b      	lsls	r3, r1, #6
 80032c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032c4:	0182      	lsls	r2, r0, #6
 80032c6:	1a12      	subs	r2, r2, r0
 80032c8:	eb63 0301 	sbc.w	r3, r3, r1
 80032cc:	f04f 0000 	mov.w	r0, #0
 80032d0:	f04f 0100 	mov.w	r1, #0
 80032d4:	00d9      	lsls	r1, r3, #3
 80032d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032da:	00d0      	lsls	r0, r2, #3
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	eb12 0208 	adds.w	r2, r2, r8
 80032e4:	eb43 0309 	adc.w	r3, r3, r9
 80032e8:	f04f 0000 	mov.w	r0, #0
 80032ec:	f04f 0100 	mov.w	r1, #0
 80032f0:	0259      	lsls	r1, r3, #9
 80032f2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80032f6:	0250      	lsls	r0, r2, #9
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4610      	mov	r0, r2
 80032fe:	4619      	mov	r1, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	461a      	mov	r2, r3
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	f7fd fb4c 	bl	80009a4 <__aeabi_uldivmod>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4613      	mov	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	e04a      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003316:	4b31      	ldr	r3, [pc, #196]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	099b      	lsrs	r3, r3, #6
 800331c:	461a      	mov	r2, r3
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003326:	f04f 0100 	mov.w	r1, #0
 800332a:	ea02 0400 	and.w	r4, r2, r0
 800332e:	ea03 0501 	and.w	r5, r3, r1
 8003332:	4620      	mov	r0, r4
 8003334:	4629      	mov	r1, r5
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	014b      	lsls	r3, r1, #5
 8003340:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003344:	0142      	lsls	r2, r0, #5
 8003346:	4610      	mov	r0, r2
 8003348:	4619      	mov	r1, r3
 800334a:	1b00      	subs	r0, r0, r4
 800334c:	eb61 0105 	sbc.w	r1, r1, r5
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	018b      	lsls	r3, r1, #6
 800335a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800335e:	0182      	lsls	r2, r0, #6
 8003360:	1a12      	subs	r2, r2, r0
 8003362:	eb63 0301 	sbc.w	r3, r3, r1
 8003366:	f04f 0000 	mov.w	r0, #0
 800336a:	f04f 0100 	mov.w	r1, #0
 800336e:	00d9      	lsls	r1, r3, #3
 8003370:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003374:	00d0      	lsls	r0, r2, #3
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	1912      	adds	r2, r2, r4
 800337c:	eb45 0303 	adc.w	r3, r5, r3
 8003380:	f04f 0000 	mov.w	r0, #0
 8003384:	f04f 0100 	mov.w	r1, #0
 8003388:	0299      	lsls	r1, r3, #10
 800338a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800338e:	0290      	lsls	r0, r2, #10
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	4610      	mov	r0, r2
 8003396:	4619      	mov	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	461a      	mov	r2, r3
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	f7fd fb00 	bl	80009a4 <__aeabi_uldivmod>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4613      	mov	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	0c1b      	lsrs	r3, r3, #16
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	3301      	adds	r3, #1
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c4:	60bb      	str	r3, [r7, #8]
      break;
 80033c6:	e002      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80033ca:	60bb      	str	r3, [r7, #8]
      break;
 80033cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ce:	68bb      	ldr	r3, [r7, #8]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800
 80033e0:	00f42400 	.word	0x00f42400
 80033e4:	007a1200 	.word	0x007a1200

080033e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ec:	4b03      	ldr	r3, [pc, #12]	; (80033fc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ee:	681b      	ldr	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	2000001c 	.word	0x2000001c

08003400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003404:	f7ff fff0 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 8003408:	4602      	mov	r2, r0
 800340a:	4b05      	ldr	r3, [pc, #20]	; (8003420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	0a9b      	lsrs	r3, r3, #10
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	4903      	ldr	r1, [pc, #12]	; (8003424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003416:	5ccb      	ldrb	r3, [r1, r3]
 8003418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800341c:	4618      	mov	r0, r3
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40023800 	.word	0x40023800
 8003424:	080054ac 	.word	0x080054ac

08003428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800342c:	f7ff ffdc 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 8003430:	4602      	mov	r2, r0
 8003432:	4b05      	ldr	r3, [pc, #20]	; (8003448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	0b5b      	lsrs	r3, r3, #13
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	4903      	ldr	r1, [pc, #12]	; (800344c <HAL_RCC_GetPCLK2Freq+0x24>)
 800343e:	5ccb      	ldrb	r3, [r1, r3]
 8003440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003444:	4618      	mov	r0, r3
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40023800 	.word	0x40023800
 800344c:	080054ac 	.word	0x080054ac

08003450 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e07b      	b.n	800355a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	2b00      	cmp	r3, #0
 8003468:	d108      	bne.n	800347c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003472:	d009      	beq.n	8003488 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	61da      	str	r2, [r3, #28]
 800347a:	e005      	b.n	8003488 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fe fc2a 	bl	8001cfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350c:	ea42 0103 	orr.w	r1, r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	0c1b      	lsrs	r3, r3, #16
 8003526:	f003 0104 	and.w	r1, r3, #4
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	f003 0210 	and.w	r2, r3, #16
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003548:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b088      	sub	sp, #32
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	603b      	str	r3, [r7, #0]
 800356e:	4613      	mov	r3, r2
 8003570:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_SPI_Transmit+0x22>
 8003580:	2302      	movs	r3, #2
 8003582:	e126      	b.n	80037d2 <HAL_SPI_Transmit+0x270>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800358c:	f7fe fe1e 	bl	80021cc <HAL_GetTick>
 8003590:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d002      	beq.n	80035a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035a2:	2302      	movs	r3, #2
 80035a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035a6:	e10b      	b.n	80037c0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <HAL_SPI_Transmit+0x52>
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d102      	bne.n	80035ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035b8:	e102      	b.n	80037c0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2203      	movs	r2, #3
 80035be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	88fa      	ldrh	r2, [r7, #6]
 80035d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	88fa      	ldrh	r2, [r7, #6]
 80035d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003600:	d10f      	bne.n	8003622 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003610:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003620:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362c:	2b40      	cmp	r3, #64	; 0x40
 800362e:	d007      	beq.n	8003640 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800363e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003648:	d14b      	bne.n	80036e2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <HAL_SPI_Transmit+0xf6>
 8003652:	8afb      	ldrh	r3, [r7, #22]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d13e      	bne.n	80036d6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	881a      	ldrh	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	1c9a      	adds	r2, r3, #2
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800367c:	e02b      	b.n	80036d6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b02      	cmp	r3, #2
 800368a:	d112      	bne.n	80036b2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003690:	881a      	ldrh	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	1c9a      	adds	r2, r3, #2
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80036b0:	e011      	b.n	80036d6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036b2:	f7fe fd8b 	bl	80021cc <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d803      	bhi.n	80036ca <HAL_SPI_Transmit+0x168>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c8:	d102      	bne.n	80036d0 <HAL_SPI_Transmit+0x16e>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d102      	bne.n	80036d6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036d4:	e074      	b.n	80037c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1ce      	bne.n	800367e <HAL_SPI_Transmit+0x11c>
 80036e0:	e04c      	b.n	800377c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <HAL_SPI_Transmit+0x18e>
 80036ea:	8afb      	ldrh	r3, [r7, #22]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d140      	bne.n	8003772 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	330c      	adds	r3, #12
 80036fa:	7812      	ldrb	r2, [r2, #0]
 80036fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b01      	subs	r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003716:	e02c      	b.n	8003772 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b02      	cmp	r3, #2
 8003724:	d113      	bne.n	800374e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	330c      	adds	r3, #12
 8003730:	7812      	ldrb	r2, [r2, #0]
 8003732:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	86da      	strh	r2, [r3, #54]	; 0x36
 800374c:	e011      	b.n	8003772 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800374e:	f7fe fd3d 	bl	80021cc <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d803      	bhi.n	8003766 <HAL_SPI_Transmit+0x204>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003764:	d102      	bne.n	800376c <HAL_SPI_Transmit+0x20a>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d102      	bne.n	8003772 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003770:	e026      	b.n	80037c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1cd      	bne.n	8003718 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	6839      	ldr	r1, [r7, #0]
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f8b3 	bl	80038ec <SPI_EndRxTxTransaction>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2220      	movs	r2, #32
 8003790:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10a      	bne.n	80037b0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800379a:	2300      	movs	r3, #0
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	613b      	str	r3, [r7, #16]
 80037ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	77fb      	strb	r3, [r7, #31]
 80037bc:	e000      	b.n	80037c0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80037be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3720      	adds	r7, #32
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	4613      	mov	r3, r2
 80037ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037ec:	f7fe fcee 	bl	80021cc <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	4413      	add	r3, r2
 80037fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037fc:	f7fe fce6 	bl	80021cc <HAL_GetTick>
 8003800:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003802:	4b39      	ldr	r3, [pc, #228]	; (80038e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	015b      	lsls	r3, r3, #5
 8003808:	0d1b      	lsrs	r3, r3, #20
 800380a:	69fa      	ldr	r2, [r7, #28]
 800380c:	fb02 f303 	mul.w	r3, r2, r3
 8003810:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003812:	e054      	b.n	80038be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381a:	d050      	beq.n	80038be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800381c:	f7fe fcd6 	bl	80021cc <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	69fa      	ldr	r2, [r7, #28]
 8003828:	429a      	cmp	r2, r3
 800382a:	d902      	bls.n	8003832 <SPI_WaitFlagStateUntilTimeout+0x56>
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d13d      	bne.n	80038ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003840:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800384a:	d111      	bne.n	8003870 <SPI_WaitFlagStateUntilTimeout+0x94>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003854:	d004      	beq.n	8003860 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385e:	d107      	bne.n	8003870 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800386e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003878:	d10f      	bne.n	800389a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003898:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e017      	b.n	80038de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	4013      	ands	r3, r2
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	bf0c      	ite	eq
 80038ce:	2301      	moveq	r3, #1
 80038d0:	2300      	movne	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	461a      	mov	r2, r3
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d19b      	bne.n	8003814 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3720      	adds	r7, #32
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	2000001c 	.word	0x2000001c

080038ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80038f8:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <SPI_EndRxTxTransaction+0x7c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a1b      	ldr	r2, [pc, #108]	; (800396c <SPI_EndRxTxTransaction+0x80>)
 80038fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003902:	0d5b      	lsrs	r3, r3, #21
 8003904:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003908:	fb02 f303 	mul.w	r3, r2, r3
 800390c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003916:	d112      	bne.n	800393e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2200      	movs	r2, #0
 8003920:	2180      	movs	r1, #128	; 0x80
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f7ff ff5a 	bl	80037dc <SPI_WaitFlagStateUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d016      	beq.n	800395c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003932:	f043 0220 	orr.w	r2, r3, #32
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e00f      	b.n	800395e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	3b01      	subs	r3, #1
 8003948:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003954:	2b80      	cmp	r3, #128	; 0x80
 8003956:	d0f2      	beq.n	800393e <SPI_EndRxTxTransaction+0x52>
 8003958:	e000      	b.n	800395c <SPI_EndRxTxTransaction+0x70>
        break;
 800395a:	bf00      	nop
  }

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	2000001c 	.word	0x2000001c
 800396c:	165e9f81 	.word	0x165e9f81

08003970 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e034      	b.n	80039f0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f7fd fa50 	bl	8000e40 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	3308      	adds	r3, #8
 80039a8:	4619      	mov	r1, r3
 80039aa:	4610      	mov	r0, r2
 80039ac:	f001 fc6e 	bl	800528c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6818      	ldr	r0, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	461a      	mov	r2, r3
 80039ba:	68b9      	ldr	r1, [r7, #8]
 80039bc:	f001 fcb8 	bl	8005330 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6858      	ldr	r0, [r3, #4]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	f001 fced 	bl	80053ac <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	6892      	ldr	r2, [r2, #8]
 80039da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	6892      	ldr	r2, [r2, #8]
 80039e6:	f041 0101 	orr.w	r1, r1, #1
 80039ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e041      	b.n	8003a8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fe fa78 	bl	8001f14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3304      	adds	r3, #4
 8003a34:	4619      	mov	r1, r3
 8003a36:	4610      	mov	r0, r2
 8003a38:	f000 fa96 	bl	8003f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d001      	beq.n	8003ab0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e04e      	b.n	8003b4e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a23      	ldr	r2, [pc, #140]	; (8003b5c <HAL_TIM_Base_Start_IT+0xc4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d022      	beq.n	8003b18 <HAL_TIM_Base_Start_IT+0x80>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ada:	d01d      	beq.n	8003b18 <HAL_TIM_Base_Start_IT+0x80>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a1f      	ldr	r2, [pc, #124]	; (8003b60 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d018      	beq.n	8003b18 <HAL_TIM_Base_Start_IT+0x80>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a1e      	ldr	r2, [pc, #120]	; (8003b64 <HAL_TIM_Base_Start_IT+0xcc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d013      	beq.n	8003b18 <HAL_TIM_Base_Start_IT+0x80>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a1c      	ldr	r2, [pc, #112]	; (8003b68 <HAL_TIM_Base_Start_IT+0xd0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00e      	beq.n	8003b18 <HAL_TIM_Base_Start_IT+0x80>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1b      	ldr	r2, [pc, #108]	; (8003b6c <HAL_TIM_Base_Start_IT+0xd4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d009      	beq.n	8003b18 <HAL_TIM_Base_Start_IT+0x80>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a19      	ldr	r2, [pc, #100]	; (8003b70 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d004      	beq.n	8003b18 <HAL_TIM_Base_Start_IT+0x80>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a18      	ldr	r2, [pc, #96]	; (8003b74 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d111      	bne.n	8003b3c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b06      	cmp	r3, #6
 8003b28:	d010      	beq.n	8003b4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f042 0201 	orr.w	r2, r2, #1
 8003b38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3a:	e007      	b.n	8003b4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40010000 	.word	0x40010000
 8003b60:	40000400 	.word	0x40000400
 8003b64:	40000800 	.word	0x40000800
 8003b68:	40000c00 	.word	0x40000c00
 8003b6c:	40010400 	.word	0x40010400
 8003b70:	40014000 	.word	0x40014000
 8003b74:	40001800 	.word	0x40001800

08003b78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d122      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d11b      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0202 	mvn.w	r2, #2
 8003ba4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f9b5 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003bc0:	e005      	b.n	8003bce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f9a7 	bl	8003f16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f9b8 	bl	8003f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d122      	bne.n	8003c28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d11b      	bne.n	8003c28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0204 	mvn.w	r2, #4
 8003bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f98b 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003c14:	e005      	b.n	8003c22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f97d 	bl	8003f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f98e 	bl	8003f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d122      	bne.n	8003c7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	d11b      	bne.n	8003c7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f06f 0208 	mvn.w	r2, #8
 8003c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2204      	movs	r2, #4
 8003c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f961 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003c68:	e005      	b.n	8003c76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f953 	bl	8003f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f964 	bl	8003f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f003 0310 	and.w	r3, r3, #16
 8003c86:	2b10      	cmp	r3, #16
 8003c88:	d122      	bne.n	8003cd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f003 0310 	and.w	r3, r3, #16
 8003c94:	2b10      	cmp	r3, #16
 8003c96:	d11b      	bne.n	8003cd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f06f 0210 	mvn.w	r2, #16
 8003ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2208      	movs	r2, #8
 8003ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f937 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003cbc:	e005      	b.n	8003cca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f929 	bl	8003f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f93a 	bl	8003f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d10e      	bne.n	8003cfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d107      	bne.n	8003cfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f06f 0201 	mvn.w	r2, #1
 8003cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fd ff34 	bl	8001b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d06:	2b80      	cmp	r3, #128	; 0x80
 8003d08:	d10e      	bne.n	8003d28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d14:	2b80      	cmp	r3, #128	; 0x80
 8003d16:	d107      	bne.n	8003d28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 fae0 	bl	80042e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d32:	2b40      	cmp	r3, #64	; 0x40
 8003d34:	d10e      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d40:	2b40      	cmp	r3, #64	; 0x40
 8003d42:	d107      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f8ff 	bl	8003f52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	d10e      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	2b20      	cmp	r3, #32
 8003d6e:	d107      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f06f 0220 	mvn.w	r2, #32
 8003d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 faaa 	bl	80042d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d80:	bf00      	nop
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_TIM_ConfigClockSource+0x1c>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e0b4      	b.n	8003f0e <HAL_TIM_ConfigClockSource+0x186>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ddc:	d03e      	beq.n	8003e5c <HAL_TIM_ConfigClockSource+0xd4>
 8003dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de2:	f200 8087 	bhi.w	8003ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8003de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dea:	f000 8086 	beq.w	8003efa <HAL_TIM_ConfigClockSource+0x172>
 8003dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df2:	d87f      	bhi.n	8003ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8003df4:	2b70      	cmp	r3, #112	; 0x70
 8003df6:	d01a      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0xa6>
 8003df8:	2b70      	cmp	r3, #112	; 0x70
 8003dfa:	d87b      	bhi.n	8003ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dfc:	2b60      	cmp	r3, #96	; 0x60
 8003dfe:	d050      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0x11a>
 8003e00:	2b60      	cmp	r3, #96	; 0x60
 8003e02:	d877      	bhi.n	8003ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e04:	2b50      	cmp	r3, #80	; 0x50
 8003e06:	d03c      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0xfa>
 8003e08:	2b50      	cmp	r3, #80	; 0x50
 8003e0a:	d873      	bhi.n	8003ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e0c:	2b40      	cmp	r3, #64	; 0x40
 8003e0e:	d058      	beq.n	8003ec2 <HAL_TIM_ConfigClockSource+0x13a>
 8003e10:	2b40      	cmp	r3, #64	; 0x40
 8003e12:	d86f      	bhi.n	8003ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e14:	2b30      	cmp	r3, #48	; 0x30
 8003e16:	d064      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e18:	2b30      	cmp	r3, #48	; 0x30
 8003e1a:	d86b      	bhi.n	8003ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d060      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	d867      	bhi.n	8003ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d05c      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e28:	2b10      	cmp	r3, #16
 8003e2a:	d05a      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e2c:	e062      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6899      	ldr	r1, [r3, #8]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f000 f9ad 	bl	800419c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	609a      	str	r2, [r3, #8]
      break;
 8003e5a:	e04f      	b.n	8003efc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	6899      	ldr	r1, [r3, #8]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f000 f996 	bl	800419c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e7e:	609a      	str	r2, [r3, #8]
      break;
 8003e80:	e03c      	b.n	8003efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	6859      	ldr	r1, [r3, #4]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f000 f90a 	bl	80040a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2150      	movs	r1, #80	; 0x50
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 f963 	bl	8004166 <TIM_ITRx_SetConfig>
      break;
 8003ea0:	e02c      	b.n	8003efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6818      	ldr	r0, [r3, #0]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	6859      	ldr	r1, [r3, #4]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	f000 f929 	bl	8004106 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2160      	movs	r1, #96	; 0x60
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 f953 	bl	8004166 <TIM_ITRx_SetConfig>
      break;
 8003ec0:	e01c      	b.n	8003efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6818      	ldr	r0, [r3, #0]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	6859      	ldr	r1, [r3, #4]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f000 f8ea 	bl	80040a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2140      	movs	r1, #64	; 0x40
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 f943 	bl	8004166 <TIM_ITRx_SetConfig>
      break;
 8003ee0:	e00c      	b.n	8003efc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4619      	mov	r1, r3
 8003eec:	4610      	mov	r0, r2
 8003eee:	f000 f93a 	bl	8004166 <TIM_ITRx_SetConfig>
      break;
 8003ef2:	e003      	b.n	8003efc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ef8:	e000      	b.n	8003efc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003efa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a40      	ldr	r2, [pc, #256]	; (800407c <TIM_Base_SetConfig+0x114>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d013      	beq.n	8003fa8 <TIM_Base_SetConfig+0x40>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f86:	d00f      	beq.n	8003fa8 <TIM_Base_SetConfig+0x40>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a3d      	ldr	r2, [pc, #244]	; (8004080 <TIM_Base_SetConfig+0x118>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d00b      	beq.n	8003fa8 <TIM_Base_SetConfig+0x40>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a3c      	ldr	r2, [pc, #240]	; (8004084 <TIM_Base_SetConfig+0x11c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d007      	beq.n	8003fa8 <TIM_Base_SetConfig+0x40>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a3b      	ldr	r2, [pc, #236]	; (8004088 <TIM_Base_SetConfig+0x120>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d003      	beq.n	8003fa8 <TIM_Base_SetConfig+0x40>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a3a      	ldr	r2, [pc, #232]	; (800408c <TIM_Base_SetConfig+0x124>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d108      	bne.n	8003fba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a2f      	ldr	r2, [pc, #188]	; (800407c <TIM_Base_SetConfig+0x114>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d02b      	beq.n	800401a <TIM_Base_SetConfig+0xb2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc8:	d027      	beq.n	800401a <TIM_Base_SetConfig+0xb2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a2c      	ldr	r2, [pc, #176]	; (8004080 <TIM_Base_SetConfig+0x118>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d023      	beq.n	800401a <TIM_Base_SetConfig+0xb2>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a2b      	ldr	r2, [pc, #172]	; (8004084 <TIM_Base_SetConfig+0x11c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d01f      	beq.n	800401a <TIM_Base_SetConfig+0xb2>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a2a      	ldr	r2, [pc, #168]	; (8004088 <TIM_Base_SetConfig+0x120>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d01b      	beq.n	800401a <TIM_Base_SetConfig+0xb2>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a29      	ldr	r2, [pc, #164]	; (800408c <TIM_Base_SetConfig+0x124>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d017      	beq.n	800401a <TIM_Base_SetConfig+0xb2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a28      	ldr	r2, [pc, #160]	; (8004090 <TIM_Base_SetConfig+0x128>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d013      	beq.n	800401a <TIM_Base_SetConfig+0xb2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a27      	ldr	r2, [pc, #156]	; (8004094 <TIM_Base_SetConfig+0x12c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d00f      	beq.n	800401a <TIM_Base_SetConfig+0xb2>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a26      	ldr	r2, [pc, #152]	; (8004098 <TIM_Base_SetConfig+0x130>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00b      	beq.n	800401a <TIM_Base_SetConfig+0xb2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a25      	ldr	r2, [pc, #148]	; (800409c <TIM_Base_SetConfig+0x134>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d007      	beq.n	800401a <TIM_Base_SetConfig+0xb2>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a24      	ldr	r2, [pc, #144]	; (80040a0 <TIM_Base_SetConfig+0x138>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d003      	beq.n	800401a <TIM_Base_SetConfig+0xb2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a23      	ldr	r2, [pc, #140]	; (80040a4 <TIM_Base_SetConfig+0x13c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d108      	bne.n	800402c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	4313      	orrs	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a0a      	ldr	r2, [pc, #40]	; (800407c <TIM_Base_SetConfig+0x114>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d003      	beq.n	8004060 <TIM_Base_SetConfig+0xf8>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a0c      	ldr	r2, [pc, #48]	; (800408c <TIM_Base_SetConfig+0x124>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d103      	bne.n	8004068 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	615a      	str	r2, [r3, #20]
}
 800406e:	bf00      	nop
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	40010000 	.word	0x40010000
 8004080:	40000400 	.word	0x40000400
 8004084:	40000800 	.word	0x40000800
 8004088:	40000c00 	.word	0x40000c00
 800408c:	40010400 	.word	0x40010400
 8004090:	40014000 	.word	0x40014000
 8004094:	40014400 	.word	0x40014400
 8004098:	40014800 	.word	0x40014800
 800409c:	40001800 	.word	0x40001800
 80040a0:	40001c00 	.word	0x40001c00
 80040a4:	40002000 	.word	0x40002000

080040a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	f023 0201 	bic.w	r2, r3, #1
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f023 030a 	bic.w	r3, r3, #10
 80040e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	621a      	str	r2, [r3, #32]
}
 80040fa:	bf00      	nop
 80040fc:	371c      	adds	r7, #28
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004106:	b480      	push	{r7}
 8004108:	b087      	sub	sp, #28
 800410a:	af00      	add	r7, sp, #0
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	f023 0210 	bic.w	r2, r3, #16
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004130:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	031b      	lsls	r3, r3, #12
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	4313      	orrs	r3, r2
 800413a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004142:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	621a      	str	r2, [r3, #32]
}
 800415a:	bf00      	nop
 800415c:	371c      	adds	r7, #28
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004166:	b480      	push	{r7}
 8004168:	b085      	sub	sp, #20
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	f043 0307 	orr.w	r3, r3, #7
 8004188:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	609a      	str	r2, [r3, #8]
}
 8004190:	bf00      	nop
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	021a      	lsls	r2, r3, #8
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	431a      	orrs	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	609a      	str	r2, [r3, #8]
}
 80041d0:	bf00      	nop
 80041d2:	371c      	adds	r7, #28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d101      	bne.n	80041f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e05a      	b.n	80042aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a21      	ldr	r2, [pc, #132]	; (80042b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d022      	beq.n	800427e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004240:	d01d      	beq.n	800427e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a1d      	ldr	r2, [pc, #116]	; (80042bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d018      	beq.n	800427e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a1b      	ldr	r2, [pc, #108]	; (80042c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d013      	beq.n	800427e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a1a      	ldr	r2, [pc, #104]	; (80042c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d00e      	beq.n	800427e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a18      	ldr	r2, [pc, #96]	; (80042c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d009      	beq.n	800427e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a17      	ldr	r2, [pc, #92]	; (80042cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d004      	beq.n	800427e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a15      	ldr	r2, [pc, #84]	; (80042d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d10c      	bne.n	8004298 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004284:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	4313      	orrs	r3, r2
 800428e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40010000 	.word	0x40010000
 80042bc:	40000400 	.word	0x40000400
 80042c0:	40000800 	.word	0x40000800
 80042c4:	40000c00 	.word	0x40000c00
 80042c8:	40010400 	.word	0x40010400
 80042cc:	40014000 	.word	0x40014000
 80042d0:	40001800 	.word	0x40001800

080042d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e03f      	b.n	800438e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d106      	bne.n	8004328 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fd fe72 	bl	800200c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2224      	movs	r2, #36	; 0x24
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800433e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 fddb 	bl	8004efc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004354:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695a      	ldr	r2, [r3, #20]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004364:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004374:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b08a      	sub	sp, #40	; 0x28
 800439a:	af02      	add	r7, sp, #8
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	603b      	str	r3, [r7, #0]
 80043a2:	4613      	mov	r3, r2
 80043a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b20      	cmp	r3, #32
 80043b4:	d17c      	bne.n	80044b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <HAL_UART_Transmit+0x2c>
 80043bc:	88fb      	ldrh	r3, [r7, #6]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e075      	b.n	80044b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <HAL_UART_Transmit+0x3e>
 80043d0:	2302      	movs	r3, #2
 80043d2:	e06e      	b.n	80044b2 <HAL_UART_Transmit+0x11c>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2221      	movs	r2, #33	; 0x21
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043ea:	f7fd feef 	bl	80021cc <HAL_GetTick>
 80043ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	88fa      	ldrh	r2, [r7, #6]
 80043f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	88fa      	ldrh	r2, [r7, #6]
 80043fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004404:	d108      	bne.n	8004418 <HAL_UART_Transmit+0x82>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d104      	bne.n	8004418 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800440e:	2300      	movs	r3, #0
 8004410:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	61bb      	str	r3, [r7, #24]
 8004416:	e003      	b.n	8004420 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800441c:	2300      	movs	r3, #0
 800441e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004428:	e02a      	b.n	8004480 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2200      	movs	r2, #0
 8004432:	2180      	movs	r1, #128	; 0x80
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 fb1f 	bl	8004a78 <UART_WaitOnFlagUntilTimeout>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e036      	b.n	80044b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10b      	bne.n	8004462 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	461a      	mov	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004458:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	3302      	adds	r3, #2
 800445e:	61bb      	str	r3, [r7, #24]
 8004460:	e007      	b.n	8004472 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	781a      	ldrb	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	3301      	adds	r3, #1
 8004470:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004484:	b29b      	uxth	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1cf      	bne.n	800442a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2200      	movs	r2, #0
 8004492:	2140      	movs	r1, #64	; 0x40
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 faef 	bl	8004a78 <UART_WaitOnFlagUntilTimeout>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e006      	b.n	80044b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	e000      	b.n	80044b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80044b0:	2302      	movs	r3, #2
  }
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3720      	adds	r7, #32
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	4613      	mov	r3, r2
 80044c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d11d      	bne.n	8004510 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <HAL_UART_Receive_IT+0x26>
 80044da:	88fb      	ldrh	r3, [r7, #6]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e016      	b.n	8004512 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_UART_Receive_IT+0x38>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e00f      	b.n	8004512 <HAL_UART_Receive_IT+0x58>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	461a      	mov	r2, r3
 8004504:	68b9      	ldr	r1, [r7, #8]
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 fb24 	bl	8004b54 <UART_Start_Receive_IT>
 800450c:	4603      	mov	r3, r0
 800450e:	e000      	b.n	8004512 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004510:	2302      	movs	r3, #2
  }
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b0ba      	sub	sp, #232	; 0xe8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004542:	2300      	movs	r3, #0
 8004544:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004548:	2300      	movs	r3, #0
 800454a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800454e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800455a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10f      	bne.n	8004582 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <HAL_UART_IRQHandler+0x66>
 800456e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fc03 	bl	8004d86 <UART_Receive_IT>
      return;
 8004580:	e256      	b.n	8004a30 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004582:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 80de 	beq.w	8004748 <HAL_UART_IRQHandler+0x22c>
 800458c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d106      	bne.n	80045a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800459c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 80d1 	beq.w	8004748 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00b      	beq.n	80045ca <HAL_UART_IRQHandler+0xae>
 80045b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d005      	beq.n	80045ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	f043 0201 	orr.w	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ce:	f003 0304 	and.w	r3, r3, #4
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00b      	beq.n	80045ee <HAL_UART_IRQHandler+0xd2>
 80045d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f043 0202 	orr.w	r2, r3, #2
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00b      	beq.n	8004612 <HAL_UART_IRQHandler+0xf6>
 80045fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d005      	beq.n	8004612 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	f043 0204 	orr.w	r2, r3, #4
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d011      	beq.n	8004642 <HAL_UART_IRQHandler+0x126>
 800461e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b00      	cmp	r3, #0
 8004628:	d105      	bne.n	8004636 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800462a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	f043 0208 	orr.w	r2, r3, #8
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 81ed 	beq.w	8004a26 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800464c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004650:	f003 0320 	and.w	r3, r3, #32
 8004654:	2b00      	cmp	r3, #0
 8004656:	d008      	beq.n	800466a <HAL_UART_IRQHandler+0x14e>
 8004658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b00      	cmp	r3, #0
 8004662:	d002      	beq.n	800466a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fb8e 	bl	8004d86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004674:	2b40      	cmp	r3, #64	; 0x40
 8004676:	bf0c      	ite	eq
 8004678:	2301      	moveq	r3, #1
 800467a:	2300      	movne	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	d103      	bne.n	8004696 <HAL_UART_IRQHandler+0x17a>
 800468e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004692:	2b00      	cmp	r3, #0
 8004694:	d04f      	beq.n	8004736 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fa96 	bl	8004bc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a6:	2b40      	cmp	r3, #64	; 0x40
 80046a8:	d141      	bne.n	800472e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3314      	adds	r3, #20
 80046b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046b8:	e853 3f00 	ldrex	r3, [r3]
 80046bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3314      	adds	r3, #20
 80046d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1d9      	bne.n	80046aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d013      	beq.n	8004726 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004702:	4a7d      	ldr	r2, [pc, #500]	; (80048f8 <HAL_UART_IRQHandler+0x3dc>)
 8004704:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470a:	4618      	mov	r0, r3
 800470c:	f7fd ff0f 	bl	800252e <HAL_DMA_Abort_IT>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d016      	beq.n	8004744 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004720:	4610      	mov	r0, r2
 8004722:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004724:	e00e      	b.n	8004744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f990 	bl	8004a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800472c:	e00a      	b.n	8004744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f98c 	bl	8004a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004734:	e006      	b.n	8004744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f988 	bl	8004a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004742:	e170      	b.n	8004a26 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004744:	bf00      	nop
    return;
 8004746:	e16e      	b.n	8004a26 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474c:	2b01      	cmp	r3, #1
 800474e:	f040 814a 	bne.w	80049e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 8143 	beq.w	80049e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 813c 	beq.w	80049e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800476e:	2300      	movs	r3, #0
 8004770:	60bb      	str	r3, [r7, #8]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	60bb      	str	r3, [r7, #8]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	60bb      	str	r3, [r7, #8]
 8004782:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478e:	2b40      	cmp	r3, #64	; 0x40
 8004790:	f040 80b4 	bne.w	80048fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8140 	beq.w	8004a2a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047b2:	429a      	cmp	r2, r3
 80047b4:	f080 8139 	bcs.w	8004a2a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ca:	f000 8088 	beq.w	80048de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	330c      	adds	r3, #12
 80047d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047dc:	e853 3f00 	ldrex	r3, [r3]
 80047e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	330c      	adds	r3, #12
 80047f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80047fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004802:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004806:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800480a:	e841 2300 	strex	r3, r2, [r1]
 800480e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1d9      	bne.n	80047ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3314      	adds	r3, #20
 8004820:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800482a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800482c:	f023 0301 	bic.w	r3, r3, #1
 8004830:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3314      	adds	r3, #20
 800483a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800483e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004842:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004844:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004846:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e1      	bne.n	800481a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3314      	adds	r3, #20
 800485c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004860:	e853 3f00 	ldrex	r3, [r3]
 8004864:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800486c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3314      	adds	r3, #20
 8004876:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800487a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800487c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004880:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004882:	e841 2300 	strex	r3, r2, [r1]
 8004886:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1e3      	bne.n	8004856 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2220      	movs	r2, #32
 8004892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	330c      	adds	r3, #12
 80048a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048a6:	e853 3f00 	ldrex	r3, [r3]
 80048aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ae:	f023 0310 	bic.w	r3, r3, #16
 80048b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	330c      	adds	r3, #12
 80048bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80048c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80048c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048c8:	e841 2300 	strex	r3, r2, [r1]
 80048cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1e3      	bne.n	800489c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fd fdb8 	bl	800244e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	4619      	mov	r1, r3
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f8b6 	bl	8004a60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048f4:	e099      	b.n	8004a2a <HAL_UART_IRQHandler+0x50e>
 80048f6:	bf00      	nop
 80048f8:	08004c8f 	.word	0x08004c8f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004904:	b29b      	uxth	r3, r3
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004910:	b29b      	uxth	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 808b 	beq.w	8004a2e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004918:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 8086 	beq.w	8004a2e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	330c      	adds	r3, #12
 8004928:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004934:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004938:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	330c      	adds	r3, #12
 8004942:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004946:	647a      	str	r2, [r7, #68]	; 0x44
 8004948:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800494c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e3      	bne.n	8004922 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3314      	adds	r3, #20
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	623b      	str	r3, [r7, #32]
   return(result);
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	f023 0301 	bic.w	r3, r3, #1
 8004970:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3314      	adds	r3, #20
 800497a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800497e:	633a      	str	r2, [r7, #48]	; 0x30
 8004980:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004982:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004986:	e841 2300 	strex	r3, r2, [r1]
 800498a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800498c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1e3      	bne.n	800495a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	330c      	adds	r3, #12
 80049a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	e853 3f00 	ldrex	r3, [r3]
 80049ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0310 	bic.w	r3, r3, #16
 80049b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	330c      	adds	r3, #12
 80049c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80049c4:	61fa      	str	r2, [r7, #28]
 80049c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c8:	69b9      	ldr	r1, [r7, #24]
 80049ca:	69fa      	ldr	r2, [r7, #28]
 80049cc:	e841 2300 	strex	r3, r2, [r1]
 80049d0:	617b      	str	r3, [r7, #20]
   return(result);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1e3      	bne.n	80049a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049dc:	4619      	mov	r1, r3
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f83e 	bl	8004a60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049e4:	e023      	b.n	8004a2e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d009      	beq.n	8004a06 <HAL_UART_IRQHandler+0x4ea>
 80049f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f959 	bl	8004cb6 <UART_Transmit_IT>
    return;
 8004a04:	e014      	b.n	8004a30 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00e      	beq.n	8004a30 <HAL_UART_IRQHandler+0x514>
 8004a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d008      	beq.n	8004a30 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f999 	bl	8004d56 <UART_EndTransmit_IT>
    return;
 8004a24:	e004      	b.n	8004a30 <HAL_UART_IRQHandler+0x514>
    return;
 8004a26:	bf00      	nop
 8004a28:	e002      	b.n	8004a30 <HAL_UART_IRQHandler+0x514>
      return;
 8004a2a:	bf00      	nop
 8004a2c:	e000      	b.n	8004a30 <HAL_UART_IRQHandler+0x514>
      return;
 8004a2e:	bf00      	nop
  }
}
 8004a30:	37e8      	adds	r7, #232	; 0xe8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop

08004a38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b090      	sub	sp, #64	; 0x40
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	603b      	str	r3, [r7, #0]
 8004a84:	4613      	mov	r3, r2
 8004a86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a88:	e050      	b.n	8004b2c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a90:	d04c      	beq.n	8004b2c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d007      	beq.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a98:	f7fd fb98 	bl	80021cc <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d241      	bcs.n	8004b2c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	330c      	adds	r3, #12
 8004aae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	330c      	adds	r3, #12
 8004ac6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ac8:	637a      	str	r2, [r7, #52]	; 0x34
 8004aca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ace:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ad0:	e841 2300 	strex	r3, r2, [r1]
 8004ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e5      	bne.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3314      	adds	r3, #20
 8004ae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	e853 3f00 	ldrex	r3, [r3]
 8004aea:	613b      	str	r3, [r7, #16]
   return(result);
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f023 0301 	bic.w	r3, r3, #1
 8004af2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3314      	adds	r3, #20
 8004afa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004afc:	623a      	str	r2, [r7, #32]
 8004afe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b00:	69f9      	ldr	r1, [r7, #28]
 8004b02:	6a3a      	ldr	r2, [r7, #32]
 8004b04:	e841 2300 	strex	r3, r2, [r1]
 8004b08:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e5      	bne.n	8004adc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e00f      	b.n	8004b4c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	4013      	ands	r3, r2
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	bf0c      	ite	eq
 8004b3c:	2301      	moveq	r3, #1
 8004b3e:	2300      	movne	r3, #0
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	461a      	mov	r2, r3
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d09f      	beq.n	8004a8a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3740      	adds	r7, #64	; 0x40
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	88fa      	ldrh	r2, [r7, #6]
 8004b6c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	88fa      	ldrh	r2, [r7, #6]
 8004b72:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2222      	movs	r2, #34	; 0x22
 8004b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b98:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695a      	ldr	r2, [r3, #20]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0201 	orr.w	r2, r2, #1
 8004ba8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0220 	orr.w	r2, r2, #32
 8004bb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b095      	sub	sp, #84	; 0x54
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	330c      	adds	r3, #12
 8004bd6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bda:	e853 3f00 	ldrex	r3, [r3]
 8004bde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	330c      	adds	r3, #12
 8004bee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bf0:	643a      	str	r2, [r7, #64]	; 0x40
 8004bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bf8:	e841 2300 	strex	r3, r2, [r1]
 8004bfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e5      	bne.n	8004bd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3314      	adds	r3, #20
 8004c0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	e853 3f00 	ldrex	r3, [r3]
 8004c12:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	f023 0301 	bic.w	r3, r3, #1
 8004c1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3314      	adds	r3, #20
 8004c22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c2c:	e841 2300 	strex	r3, r2, [r1]
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1e5      	bne.n	8004c04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d119      	bne.n	8004c74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	330c      	adds	r3, #12
 8004c46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	e853 3f00 	ldrex	r3, [r3]
 8004c4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f023 0310 	bic.w	r3, r3, #16
 8004c56:	647b      	str	r3, [r7, #68]	; 0x44
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	330c      	adds	r3, #12
 8004c5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c60:	61ba      	str	r2, [r7, #24]
 8004c62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c64:	6979      	ldr	r1, [r7, #20]
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	e841 2300 	strex	r3, r2, [r1]
 8004c6c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e5      	bne.n	8004c40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c82:	bf00      	nop
 8004c84:	3754      	adds	r7, #84	; 0x54
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f7ff fecf 	bl	8004a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cae:	bf00      	nop
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b085      	sub	sp, #20
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b21      	cmp	r3, #33	; 0x21
 8004cc8:	d13e      	bne.n	8004d48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd2:	d114      	bne.n	8004cfe <UART_Transmit_IT+0x48>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d110      	bne.n	8004cfe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cf0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	1c9a      	adds	r2, r3, #2
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	621a      	str	r2, [r3, #32]
 8004cfc:	e008      	b.n	8004d10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	1c59      	adds	r1, r3, #1
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	6211      	str	r1, [r2, #32]
 8004d08:	781a      	ldrb	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	3b01      	subs	r3, #1
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10f      	bne.n	8004d44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d44:	2300      	movs	r3, #0
 8004d46:	e000      	b.n	8004d4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d48:	2302      	movs	r3, #2
  }
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b082      	sub	sp, #8
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff fe5e 	bl	8004a38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b08c      	sub	sp, #48	; 0x30
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b22      	cmp	r3, #34	; 0x22
 8004d98:	f040 80ab 	bne.w	8004ef2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da4:	d117      	bne.n	8004dd6 <UART_Receive_IT+0x50>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d113      	bne.n	8004dd6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004dae:	2300      	movs	r3, #0
 8004db0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dce:	1c9a      	adds	r2, r3, #2
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	629a      	str	r2, [r3, #40]	; 0x28
 8004dd4:	e026      	b.n	8004e24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dda:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de8:	d007      	beq.n	8004dfa <UART_Receive_IT+0x74>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10a      	bne.n	8004e08 <UART_Receive_IT+0x82>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e04:	701a      	strb	r2, [r3, #0]
 8004e06:	e008      	b.n	8004e1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	4619      	mov	r1, r3
 8004e32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d15a      	bne.n	8004eee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0220 	bic.w	r2, r2, #32
 8004e46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	695a      	ldr	r2, [r3, #20]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0201 	bic.w	r2, r2, #1
 8004e66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d135      	bne.n	8004ee4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	330c      	adds	r3, #12
 8004e84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	e853 3f00 	ldrex	r3, [r3]
 8004e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f023 0310 	bic.w	r3, r3, #16
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	330c      	adds	r3, #12
 8004e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e9e:	623a      	str	r2, [r7, #32]
 8004ea0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea2:	69f9      	ldr	r1, [r7, #28]
 8004ea4:	6a3a      	ldr	r2, [r7, #32]
 8004ea6:	e841 2300 	strex	r3, r2, [r1]
 8004eaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1e5      	bne.n	8004e7e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	2b10      	cmp	r3, #16
 8004ebe:	d10a      	bne.n	8004ed6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004eda:	4619      	mov	r1, r3
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff fdbf 	bl	8004a60 <HAL_UARTEx_RxEventCallback>
 8004ee2:	e002      	b.n	8004eea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7fd f849 	bl	8001f7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	e002      	b.n	8004ef4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e000      	b.n	8004ef4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004ef2:	2302      	movs	r3, #2
  }
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3730      	adds	r7, #48	; 0x30
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f00:	b09f      	sub	sp, #124	; 0x7c
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f12:	68d9      	ldr	r1, [r3, #12]
 8004f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	ea40 0301 	orr.w	r3, r0, r1
 8004f1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f20:	689a      	ldr	r2, [r3, #8]
 8004f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f40:	f021 010c 	bic.w	r1, r1, #12
 8004f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f4a:	430b      	orrs	r3, r1
 8004f4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f5a:	6999      	ldr	r1, [r3, #24]
 8004f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	ea40 0301 	orr.w	r3, r0, r1
 8004f64:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	4bc5      	ldr	r3, [pc, #788]	; (8005280 <UART_SetConfig+0x384>)
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d004      	beq.n	8004f7a <UART_SetConfig+0x7e>
 8004f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	4bc3      	ldr	r3, [pc, #780]	; (8005284 <UART_SetConfig+0x388>)
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d103      	bne.n	8004f82 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f7a:	f7fe fa55 	bl	8003428 <HAL_RCC_GetPCLK2Freq>
 8004f7e:	6778      	str	r0, [r7, #116]	; 0x74
 8004f80:	e002      	b.n	8004f88 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f82:	f7fe fa3d 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 8004f86:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f90:	f040 80b6 	bne.w	8005100 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f96:	461c      	mov	r4, r3
 8004f98:	f04f 0500 	mov.w	r5, #0
 8004f9c:	4622      	mov	r2, r4
 8004f9e:	462b      	mov	r3, r5
 8004fa0:	1891      	adds	r1, r2, r2
 8004fa2:	6439      	str	r1, [r7, #64]	; 0x40
 8004fa4:	415b      	adcs	r3, r3
 8004fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8004fa8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004fac:	1912      	adds	r2, r2, r4
 8004fae:	eb45 0303 	adc.w	r3, r5, r3
 8004fb2:	f04f 0000 	mov.w	r0, #0
 8004fb6:	f04f 0100 	mov.w	r1, #0
 8004fba:	00d9      	lsls	r1, r3, #3
 8004fbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fc0:	00d0      	lsls	r0, r2, #3
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	1911      	adds	r1, r2, r4
 8004fc8:	6639      	str	r1, [r7, #96]	; 0x60
 8004fca:	416b      	adcs	r3, r5
 8004fcc:	667b      	str	r3, [r7, #100]	; 0x64
 8004fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	1891      	adds	r1, r2, r2
 8004fda:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fdc:	415b      	adcs	r3, r3
 8004fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fe0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004fe4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004fe8:	f7fb fcdc 	bl	80009a4 <__aeabi_uldivmod>
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4ba5      	ldr	r3, [pc, #660]	; (8005288 <UART_SetConfig+0x38c>)
 8004ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	011e      	lsls	r6, r3, #4
 8004ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ffc:	461c      	mov	r4, r3
 8004ffe:	f04f 0500 	mov.w	r5, #0
 8005002:	4622      	mov	r2, r4
 8005004:	462b      	mov	r3, r5
 8005006:	1891      	adds	r1, r2, r2
 8005008:	6339      	str	r1, [r7, #48]	; 0x30
 800500a:	415b      	adcs	r3, r3
 800500c:	637b      	str	r3, [r7, #52]	; 0x34
 800500e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005012:	1912      	adds	r2, r2, r4
 8005014:	eb45 0303 	adc.w	r3, r5, r3
 8005018:	f04f 0000 	mov.w	r0, #0
 800501c:	f04f 0100 	mov.w	r1, #0
 8005020:	00d9      	lsls	r1, r3, #3
 8005022:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005026:	00d0      	lsls	r0, r2, #3
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	1911      	adds	r1, r2, r4
 800502e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005030:	416b      	adcs	r3, r5
 8005032:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	461a      	mov	r2, r3
 800503a:	f04f 0300 	mov.w	r3, #0
 800503e:	1891      	adds	r1, r2, r2
 8005040:	62b9      	str	r1, [r7, #40]	; 0x28
 8005042:	415b      	adcs	r3, r3
 8005044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005046:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800504a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800504e:	f7fb fca9 	bl	80009a4 <__aeabi_uldivmod>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4b8c      	ldr	r3, [pc, #560]	; (8005288 <UART_SetConfig+0x38c>)
 8005058:	fba3 1302 	umull	r1, r3, r3, r2
 800505c:	095b      	lsrs	r3, r3, #5
 800505e:	2164      	movs	r1, #100	; 0x64
 8005060:	fb01 f303 	mul.w	r3, r1, r3
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	3332      	adds	r3, #50	; 0x32
 800506a:	4a87      	ldr	r2, [pc, #540]	; (8005288 <UART_SetConfig+0x38c>)
 800506c:	fba2 2303 	umull	r2, r3, r2, r3
 8005070:	095b      	lsrs	r3, r3, #5
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005078:	441e      	add	r6, r3
 800507a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800507c:	4618      	mov	r0, r3
 800507e:	f04f 0100 	mov.w	r1, #0
 8005082:	4602      	mov	r2, r0
 8005084:	460b      	mov	r3, r1
 8005086:	1894      	adds	r4, r2, r2
 8005088:	623c      	str	r4, [r7, #32]
 800508a:	415b      	adcs	r3, r3
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
 800508e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005092:	1812      	adds	r2, r2, r0
 8005094:	eb41 0303 	adc.w	r3, r1, r3
 8005098:	f04f 0400 	mov.w	r4, #0
 800509c:	f04f 0500 	mov.w	r5, #0
 80050a0:	00dd      	lsls	r5, r3, #3
 80050a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80050a6:	00d4      	lsls	r4, r2, #3
 80050a8:	4622      	mov	r2, r4
 80050aa:	462b      	mov	r3, r5
 80050ac:	1814      	adds	r4, r2, r0
 80050ae:	653c      	str	r4, [r7, #80]	; 0x50
 80050b0:	414b      	adcs	r3, r1
 80050b2:	657b      	str	r3, [r7, #84]	; 0x54
 80050b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	461a      	mov	r2, r3
 80050ba:	f04f 0300 	mov.w	r3, #0
 80050be:	1891      	adds	r1, r2, r2
 80050c0:	61b9      	str	r1, [r7, #24]
 80050c2:	415b      	adcs	r3, r3
 80050c4:	61fb      	str	r3, [r7, #28]
 80050c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80050ce:	f7fb fc69 	bl	80009a4 <__aeabi_uldivmod>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	4b6c      	ldr	r3, [pc, #432]	; (8005288 <UART_SetConfig+0x38c>)
 80050d8:	fba3 1302 	umull	r1, r3, r3, r2
 80050dc:	095b      	lsrs	r3, r3, #5
 80050de:	2164      	movs	r1, #100	; 0x64
 80050e0:	fb01 f303 	mul.w	r3, r1, r3
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	3332      	adds	r3, #50	; 0x32
 80050ea:	4a67      	ldr	r2, [pc, #412]	; (8005288 <UART_SetConfig+0x38c>)
 80050ec:	fba2 2303 	umull	r2, r3, r2, r3
 80050f0:	095b      	lsrs	r3, r3, #5
 80050f2:	f003 0207 	and.w	r2, r3, #7
 80050f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4432      	add	r2, r6
 80050fc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050fe:	e0b9      	b.n	8005274 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005102:	461c      	mov	r4, r3
 8005104:	f04f 0500 	mov.w	r5, #0
 8005108:	4622      	mov	r2, r4
 800510a:	462b      	mov	r3, r5
 800510c:	1891      	adds	r1, r2, r2
 800510e:	6139      	str	r1, [r7, #16]
 8005110:	415b      	adcs	r3, r3
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005118:	1912      	adds	r2, r2, r4
 800511a:	eb45 0303 	adc.w	r3, r5, r3
 800511e:	f04f 0000 	mov.w	r0, #0
 8005122:	f04f 0100 	mov.w	r1, #0
 8005126:	00d9      	lsls	r1, r3, #3
 8005128:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800512c:	00d0      	lsls	r0, r2, #3
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	eb12 0804 	adds.w	r8, r2, r4
 8005136:	eb43 0905 	adc.w	r9, r3, r5
 800513a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	4618      	mov	r0, r3
 8005140:	f04f 0100 	mov.w	r1, #0
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	f04f 0300 	mov.w	r3, #0
 800514c:	008b      	lsls	r3, r1, #2
 800514e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005152:	0082      	lsls	r2, r0, #2
 8005154:	4640      	mov	r0, r8
 8005156:	4649      	mov	r1, r9
 8005158:	f7fb fc24 	bl	80009a4 <__aeabi_uldivmod>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	4b49      	ldr	r3, [pc, #292]	; (8005288 <UART_SetConfig+0x38c>)
 8005162:	fba3 2302 	umull	r2, r3, r3, r2
 8005166:	095b      	lsrs	r3, r3, #5
 8005168:	011e      	lsls	r6, r3, #4
 800516a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800516c:	4618      	mov	r0, r3
 800516e:	f04f 0100 	mov.w	r1, #0
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	1894      	adds	r4, r2, r2
 8005178:	60bc      	str	r4, [r7, #8]
 800517a:	415b      	adcs	r3, r3
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005182:	1812      	adds	r2, r2, r0
 8005184:	eb41 0303 	adc.w	r3, r1, r3
 8005188:	f04f 0400 	mov.w	r4, #0
 800518c:	f04f 0500 	mov.w	r5, #0
 8005190:	00dd      	lsls	r5, r3, #3
 8005192:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005196:	00d4      	lsls	r4, r2, #3
 8005198:	4622      	mov	r2, r4
 800519a:	462b      	mov	r3, r5
 800519c:	1814      	adds	r4, r2, r0
 800519e:	64bc      	str	r4, [r7, #72]	; 0x48
 80051a0:	414b      	adcs	r3, r1
 80051a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f04f 0100 	mov.w	r1, #0
 80051ae:	f04f 0200 	mov.w	r2, #0
 80051b2:	f04f 0300 	mov.w	r3, #0
 80051b6:	008b      	lsls	r3, r1, #2
 80051b8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80051bc:	0082      	lsls	r2, r0, #2
 80051be:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80051c2:	f7fb fbef 	bl	80009a4 <__aeabi_uldivmod>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	4b2f      	ldr	r3, [pc, #188]	; (8005288 <UART_SetConfig+0x38c>)
 80051cc:	fba3 1302 	umull	r1, r3, r3, r2
 80051d0:	095b      	lsrs	r3, r3, #5
 80051d2:	2164      	movs	r1, #100	; 0x64
 80051d4:	fb01 f303 	mul.w	r3, r1, r3
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	3332      	adds	r3, #50	; 0x32
 80051de:	4a2a      	ldr	r2, [pc, #168]	; (8005288 <UART_SetConfig+0x38c>)
 80051e0:	fba2 2303 	umull	r2, r3, r2, r3
 80051e4:	095b      	lsrs	r3, r3, #5
 80051e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051ea:	441e      	add	r6, r3
 80051ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051ee:	4618      	mov	r0, r3
 80051f0:	f04f 0100 	mov.w	r1, #0
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	1894      	adds	r4, r2, r2
 80051fa:	603c      	str	r4, [r7, #0]
 80051fc:	415b      	adcs	r3, r3
 80051fe:	607b      	str	r3, [r7, #4]
 8005200:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005204:	1812      	adds	r2, r2, r0
 8005206:	eb41 0303 	adc.w	r3, r1, r3
 800520a:	f04f 0400 	mov.w	r4, #0
 800520e:	f04f 0500 	mov.w	r5, #0
 8005212:	00dd      	lsls	r5, r3, #3
 8005214:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005218:	00d4      	lsls	r4, r2, #3
 800521a:	4622      	mov	r2, r4
 800521c:	462b      	mov	r3, r5
 800521e:	eb12 0a00 	adds.w	sl, r2, r0
 8005222:	eb43 0b01 	adc.w	fp, r3, r1
 8005226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	4618      	mov	r0, r3
 800522c:	f04f 0100 	mov.w	r1, #0
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	008b      	lsls	r3, r1, #2
 800523a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800523e:	0082      	lsls	r2, r0, #2
 8005240:	4650      	mov	r0, sl
 8005242:	4659      	mov	r1, fp
 8005244:	f7fb fbae 	bl	80009a4 <__aeabi_uldivmod>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	4b0e      	ldr	r3, [pc, #56]	; (8005288 <UART_SetConfig+0x38c>)
 800524e:	fba3 1302 	umull	r1, r3, r3, r2
 8005252:	095b      	lsrs	r3, r3, #5
 8005254:	2164      	movs	r1, #100	; 0x64
 8005256:	fb01 f303 	mul.w	r3, r1, r3
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	3332      	adds	r3, #50	; 0x32
 8005260:	4a09      	ldr	r2, [pc, #36]	; (8005288 <UART_SetConfig+0x38c>)
 8005262:	fba2 2303 	umull	r2, r3, r2, r3
 8005266:	095b      	lsrs	r3, r3, #5
 8005268:	f003 020f 	and.w	r2, r3, #15
 800526c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4432      	add	r2, r6
 8005272:	609a      	str	r2, [r3, #8]
}
 8005274:	bf00      	nop
 8005276:	377c      	adds	r7, #124	; 0x7c
 8005278:	46bd      	mov	sp, r7
 800527a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800527e:	bf00      	nop
 8005280:	40011000 	.word	0x40011000
 8005284:	40011400 	.word	0x40011400
 8005288:	51eb851f 	.word	0x51eb851f

0800528c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052a4:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	4b20      	ldr	r3, [pc, #128]	; (800532c <FSMC_NORSRAM_Init+0xa0>)
 80052aa:	4013      	ands	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80052b6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80052bc:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80052c2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80052c8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80052ce:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80052d4:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80052da:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80052e0:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80052e6:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80052ec:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80052f2:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80052f8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	2b08      	cmp	r3, #8
 8005306:	d103      	bne.n	8005310 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800530e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68f9      	ldr	r1, [r7, #12]
 8005318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	fff00080 	.word	0xfff00080

08005330 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800534a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005352:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800535e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005366:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800536e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	3b01      	subs	r3, #1
 8005376:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005378:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	3b02      	subs	r3, #2
 8005380:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005382:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005388:	4313      	orrs	r3, r2
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6979      	ldr	r1, [r7, #20]
 8005398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	371c      	adds	r7, #28
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
	...

080053ac <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053c4:	d122      	bne.n	800540c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ce:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4b15      	ldr	r3, [pc, #84]	; (8005428 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80053d4:	4013      	ands	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80053e2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80053ea:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80053f2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80053f8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6979      	ldr	r1, [r7, #20]
 8005406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800540a:	e005      	b.n	8005418 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	371c      	adds	r7, #28
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	cff00000 	.word	0xcff00000

0800542c <__libc_init_array>:
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	4d0d      	ldr	r5, [pc, #52]	; (8005464 <__libc_init_array+0x38>)
 8005430:	4c0d      	ldr	r4, [pc, #52]	; (8005468 <__libc_init_array+0x3c>)
 8005432:	1b64      	subs	r4, r4, r5
 8005434:	10a4      	asrs	r4, r4, #2
 8005436:	2600      	movs	r6, #0
 8005438:	42a6      	cmp	r6, r4
 800543a:	d109      	bne.n	8005450 <__libc_init_array+0x24>
 800543c:	4d0b      	ldr	r5, [pc, #44]	; (800546c <__libc_init_array+0x40>)
 800543e:	4c0c      	ldr	r4, [pc, #48]	; (8005470 <__libc_init_array+0x44>)
 8005440:	f000 f820 	bl	8005484 <_init>
 8005444:	1b64      	subs	r4, r4, r5
 8005446:	10a4      	asrs	r4, r4, #2
 8005448:	2600      	movs	r6, #0
 800544a:	42a6      	cmp	r6, r4
 800544c:	d105      	bne.n	800545a <__libc_init_array+0x2e>
 800544e:	bd70      	pop	{r4, r5, r6, pc}
 8005450:	f855 3b04 	ldr.w	r3, [r5], #4
 8005454:	4798      	blx	r3
 8005456:	3601      	adds	r6, #1
 8005458:	e7ee      	b.n	8005438 <__libc_init_array+0xc>
 800545a:	f855 3b04 	ldr.w	r3, [r5], #4
 800545e:	4798      	blx	r3
 8005460:	3601      	adds	r6, #1
 8005462:	e7f2      	b.n	800544a <__libc_init_array+0x1e>
 8005464:	080054bc 	.word	0x080054bc
 8005468:	080054bc 	.word	0x080054bc
 800546c:	080054bc 	.word	0x080054bc
 8005470:	080054c0 	.word	0x080054c0

08005474 <memset>:
 8005474:	4402      	add	r2, r0
 8005476:	4603      	mov	r3, r0
 8005478:	4293      	cmp	r3, r2
 800547a:	d100      	bne.n	800547e <memset+0xa>
 800547c:	4770      	bx	lr
 800547e:	f803 1b01 	strb.w	r1, [r3], #1
 8005482:	e7f9      	b.n	8005478 <memset+0x4>

08005484 <_init>:
 8005484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005486:	bf00      	nop
 8005488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548a:	bc08      	pop	{r3}
 800548c:	469e      	mov	lr, r3
 800548e:	4770      	bx	lr

08005490 <_fini>:
 8005490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005492:	bf00      	nop
 8005494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005496:	bc08      	pop	{r3}
 8005498:	469e      	mov	lr, r3
 800549a:	4770      	bx	lr
